
Vibrationv1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a864  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800a970  0800a970  0001a970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad20  0800ad20  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad20  0800ad20  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad20  0800ad20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad24  0800ad24  0001ad24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ad28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f0  20000074  0800ad9c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001464  0800ad9c  00021464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000179a9  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003881  00000000  00000000  00037a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  0003b310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001253  00000000  00000000  0003ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b0df  00000000  00000000  0003dcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d6d9  00000000  00000000  00058d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096609  00000000  00000000  00076473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006afc  00000000  00000000  0010ca7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00113578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a958 	.word	0x0800a958

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800a958 	.word	0x0800a958

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <Vibric_ParseCommandName>:
#include <string.h>
#include <stdlib.h>
#include "command_viric.h"

char* Vibric_ParseCommandName(char request[])
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	char* command = (char*)malloc(5 * sizeof(char));
 8000178:	2005      	movs	r0, #5
 800017a:	f009 fa7d 	bl	8009678 <malloc>
 800017e:	4603      	mov	r3, r0
 8000180:	60fb      	str	r3, [r7, #12]
	if (command == NULL) {
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d101      	bne.n	800018c <Vibric_ParseCommandName+0x1c>
		return NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	e00a      	b.n	80001a2 <Vibric_ParseCommandName+0x32>
	}
	memcpy(command, &request[1], 4);
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	3301      	adds	r3, #1
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	461a      	mov	r2, r3
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	601a      	str	r2, [r3, #0]
	command[4] = '\0';
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	3304      	adds	r3, #4
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
	return command;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3710      	adds	r7, #16
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
	...

080001ac <Vibric_ParseCommandCode>:

int Vibric_ParseCommandCode(char request[])
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	int code;
	sscanf(request, "(%*[^,],%1d", &code);
 80001b4:	f107 030c 	add.w	r3, r7, #12
 80001b8:	461a      	mov	r2, r3
 80001ba:	4904      	ldr	r1, [pc, #16]	; (80001cc <Vibric_ParseCommandCode+0x20>)
 80001bc:	6878      	ldr	r0, [r7, #4]
 80001be:	f009 fb37 	bl	8009830 <siscanf>
	return code;
 80001c2:	68fb      	ldr	r3, [r7, #12]
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3710      	adds	r7, #16
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	0800a970 	.word	0x0800a970

080001d0 <Vibric_ParseCommandData>:

char* Vibric_ParseCommandData(char request[])
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	char* data = (char*)malloc(13 * sizeof(char));
 80001d8:	200d      	movs	r0, #13
 80001da:	f009 fa4d 	bl	8009678 <malloc>
 80001de:	4603      	mov	r3, r0
 80001e0:	60fb      	str	r3, [r7, #12]
	if (data == NULL)
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <Vibric_ParseCommandData+0x1c>
		return NULL;
 80001e8:	2300      	movs	r3, #0
 80001ea:	e009      	b.n	8000200 <Vibric_ParseCommandData+0x30>
	sscanf(request, "(%*[^,],%*d,%s)", data);
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	4906      	ldr	r1, [pc, #24]	; (8000208 <Vibric_ParseCommandData+0x38>)
 80001f0:	6878      	ldr	r0, [r7, #4]
 80001f2:	f009 fb1d 	bl	8009830 <siscanf>
	data[12] = '\0';
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	330c      	adds	r3, #12
 80001fa:	2200      	movs	r2, #0
 80001fc:	701a      	strb	r2, [r3, #0]
	return data;
 80001fe:	68fb      	ldr	r3, [r7, #12]
}
 8000200:	4618      	mov	r0, r3
 8000202:	3710      	adds	r7, #16
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	0800a97c 	.word	0x0800a97c

0800020c <Vibric_ConvertCommandDataToInt>:

int Vibric_ConvertCommandDataToInt(char data_to_convert[])
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	int data;
	sscanf(data_to_convert, "%d", &data);
 8000214:	f107 030c 	add.w	r3, r7, #12
 8000218:	461a      	mov	r2, r3
 800021a:	4904      	ldr	r1, [pc, #16]	; (800022c <Vibric_ConvertCommandDataToInt+0x20>)
 800021c:	6878      	ldr	r0, [r7, #4]
 800021e:	f009 fb07 	bl	8009830 <siscanf>
	return data;
 8000222:	68fb      	ldr	r3, [r7, #12]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3710      	adds	r7, #16
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	0800a98c 	.word	0x0800a98c

08000230 <Vibric_ParseCommand>:


Vibric_CommandTypeDef Vibric_ParseCommand(char request[])
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
	Vibric_CommandTypeDef command;
	command.name = Vibric_ParseCommandName(request);
 800023a:	6838      	ldr	r0, [r7, #0]
 800023c:	f7ff ff98 	bl	8000170 <Vibric_ParseCommandName>
 8000240:	4603      	mov	r3, r0
 8000242:	60fb      	str	r3, [r7, #12]
	command.code = Vibric_ParseCommandCode(request);
 8000244:	6838      	ldr	r0, [r7, #0]
 8000246:	f7ff ffb1 	bl	80001ac <Vibric_ParseCommandCode>
 800024a:	4603      	mov	r3, r0
 800024c:	613b      	str	r3, [r7, #16]
	if ((command.code % 2) == 1)
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	2b00      	cmp	r3, #0
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	bfb8      	it	lt
 8000258:	425b      	neglt	r3, r3
 800025a:	2b01      	cmp	r3, #1
 800025c:	d104      	bne.n	8000268 <Vibric_ParseCommand+0x38>
		command.data = Vibric_ParseCommandData(request);
 800025e:	6838      	ldr	r0, [r7, #0]
 8000260:	f7ff ffb6 	bl	80001d0 <Vibric_ParseCommandData>
 8000264:	4603      	mov	r3, r0
 8000266:	617b      	str	r3, [r7, #20]
	return command;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	461c      	mov	r4, r3
 800026c:	f107 030c 	add.w	r3, r7, #12
 8000270:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000278:	6878      	ldr	r0, [r7, #4]
 800027a:	371c      	adds	r7, #28
 800027c:	46bd      	mov	sp, r7
 800027e:	bd90      	pop	{r4, r7, pc}

08000280 <DS1307_Init>:
 * @brief Initialization of DS1307 module. Call this function before start working with RTC.
 * @param hi2c - I2C handler
 * @return 0 - OK, 1 - param = NULL
 */
uint8_t DS1307_Init(I2C_HandleTypeDef *hi2c)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	if (hi2c == NULL)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d101      	bne.n	8000292 <DS1307_Init+0x12>
		return 1;
 800028e:	2301      	movs	r3, #1
 8000290:	e006      	b.n	80002a0 <DS1307_Init+0x20>
	ds1307_i2c = hi2c;
 8000292:	4a05      	ldr	r2, [pc, #20]	; (80002a8 <DS1307_Init+0x28>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 8000298:	2000      	movs	r0, #0
 800029a:	f000 f847 	bl	800032c <DS1307_SetClockHalt>
	return 0;
 800029e:	2300      	movs	r3, #0
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000090 	.word	0x20000090

080002ac <DS1307_GetRegData>:

uint8_t DS1307_GetRegData(uint8_t addr)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af02      	add	r7, sp, #8
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	HAL_I2C_Master_Transmit(ds1307_i2c, DS1307_ADDRESS << 1, &addr, 1, DS1307_TIMEOUT);
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <DS1307_GetRegData+0x40>)
 80002b8:	6818      	ldr	r0, [r3, #0]
 80002ba:	1dfa      	adds	r2, r7, #7
 80002bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2301      	movs	r3, #1
 80002c4:	21d0      	movs	r1, #208	; 0xd0
 80002c6:	f002 fedd 	bl	8003084 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ds1307_i2c, DS1307_ADDRESS << 1, &value, 1, DS1307_TIMEOUT);
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <DS1307_GetRegData+0x40>)
 80002cc:	6818      	ldr	r0, [r3, #0]
 80002ce:	f107 020f 	add.w	r2, r7, #15
 80002d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	2301      	movs	r3, #1
 80002da:	21d0      	movs	r1, #208	; 0xd0
 80002dc:	f002 ffd0 	bl	8003280 <HAL_I2C_Master_Receive>
	return value;
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3710      	adds	r7, #16
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000090 	.word	0x20000090

080002f0 <DS1307_SetRegData>:

void DS1307_SetRegData(uint8_t addr, uint8_t value)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af02      	add	r7, sp, #8
 80002f6:	4603      	mov	r3, r0
 80002f8:	460a      	mov	r2, r1
 80002fa:	71fb      	strb	r3, [r7, #7]
 80002fc:	4613      	mov	r3, r2
 80002fe:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = {addr, value};
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	733b      	strb	r3, [r7, #12]
 8000304:	79bb      	ldrb	r3, [r7, #6]
 8000306:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ds1307_i2c, DS1307_ADDRESS << 1, bytes, 2, DS1307_TIMEOUT);
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <DS1307_SetRegData+0x38>)
 800030a:	6818      	ldr	r0, [r3, #0]
 800030c:	f107 020c 	add.w	r2, r7, #12
 8000310:	f241 3388 	movw	r3, #5000	; 0x1388
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2302      	movs	r3, #2
 8000318:	21d0      	movs	r1, #208	; 0xd0
 800031a:	f002 feb3 	bl	8003084 <HAL_I2C_Master_Transmit>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000090 	.word	0x20000090

0800032c <DS1307_SetClockHalt>:
{
	return (DS1307_GetRegData(DS1307_REG_SECOND) & 0x80) >> 7;
}

void DS1307_SetClockHalt(uint8_t halt)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	71fb      	strb	r3, [r7, #7]
	uint8_t clockHalt = (halt ? 1 << 7 : 0);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <DS1307_SetClockHalt+0x14>
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	e000      	b.n	8000342 <DS1307_SetClockHalt+0x16>
 8000340:	2300      	movs	r3, #0
 8000342:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegData(DS1307_REG_SECOND, clockHalt | (DS1307_GetRegData(DS1307_REG_SECOND) & 0x7F));
 8000344:	2000      	movs	r0, #0
 8000346:	f7ff ffb1 	bl	80002ac <DS1307_GetRegData>
 800034a:	4603      	mov	r3, r0
 800034c:	b25b      	sxtb	r3, r3
 800034e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000352:	b25a      	sxtb	r2, r3
 8000354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000358:	4313      	orrs	r3, r2
 800035a:	b25b      	sxtb	r3, r3
 800035c:	b2db      	uxtb	r3, r3
 800035e:	4619      	mov	r1, r3
 8000360:	2000      	movs	r0, #0
 8000362:	f7ff ffc5 	bl	80002f0 <DS1307_SetRegData>
}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <DS1307_SetRate>:

void DS1307_SetRate(DS1307_Rate rate)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	b084      	sub	sp, #16
 8000372:	af00      	add	r7, sp, #0
 8000374:	4603      	mov	r3, r0
 8000376:	71fb      	strb	r3, [r7, #7]
	uint8_t controlRegister = DS1307_GetRegData(DS1307_REG_CONTROL);
 8000378:	2007      	movs	r0, #7
 800037a:	f7ff ff97 	bl	80002ac <DS1307_GetRegData>
 800037e:	4603      	mov	r3, r0
 8000380:	73fb      	strb	r3, [r7, #15]
	uint8_t updatedControlRegister = (controlRegister & ~0x03) | rate;
 8000382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000386:	f023 0303 	bic.w	r3, r3, #3
 800038a:	b25a      	sxtb	r2, r3
 800038c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000390:	4313      	orrs	r3, r2
 8000392:	b25b      	sxtb	r3, r3
 8000394:	73bb      	strb	r3, [r7, #14]
	DS1307_SetRegData(DS1307_REG_CONTROL, updatedControlRegister);
 8000396:	7bbb      	ldrb	r3, [r7, #14]
 8000398:	4619      	mov	r1, r3
 800039a:	2007      	movs	r0, #7
 800039c:	f7ff ffa8 	bl	80002f0 <DS1307_SetRegData>
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <DS1307_GetSecond>:

uint8_t DS1307_GetSecond(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegData(DS1307_REG_SECOND));
 80003ac:	2000      	movs	r0, #0
 80003ae:	f7ff ff7d 	bl	80002ac <DS1307_GetRegData>
 80003b2:	4603      	mov	r3, r0
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f8cd 	bl	8000554 <DS1307_DecodeBCD>
 80003ba:	4603      	mov	r3, r0
}
 80003bc:	4618      	mov	r0, r3
 80003be:	bd80      	pop	{r7, pc}

080003c0 <DS1307_SetSecond>:

void DS1307_SetSecond(uint8_t second)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegData(DS1307_REG_SECOND, DS1307_EncodeBCD(second));
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 f89f 	bl	8000510 <DS1307_EncodeBCD>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4619      	mov	r1, r3
 80003d6:	2000      	movs	r0, #0
 80003d8:	f7ff ff8a 	bl	80002f0 <DS1307_SetRegData>
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <DS1307_GetMinute>:

uint8_t DS1307_GetMinute(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegData(DS1307_REG_MINUTE));
 80003e8:	2001      	movs	r0, #1
 80003ea:	f7ff ff5f 	bl	80002ac <DS1307_GetRegData>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f8af 	bl	8000554 <DS1307_DecodeBCD>
 80003f6:	4603      	mov	r3, r0
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	bd80      	pop	{r7, pc}

080003fc <DS1307_SetMinute>:

void DS1307_SetMinute(uint8_t minute)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegData(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f881 	bl	8000510 <DS1307_EncodeBCD>
 800040e:	4603      	mov	r3, r0
 8000410:	4619      	mov	r1, r3
 8000412:	2001      	movs	r0, #1
 8000414:	f7ff ff6c 	bl	80002f0 <DS1307_SetRegData>
}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <DS1307_GetHour>:

uint8_t DS1307_GetHour(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegData(DS1307_REG_HOUR));
 8000424:	2002      	movs	r0, #2
 8000426:	f7ff ff41 	bl	80002ac <DS1307_GetRegData>
 800042a:	4603      	mov	r3, r0
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f891 	bl	8000554 <DS1307_DecodeBCD>
 8000432:	4603      	mov	r3, r0
}
 8000434:	4618      	mov	r0, r3
 8000436:	bd80      	pop	{r7, pc}

08000438 <DS1307_SetHour>:

void DS1307_SetHour(uint8_t hour)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegData(DS1307_REG_HOUR, DS1307_EncodeBCD(hour));
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f863 	bl	8000510 <DS1307_EncodeBCD>
 800044a:	4603      	mov	r3, r0
 800044c:	4619      	mov	r1, r3
 800044e:	2002      	movs	r0, #2
 8000450:	f7ff ff4e 	bl	80002f0 <DS1307_SetRegData>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <DS1307_GetDOM>:
{
	DS1307_SetRegData(DS1307_REG_DOW, DS1307_EncodeBCD(dow));
}

uint8_t DS1307_GetDOM(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegData(DS1307_REG_DOM));
 8000460:	2004      	movs	r0, #4
 8000462:	f7ff ff23 	bl	80002ac <DS1307_GetRegData>
 8000466:	4603      	mov	r3, r0
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f873 	bl	8000554 <DS1307_DecodeBCD>
 800046e:	4603      	mov	r3, r0
}
 8000470:	4618      	mov	r0, r3
 8000472:	bd80      	pop	{r7, pc}

08000474 <DS1307_SetDOM>:

void DS1307_SetDOM(uint8_t dom)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegData(DS1307_REG_DOM, DS1307_EncodeBCD(dom));
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	4618      	mov	r0, r3
 8000482:	f000 f845 	bl	8000510 <DS1307_EncodeBCD>
 8000486:	4603      	mov	r3, r0
 8000488:	4619      	mov	r1, r3
 800048a:	2004      	movs	r0, #4
 800048c:	f7ff ff30 	bl	80002f0 <DS1307_SetRegData>
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <DS1307_GetMonth>:

uint8_t DS1307_GetMonth(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegData(DS1307_REG_MONTH));
 800049c:	2005      	movs	r0, #5
 800049e:	f7ff ff05 	bl	80002ac <DS1307_GetRegData>
 80004a2:	4603      	mov	r3, r0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 f855 	bl	8000554 <DS1307_DecodeBCD>
 80004aa:	4603      	mov	r3, r0
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <DS1307_SetMonth>:

void DS1307_SetMonth(uint8_t month)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegData(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f827 	bl	8000510 <DS1307_EncodeBCD>
 80004c2:	4603      	mov	r3, r0
 80004c4:	4619      	mov	r1, r3
 80004c6:	2005      	movs	r0, #5
 80004c8:	f7ff ff12 	bl	80002f0 <DS1307_SetRegData>
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <DS1307_GetYear>:

uint8_t DS1307_GetYear(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegData(DS1307_REG_YEAR));
 80004d8:	2006      	movs	r0, #6
 80004da:	f7ff fee7 	bl	80002ac <DS1307_GetRegData>
 80004de:	4603      	mov	r3, r0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f837 	bl	8000554 <DS1307_DecodeBCD>
 80004e6:	4603      	mov	r3, r0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	bd80      	pop	{r7, pc}

080004ec <DS1307_SetYear>:

void DS1307_SetYear(uint8_t year)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegData(DS1307_REG_YEAR, DS1307_EncodeBCD(year));
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f809 	bl	8000510 <DS1307_EncodeBCD>
 80004fe:	4603      	mov	r3, r0
 8000500:	4619      	mov	r1, r3
 8000502:	2006      	movs	r0, #6
 8000504:	f7ff fef4 	bl	80002f0 <DS1307_SetRegData>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <DS1307_EncodeBCD>:

uint8_t DS1307_EncodeBCD(uint8_t dec)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 800051a:	79fa      	ldrb	r2, [r7, #7]
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <DS1307_EncodeBCD+0x40>)
 800051e:	fba3 1302 	umull	r1, r3, r3, r2
 8000522:	08d9      	lsrs	r1, r3, #3
 8000524:	460b      	mov	r3, r1
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	440b      	add	r3, r1
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	b2da      	uxtb	r2, r3
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4907      	ldr	r1, [pc, #28]	; (8000550 <DS1307_EncodeBCD+0x40>)
 8000534:	fba1 1303 	umull	r1, r3, r1, r3
 8000538:	08db      	lsrs	r3, r3, #3
 800053a:	b2db      	uxtb	r3, r3
 800053c:	011b      	lsls	r3, r3, #4
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4413      	add	r3, r2
 8000542:	b2db      	uxtb	r3, r3
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	cccccccd 	.word	0xcccccccd

08000554 <DS1307_DecodeBCD>:

uint8_t DS1307_DecodeBCD(uint8_t bin)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xF0) >> 4) * 10) + (bin & 0x0F);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	091b      	lsrs	r3, r3, #4
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	0092      	lsls	r2, r2, #2
 8000568:	4413      	add	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	b2da      	uxtb	r2, r3
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	f003 030f 	and.w	r3, r3, #15
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4413      	add	r3, r2
 8000578:	b2db      	uxtb	r3, r3
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr

08000584 <DS1307_SetDateTime>:

void DS1307_SetDateTime(char time[])
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af04      	add	r7, sp, #16
 800058a:	6078      	str	r0, [r7, #4]
	int year, month, day, hour, minute, second;
	sscanf(time, "%2d%2d%2d%2d%2d%2d", &year, &month, &day, &hour, &minute, &second);
 800058c:	f107 0118 	add.w	r1, r7, #24
 8000590:	f107 021c 	add.w	r2, r7, #28
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	9303      	str	r3, [sp, #12]
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	9302      	str	r3, [sp, #8]
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	460b      	mov	r3, r1
 80005ae:	4913      	ldr	r1, [pc, #76]	; (80005fc <DS1307_SetDateTime+0x78>)
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f009 f93d 	bl	8009830 <siscanf>
	DS1307_SetYear(year);
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ff96 	bl	80004ec <DS1307_SetYear>
	DS1307_SetMonth(month);
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff73 	bl	80004b0 <DS1307_SetMonth>
	DS1307_SetDOM(day);
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ff50 	bl	8000474 <DS1307_SetDOM>
	DS1307_SetHour(hour);
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff2d 	bl	8000438 <DS1307_SetHour>
	DS1307_SetMinute(minute);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff0a 	bl	80003fc <DS1307_SetMinute>
	DS1307_SetSecond(second);
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fee7 	bl	80003c0 <DS1307_SetSecond>
}
 80005f2:	bf00      	nop
 80005f4:	3720      	adds	r7, #32
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	0800a990 	.word	0x0800a990

08000600 <DS1307_GetCurrentDateTimeCommand>:

char* DS1307_GetCurrentDateTimeCommand()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08c      	sub	sp, #48	; 0x30
 8000604:	af04      	add	r7, sp, #16
	int year, month, day, hour, minute, second;
	char* time = (char*)malloc(22 * sizeof(char));
 8000606:	2016      	movs	r0, #22
 8000608:	f009 f836 	bl	8009678 <malloc>
 800060c:	4603      	mov	r3, r0
 800060e:	61fb      	str	r3, [r7, #28]
	if (time == NULL) {
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <DS1307_GetCurrentDateTimeCommand+0x1a>
		return NULL;
 8000616:	2300      	movs	r3, #0
 8000618:	e026      	b.n	8000668 <DS1307_GetCurrentDateTimeCommand+0x68>
	}
	year = DS1307_GetYear();
 800061a:	f7ff ff5b 	bl	80004d4 <DS1307_GetYear>
 800061e:	4603      	mov	r3, r0
 8000620:	61bb      	str	r3, [r7, #24]
	month = DS1307_GetMonth();
 8000622:	f7ff ff39 	bl	8000498 <DS1307_GetMonth>
 8000626:	4603      	mov	r3, r0
 8000628:	617b      	str	r3, [r7, #20]
	day = DS1307_GetDOM();
 800062a:	f7ff ff17 	bl	800045c <DS1307_GetDOM>
 800062e:	4603      	mov	r3, r0
 8000630:	613b      	str	r3, [r7, #16]
	hour = DS1307_GetHour();
 8000632:	f7ff fef5 	bl	8000420 <DS1307_GetHour>
 8000636:	4603      	mov	r3, r0
 8000638:	60fb      	str	r3, [r7, #12]
	minute = DS1307_GetMinute();
 800063a:	f7ff fed3 	bl	80003e4 <DS1307_GetMinute>
 800063e:	4603      	mov	r3, r0
 8000640:	60bb      	str	r3, [r7, #8]
	second = DS1307_GetSecond();
 8000642:	f7ff feb1 	bl	80003a8 <DS1307_GetSecond>
 8000646:	4603      	mov	r3, r0
 8000648:	607b      	str	r3, [r7, #4]
	sprintf(time, "(TIME,2,%02d%02d%02d%02d%02d%02d)", year, month, day, hour, minute, second);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	9303      	str	r3, [sp, #12]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	9302      	str	r3, [sp, #8]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	69ba      	ldr	r2, [r7, #24]
 800065e:	4904      	ldr	r1, [pc, #16]	; (8000670 <DS1307_GetCurrentDateTimeCommand+0x70>)
 8000660:	69f8      	ldr	r0, [r7, #28]
 8000662:	f009 f8c5 	bl	80097f0 <siprintf>
	return time;
 8000666:	69fb      	ldr	r3, [r7, #28]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	0800a9a4 	.word	0x0800a9a4

08000674 <DS1307_GetCurrentDateTime>:

char* DS1307_GetCurrentDateTime()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	; 0x30
 8000678:	af04      	add	r7, sp, #16
	int year, month, day, hour, minute, second;
	char * time = (char*)malloc(13 * sizeof(char));
 800067a:	200d      	movs	r0, #13
 800067c:	f008 fffc 	bl	8009678 <malloc>
 8000680:	4603      	mov	r3, r0
 8000682:	61fb      	str	r3, [r7, #28]
	if (time == NULL) {
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <DS1307_GetCurrentDateTime+0x1a>
		return NULL;
 800068a:	2300      	movs	r3, #0
 800068c:	e02a      	b.n	80006e4 <DS1307_GetCurrentDateTime+0x70>
	}
	year = DS1307_GetYear();
 800068e:	f7ff ff21 	bl	80004d4 <DS1307_GetYear>
 8000692:	4603      	mov	r3, r0
 8000694:	61bb      	str	r3, [r7, #24]
	month = DS1307_GetMonth();
 8000696:	f7ff feff 	bl	8000498 <DS1307_GetMonth>
 800069a:	4603      	mov	r3, r0
 800069c:	617b      	str	r3, [r7, #20]
	day = DS1307_GetDOM();
 800069e:	f7ff fedd 	bl	800045c <DS1307_GetDOM>
 80006a2:	4603      	mov	r3, r0
 80006a4:	613b      	str	r3, [r7, #16]
	hour = DS1307_GetHour();
 80006a6:	f7ff febb 	bl	8000420 <DS1307_GetHour>
 80006aa:	4603      	mov	r3, r0
 80006ac:	60fb      	str	r3, [r7, #12]
	minute = DS1307_GetMinute();
 80006ae:	f7ff fe99 	bl	80003e4 <DS1307_GetMinute>
 80006b2:	4603      	mov	r3, r0
 80006b4:	60bb      	str	r3, [r7, #8]
	second = DS1307_GetSecond();
 80006b6:	f7ff fe77 	bl	80003a8 <DS1307_GetSecond>
 80006ba:	4603      	mov	r3, r0
 80006bc:	607b      	str	r3, [r7, #4]
	sprintf(time, "%02d%02d%02d%02d%02d%02d", year, month, day, hour, minute, second);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	9303      	str	r3, [sp, #12]
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	9302      	str	r3, [sp, #8]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	69ba      	ldr	r2, [r7, #24]
 80006d2:	4906      	ldr	r1, [pc, #24]	; (80006ec <DS1307_GetCurrentDateTime+0x78>)
 80006d4:	69f8      	ldr	r0, [r7, #28]
 80006d6:	f009 f88b 	bl	80097f0 <siprintf>
	time[13] = '\0';
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	330d      	adds	r3, #13
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
	return time;
 80006e2:	69fb      	ldr	r3, [r7, #28]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3720      	adds	r7, #32
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	0800a9c8 	.word	0x0800a9c8

080006f0 <DS1307_GetCurrentDateTimeForFile>:

char* DS1307_GetCurrentDateTimeForFile()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af02      	add	r7, sp, #8
	int day, hour, minute, second;
	char* time = (char*)malloc(9 * sizeof(char));
 80006f6:	2009      	movs	r0, #9
 80006f8:	f008 ffbe 	bl	8009678 <malloc>
 80006fc:	4603      	mov	r3, r0
 80006fe:	617b      	str	r3, [r7, #20]
	if (time == NULL) {
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d101      	bne.n	800070a <DS1307_GetCurrentDateTimeForFile+0x1a>
		return NULL;
 8000706:	2300      	movs	r3, #0
 8000708:	e01e      	b.n	8000748 <DS1307_GetCurrentDateTimeForFile+0x58>
	}
	day = DS1307_GetDOM();
 800070a:	f7ff fea7 	bl	800045c <DS1307_GetDOM>
 800070e:	4603      	mov	r3, r0
 8000710:	613b      	str	r3, [r7, #16]
	hour = DS1307_GetHour();
 8000712:	f7ff fe85 	bl	8000420 <DS1307_GetHour>
 8000716:	4603      	mov	r3, r0
 8000718:	60fb      	str	r3, [r7, #12]
	minute = DS1307_GetMinute();
 800071a:	f7ff fe63 	bl	80003e4 <DS1307_GetMinute>
 800071e:	4603      	mov	r3, r0
 8000720:	60bb      	str	r3, [r7, #8]
	second = DS1307_GetSecond();
 8000722:	f7ff fe41 	bl	80003a8 <DS1307_GetSecond>
 8000726:	4603      	mov	r3, r0
 8000728:	607b      	str	r3, [r7, #4]
	sprintf(time, "%02d%02d%02d%02d", day, hour, minute, second);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	4906      	ldr	r1, [pc, #24]	; (8000750 <DS1307_GetCurrentDateTimeForFile+0x60>)
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	f009 f859 	bl	80097f0 <siprintf>
	time[8] = '\0';
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	3308      	adds	r3, #8
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
	return time;
 8000746:	697b      	ldr	r3, [r7, #20]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	0800a9e4 	.word	0x0800a9e4

08000754 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000758:	f3bf 8f4f 	dsb	sy
}
 800075c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <__NVIC_SystemReset+0x24>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000766:	4904      	ldr	r1, [pc, #16]	; (8000778 <__NVIC_SystemReset+0x24>)
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_SystemReset+0x28>)
 800076a:	4313      	orrs	r3, r2
 800076c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800076e:	f3bf 8f4f 	dsb	sy
}
 8000772:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <__NVIC_SystemReset+0x20>
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	05fa0004 	.word	0x05fa0004

08000780 <getbufferLength>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int getbufferLength(char buffer[]) {
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
	while (buffer[i] != '\0') {
 800078c:	e002      	b.n	8000794 <getbufferLength+0x14>
		i++;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
	while (buffer[i] != '\0') {
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	687a      	ldr	r2, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1f6      	bne.n	800078e <getbufferLength+0xe>
	}
	return i;
 80007a0:	68fb      	ldr	r3, [r7, #12]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <startWritingInFile>:

void startWritingInFile() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
	MX_FATFS_Init();
 80007b2:	f005 fd87 	bl	80062c4 <MX_FATFS_Init>
	fresult = f_mount(&fs, "", 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	494b      	ldr	r1, [pc, #300]	; (80008e8 <startWritingInFile+0x13c>)
 80007ba:	484c      	ldr	r0, [pc, #304]	; (80008ec <startWritingInFile+0x140>)
 80007bc:	f008 f96e 	bl	8008a9c <f_mount>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <startWritingInFile+0x144>)
 80007c6:	701a      	strb	r2, [r3, #0]
	while (fresult != FR_OK) {
 80007c8:	e017      	b.n	80007fa <startWritingInFile+0x4e>
		HAL_Delay(50);
 80007ca:	2032      	movs	r0, #50	; 0x32
 80007cc:	f000 ffd8 	bl	8001780 <HAL_Delay>
		MX_FATFS_DeInit();
 80007d0:	f005 fd92 	bl	80062f8 <MX_FATFS_DeInit>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2120      	movs	r1, #32
 80007d8:	4846      	ldr	r0, [pc, #280]	; (80008f4 <startWritingInFile+0x148>)
 80007da:	f002 fac6 	bl	8002d6a <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80007de:	2032      	movs	r0, #50	; 0x32
 80007e0:	f000 ffce 	bl	8001780 <HAL_Delay>
		MX_FATFS_Init();
 80007e4:	f005 fd6e 	bl	80062c4 <MX_FATFS_Init>
		fresult = f_mount(&fs, "", 1);
 80007e8:	2201      	movs	r2, #1
 80007ea:	493f      	ldr	r1, [pc, #252]	; (80008e8 <startWritingInFile+0x13c>)
 80007ec:	483f      	ldr	r0, [pc, #252]	; (80008ec <startWritingInFile+0x140>)
 80007ee:	f008 f955 	bl	8008a9c <f_mount>
 80007f2:	4603      	mov	r3, r0
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b3e      	ldr	r3, [pc, #248]	; (80008f0 <startWritingInFile+0x144>)
 80007f8:	701a      	strb	r2, [r3, #0]
	while (fresult != FR_OK) {
 80007fa:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <startWritingInFile+0x144>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1e3      	bne.n	80007ca <startWritingInFile+0x1e>
	}
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	483b      	ldr	r0, [pc, #236]	; (80008f4 <startWritingInFile+0x148>)
 8000808:	f002 faaf 	bl	8002d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2110      	movs	r1, #16
 8000810:	4838      	ldr	r0, [pc, #224]	; (80008f4 <startWritingInFile+0x148>)
 8000812:	f002 faaa 	bl	8002d6a <HAL_GPIO_WritePin>
	char* file_datetime = DS1307_GetCurrentDateTimeForFile(); // datetime for filename
 8000816:	f7ff ff6b 	bl	80006f0 <DS1307_GetCurrentDateTimeForFile>
 800081a:	60f8      	str	r0, [r7, #12]
	if (file_datetime == NULL) {
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d109      	bne.n	8000836 <startWritingInFile+0x8a>
		fresult = f_open(&fil, "data.dat", FA_CREATE_ALWAYS | FA_WRITE);
 8000822:	220a      	movs	r2, #10
 8000824:	4934      	ldr	r1, [pc, #208]	; (80008f8 <startWritingInFile+0x14c>)
 8000826:	4835      	ldr	r0, [pc, #212]	; (80008fc <startWritingInFile+0x150>)
 8000828:	f008 f980 	bl	8008b2c <f_open>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <startWritingInFile+0x144>)
 8000832:	701a      	strb	r2, [r3, #0]
 8000834:	e040      	b.n	80008b8 <startWritingInFile+0x10c>
	} else {
		char* filename = (char*)malloc(8 * sizeof(char));
 8000836:	2008      	movs	r0, #8
 8000838:	f008 ff1e 	bl	8009678 <malloc>
 800083c:	4603      	mov	r3, r0
 800083e:	60bb      	str	r3, [r7, #8]
		sprintf(filename, "%s.dat", file_datetime);
 8000840:	68fa      	ldr	r2, [r7, #12]
 8000842:	492f      	ldr	r1, [pc, #188]	; (8000900 <startWritingInFile+0x154>)
 8000844:	68b8      	ldr	r0, [r7, #8]
 8000846:	f008 ffd3 	bl	80097f0 <siprintf>
//		filename[16] = '\0';
		fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 800084a:	220a      	movs	r2, #10
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	482b      	ldr	r0, [pc, #172]	; (80008fc <startWritingInFile+0x150>)
 8000850:	f008 f96c 	bl	8008b2c <f_open>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <startWritingInFile+0x144>)
 800085a:	701a      	strb	r2, [r3, #0]
		char* datetime_label = DS1307_GetCurrentDateTime(); // datetime для метки внутри файла
 800085c:	f7ff ff0a 	bl	8000674 <DS1307_GetCurrentDateTime>
 8000860:	6078      	str	r0, [r7, #4]
		if (datetime_label != NULL) {
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d017      	beq.n	8000898 <startWritingInFile+0xec>
			char* label = (char*)malloc(13 * sizeof(char));
 8000868:	200d      	movs	r0, #13
 800086a:	f008 ff05 	bl	8009678 <malloc>
 800086e:	4603      	mov	r3, r0
 8000870:	603b      	str	r3, [r7, #0]
			sprintf(label, "%s\n", datetime_label);
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4923      	ldr	r1, [pc, #140]	; (8000904 <startWritingInFile+0x158>)
 8000876:	6838      	ldr	r0, [r7, #0]
 8000878:	f008 ffba 	bl	80097f0 <siprintf>
			fresult = f_write(&fil, label, 13, &bw);
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <startWritingInFile+0x15c>)
 800087e:	220d      	movs	r2, #13
 8000880:	6839      	ldr	r1, [r7, #0]
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <startWritingInFile+0x150>)
 8000884:	f008 fbcb 	bl	800901e <f_write>
 8000888:	4603      	mov	r3, r0
 800088a:	461a      	mov	r2, r3
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <startWritingInFile+0x144>)
 800088e:	701a      	strb	r2, [r3, #0]
			free(label);
 8000890:	6838      	ldr	r0, [r7, #0]
 8000892:	f008 fef9 	bl	8009688 <free>
 8000896:	e009      	b.n	80008ac <startWritingInFile+0x100>
		} else {
			fresult = f_write(&fil, "UNDEFINED\n", 10, &bw);
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <startWritingInFile+0x15c>)
 800089a:	220a      	movs	r2, #10
 800089c:	491b      	ldr	r1, [pc, #108]	; (800090c <startWritingInFile+0x160>)
 800089e:	4817      	ldr	r0, [pc, #92]	; (80008fc <startWritingInFile+0x150>)
 80008a0:	f008 fbbd 	bl	800901e <f_write>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <startWritingInFile+0x144>)
 80008aa:	701a      	strb	r2, [r3, #0]
		}
		free(datetime_label);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f008 feeb 	bl	8009688 <free>
		free(filename);
 80008b2:	68b8      	ldr	r0, [r7, #8]
 80008b4:	f008 fee8 	bl	8009688 <free>
	}
	free(file_datetime);
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f008 fee5 	bl	8009688 <free>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, ADC_BUFFER_SIZE);
 80008be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c2:	4913      	ldr	r1, [pc, #76]	; (8000910 <startWritingInFile+0x164>)
 80008c4:	4813      	ldr	r0, [pc, #76]	; (8000914 <startWritingInFile+0x168>)
 80008c6:	f001 f857 	bl	8001978 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 80008ca:	210c      	movs	r1, #12
 80008cc:	4812      	ldr	r0, [pc, #72]	; (8000918 <startWritingInFile+0x16c>)
 80008ce:	f004 fb6f 	bl	8004fb0 <HAL_TIM_OC_Start>
#if FREQ_TEST == 1
	start_time = HAL_GetTick();
 80008d2:	f000 ff4b 	bl	800176c <HAL_GetTick>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <startWritingInFile+0x170>)
 80008dc:	601a      	str	r2, [r3, #0]
#endif
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	0800a9f8 	.word	0x0800a9f8
 80008ec:	20000a44 	.word	0x20000a44
 80008f0:	20000ea0 	.word	0x20000ea0
 80008f4:	40010c00 	.word	0x40010c00
 80008f8:	0800a9fc 	.word	0x0800a9fc
 80008fc:	20000c74 	.word	0x20000c74
 8000900:	0800aa08 	.word	0x0800aa08
 8000904:	0800aa10 	.word	0x0800aa10
 8000908:	20000ea4 	.word	0x20000ea4
 800090c:	0800aa14 	.word	0x0800aa14
 8000910:	20000244 	.word	0x20000244
 8000914:	20000094 	.word	0x20000094
 8000918:	200001b4 	.word	0x200001b4
 800091c:	200012d0 	.word	0x200012d0

08000920 <stopWritingInFile>:

void stopWritingInFile() {
 8000920:	b580      	push	{r7, lr}
 8000922:	b09a      	sub	sp, #104	; 0x68
 8000924:	af00      	add	r7, sp, #0
#if FREQ_TEST == 1
	int writing_time = HAL_GetTick() - start_time;
 8000926:	f000 ff21 	bl	800176c <HAL_GetTick>
 800092a:	4603      	mov	r3, r0
 800092c:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <stopWritingInFile+0x90>)
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	1a9b      	subs	r3, r3, r2
 8000932:	667b      	str	r3, [r7, #100]	; 0x64
	char info[100];
	sprintf(info, "\nWriting Time: %d\nCount of elements: %d\n", writing_time, size_control);
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <stopWritingInFile+0x94>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4638      	mov	r0, r7
 800093a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800093c:	491e      	ldr	r1, [pc, #120]	; (80009b8 <stopWritingInFile+0x98>)
 800093e:	f008 ff57 	bl	80097f0 <siprintf>
	fresult = f_write(&fil, info, getbufferLength(info), &bw);
 8000942:	463b      	mov	r3, r7
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff1b 	bl	8000780 <getbufferLength>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	4639      	mov	r1, r7
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <stopWritingInFile+0x9c>)
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <stopWritingInFile+0xa0>)
 8000954:	f008 fb63 	bl	800901e <f_write>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <stopWritingInFile+0xa4>)
 800095e:	701a      	strb	r2, [r3, #0]
#endif

	is_started = 0;
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <stopWritingInFile+0xa8>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
	size_control = 0;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <stopWritingInFile+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 800096c:	4817      	ldr	r0, [pc, #92]	; (80009cc <stopWritingInFile+0xac>)
 800096e:	f001 f8e1 	bl	8001b34 <HAL_ADC_Stop_DMA>
	HAL_TIM_OC_Stop(&htim4, TIM_CHANNEL_4);
 8000972:	210c      	movs	r1, #12
 8000974:	4816      	ldr	r0, [pc, #88]	; (80009d0 <stopWritingInFile+0xb0>)
 8000976:	f004 fbbd 	bl	80050f4 <HAL_TIM_OC_Stop>
	fresult = f_close(&fil);
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <stopWritingInFile+0xa0>)
 800097c:	f008 fdb6 	bl	80094ec <f_close>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <stopWritingInFile+0xa4>)
 8000986:	701a      	strb	r2, [r3, #0]
	fresult = f_mount(0, "", 0);
 8000988:	2200      	movs	r2, #0
 800098a:	4912      	ldr	r1, [pc, #72]	; (80009d4 <stopWritingInFile+0xb4>)
 800098c:	2000      	movs	r0, #0
 800098e:	f008 f885 	bl	8008a9c <f_mount>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <stopWritingInFile+0xa4>)
 8000998:	701a      	strb	r2, [r3, #0]
	MX_FATFS_DeInit();
 800099a:	f005 fcad 	bl	80062f8 <MX_FATFS_DeInit>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2110      	movs	r1, #16
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <stopWritingInFile+0xb8>)
 80009a4:	f002 f9e1 	bl	8002d6a <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3768      	adds	r7, #104	; 0x68
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200012d0 	.word	0x200012d0
 80009b4:	200012a8 	.word	0x200012a8
 80009b8:	0800aa20 	.word	0x0800aa20
 80009bc:	20000ea4 	.word	0x20000ea4
 80009c0:	20000c74 	.word	0x20000c74
 80009c4:	20000ea0 	.word	0x20000ea0
 80009c8:	200012ac 	.word	0x200012ac
 80009cc:	20000094 	.word	0x20000094
 80009d0:	200001b4 	.word	0x200001b4
 80009d4:	0800a9f8 	.word	0x0800a9f8
 80009d8:	40010c00 	.word	0x40010c00

080009dc <writeDataFromADCToFile>:
	}

}

void writeDataFromADCToFile(int offset, int adc_buffer_size)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	if ((HAL_GetTick() - start_time) <= 3000) {
 80009e6:	f000 fec1 	bl	800176c <HAL_GetTick>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <writeDataFromADCToFile+0x74>)
 80009ee:	6812      	ldr	r2, [r2, #0]
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d823      	bhi.n	8000a42 <writeDataFromADCToFile+0x66>
	memset(buffer, 0, BUFFER_SIZE);
 80009fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fe:	2100      	movs	r1, #0
 8000a00:	4814      	ldr	r0, [pc, #80]	; (8000a54 <writeDataFromADCToFile+0x78>)
 8000a02:	f008 ff41 	bl	8009888 <memset>
	memcpy(buffer, adcBuffer + offset, BUFFER_SIZE);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <writeDataFromADCToFile+0x7c>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <writeDataFromADCToFile+0x78>)
 8000a10:	4610      	mov	r0, r2
 8000a12:	4619      	mov	r1, r3
 8000a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a18:	461a      	mov	r2, r3
 8000a1a:	f008 ff79 	bl	8009910 <memcpy>
	fresult = f_write(&fil, buffer, BUFFER_SIZE, &bw);
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <writeDataFromADCToFile+0x80>)
 8000a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a24:	490b      	ldr	r1, [pc, #44]	; (8000a54 <writeDataFromADCToFile+0x78>)
 8000a26:	480e      	ldr	r0, [pc, #56]	; (8000a60 <writeDataFromADCToFile+0x84>)
 8000a28:	f008 faf9 	bl	800901e <f_write>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <writeDataFromADCToFile+0x88>)
 8000a32:	701a      	strb	r2, [r3, #0]
	size_control += adc_buffer_size; // optional
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <writeDataFromADCToFile+0x8c>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <writeDataFromADCToFile+0x8c>)
 8000a3e:	6013      	str	r3, [r2, #0]
	} else {
		stopWritingInFile();
	}
}
 8000a40:	e001      	b.n	8000a46 <writeDataFromADCToFile+0x6a>
		stopWritingInFile();
 8000a42:	f7ff ff6d 	bl	8000920 <stopWritingInFile>
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200012d0 	.word	0x200012d0
 8000a54:	20000ea8 	.word	0x20000ea8
 8000a58:	20000244 	.word	0x20000244
 8000a5c:	20000ea4 	.word	0x20000ea4
 8000a60:	20000c74 	.word	0x20000c74
 8000a64:	20000ea0 	.word	0x20000ea0
 8000a68:	200012a8 	.word	0x200012a8

08000a6c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (is_started)) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d108      	bne.n	8000a90 <HAL_ADC_ConvHalfCpltCallback+0x24>
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d004      	beq.n	8000a90 <HAL_ADC_ConvHalfCpltCallback+0x24>
		writeDataFromADCToFile(0, ADC_BUFFER_SIZE / 2);
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff ffa6 	bl	80009dc <writeDataFromADCToFile>
	}
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40012400 	.word	0x40012400
 8000a9c:	200012ac 	.word	0x200012ac

08000aa0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (is_started))
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d109      	bne.n	8000ac6 <HAL_ADC_ConvCpltCallback+0x26>
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_ADC_ConvCpltCallback+0x34>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d005      	beq.n	8000ac6 <HAL_ADC_ConvCpltCallback+0x26>
	{
		writeDataFromADCToFile(ADC_BUFFER_SIZE / 2, ADC_BUFFER_SIZE / 2);
 8000aba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ac2:	f7ff ff8b 	bl	80009dc <writeDataFromADCToFile>
	}
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40012400 	.word	0x40012400
 8000ad4:	200012ac 	.word	0x200012ac

08000ad8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_STOP_Pin) {
 8000ae2:	88fb      	ldrh	r3, [r7, #6]
 8000ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae8:	d13d      	bne.n	8000b66 <HAL_GPIO_EXTI_Callback+0x8e>
		if (HAL_GPIO_ReadPin(BTN_STOP_GPIO_Port, BTN_STOP_Pin) == GPIO_PIN_RESET)
 8000aea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aee:	4820      	ldr	r0, [pc, #128]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x98>)
 8000af0:	f002 f924 	bl	8002d3c <HAL_GPIO_ReadPin>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d106      	bne.n	8000b08 <HAL_GPIO_EXTI_Callback+0x30>
			delay_time = HAL_GetTick();
 8000afa:	f000 fe37 	bl	800176c <HAL_GetTick>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b04:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
				NVIC_SystemReset();
			}
		}
	}
}
 8000b06:	e02e      	b.n	8000b66 <HAL_GPIO_EXTI_Callback+0x8e>
		else  if (HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_STOP_Pin) == GPIO_PIN_SET){
 8000b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0c:	4818      	ldr	r0, [pc, #96]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x98>)
 8000b0e:	f002 f915 	bl	8002d3c <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d126      	bne.n	8000b66 <HAL_GPIO_EXTI_Callback+0x8e>
			if (((HAL_GetTick() - delay_time) >= 20) && ((HAL_GetTick() - delay_time) <= 1000) && is_started) {
 8000b18:	f000 fe28 	bl	800176c <HAL_GetTick>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b20:	6812      	ldr	r2, [r2, #0]
 8000b22:	1a9b      	subs	r3, r3, r2
 8000b24:	2b13      	cmp	r3, #19
 8000b26:	d90f      	bls.n	8000b48 <HAL_GPIO_EXTI_Callback+0x70>
 8000b28:	f000 fe20 	bl	800176c <HAL_GetTick>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b30:	6812      	ldr	r2, [r2, #0]
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b38:	d806      	bhi.n	8000b48 <HAL_GPIO_EXTI_Callback+0x70>
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <HAL_GPIO_EXTI_Callback+0x70>
				stopWritingInFile();
 8000b42:	f7ff feed 	bl	8000920 <stopWritingInFile>
}
 8000b46:	e00e      	b.n	8000b66 <HAL_GPIO_EXTI_Callback+0x8e>
			else if ((HAL_GetTick() - delay_time) > 1000) {
 8000b48:	f000 fe10 	bl	800176c <HAL_GetTick>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b58:	d905      	bls.n	8000b66 <HAL_GPIO_EXTI_Callback+0x8e>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b5e:	f002 f91c 	bl	8002d9a <HAL_GPIO_TogglePin>
				NVIC_SystemReset();
 8000b62:	f7ff fdf7 	bl	8000754 <__NVIC_SystemReset>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40011000 	.word	0x40011000
 8000b74:	200012b0 	.word	0x200012b0
 8000b78:	200012ac 	.word	0x200012ac
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	if (is_started) {
 8000b88:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <HAL_UART_RxCpltCallback+0x104>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d005      	beq.n	8000b9c <HAL_UART_RxCpltCallback+0x1c>
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)"(DLIS,0,000000000000)", COMMAND_SIZE);
 8000b90:	2215      	movs	r2, #21
 8000b92:	493d      	ldr	r1, [pc, #244]	; (8000c88 <HAL_UART_RxCpltCallback+0x108>)
 8000b94:	483d      	ldr	r0, [pc, #244]	; (8000c8c <HAL_UART_RxCpltCallback+0x10c>)
 8000b96:	f004 fe29 	bl	80057ec <HAL_UART_Transmit_IT>
 8000b9a:	e065      	b.n	8000c68 <HAL_UART_RxCpltCallback+0xe8>
	}
	else {
		Vibric_CommandTypeDef command;
		command = Vibric_ParseCommand((char*)receive_uart_buffer);
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	493b      	ldr	r1, [pc, #236]	; (8000c90 <HAL_UART_RxCpltCallback+0x110>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fb44 	bl	8000230 <Vibric_ParseCommand>
		if (strcmp(command.name, "SAMP") == 0) {
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	493a      	ldr	r1, [pc, #232]	; (8000c94 <HAL_UART_RxCpltCallback+0x114>)
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff facd 	bl	800014c <strcmp>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d11d      	bne.n	8000bf4 <HAL_UART_RxCpltCallback+0x74>
			switch (command.code) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d053      	beq.n	8000c66 <HAL_UART_RxCpltCallback+0xe6>
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d152      	bne.n	8000c68 <HAL_UART_RxCpltCallback+0xe8>
			case 0: {
				break;
			}
			case 1: {
				int freq = Vibric_ConvertCommandDataToInt(command.data);
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fb21 	bl	800020c <Vibric_ConvertCommandDataToInt>
 8000bca:	61b8      	str	r0, [r7, #24]
				int counter = (SYS_FREQ / (freq * TIM4_PRESCALER)) - 1;
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <HAL_UART_RxCpltCallback+0x118>)
 8000bda:	fb93 f3f2 	sdiv	r3, r3, r2
 8000bde:	3b01      	subs	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
//				TIM4->CCR4 = counter;
				TIM4->ARR = counter;
 8000be2:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <HAL_UART_RxCpltCallback+0x11c>)
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	62d3      	str	r3, [r2, #44]	; 0x2c
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"(SAMP,1,000000000000)", 21);
 8000be8:	2215      	movs	r2, #21
 8000bea:	492d      	ldr	r1, [pc, #180]	; (8000ca0 <HAL_UART_RxCpltCallback+0x120>)
 8000bec:	4827      	ldr	r0, [pc, #156]	; (8000c8c <HAL_UART_RxCpltCallback+0x10c>)
 8000bee:	f004 fdfd 	bl	80057ec <HAL_UART_Transmit_IT>
 8000bf2:	e039      	b.n	8000c68 <HAL_UART_RxCpltCallback+0xe8>
			}
			}
		}
		else if (strcmp(command.name, "TIME") == 0) {
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	492b      	ldr	r1, [pc, #172]	; (8000ca4 <HAL_UART_RxCpltCallback+0x124>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff faa7 	bl	800014c <strcmp>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d131      	bne.n	8000c68 <HAL_UART_RxCpltCallback+0xe8>
			switch (command.code) {
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b05      	cmp	r3, #5
 8000c08:	d82e      	bhi.n	8000c68 <HAL_UART_RxCpltCallback+0xe8>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <HAL_UART_RxCpltCallback+0x90>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c29 	.word	0x08000c29
 8000c14:	08000c53 	.word	0x08000c53
 8000c18:	08000c69 	.word	0x08000c69
 8000c1c:	08000c69 	.word	0x08000c69
 8000c20:	08000c69 	.word	0x08000c69
 8000c24:	08000c69 	.word	0x08000c69
			case 0:
				char* time = DS1307_GetCurrentDateTimeCommand();
 8000c28:	f7ff fcea 	bl	8000600 <DS1307_GetCurrentDateTimeCommand>
 8000c2c:	61f8      	str	r0, [r7, #28]
				if (time == NULL) {
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d105      	bne.n	8000c40 <HAL_UART_RxCpltCallback+0xc0>
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)"(TIME,2,111111111111)", 21);
 8000c34:	2215      	movs	r2, #21
 8000c36:	491c      	ldr	r1, [pc, #112]	; (8000ca8 <HAL_UART_RxCpltCallback+0x128>)
 8000c38:	4814      	ldr	r0, [pc, #80]	; (8000c8c <HAL_UART_RxCpltCallback+0x10c>)
 8000c3a:	f004 fdd7 	bl	80057ec <HAL_UART_Transmit_IT>
 8000c3e:	e004      	b.n	8000c4a <HAL_UART_RxCpltCallback+0xca>
				}
				else
					HAL_UART_Transmit_IT(&huart2, (uint8_t*)time, 21);
 8000c40:	2215      	movs	r2, #21
 8000c42:	69f9      	ldr	r1, [r7, #28]
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <HAL_UART_RxCpltCallback+0x10c>)
 8000c46:	f004 fdd1 	bl	80057ec <HAL_UART_Transmit_IT>
				free(time);
 8000c4a:	69f8      	ldr	r0, [r7, #28]
 8000c4c:	f008 fd1c 	bl	8009688 <free>
				break;
 8000c50:	e00a      	b.n	8000c68 <HAL_UART_RxCpltCallback+0xe8>
			case 1: {
				DS1307_SetDateTime(command.data);
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fc95 	bl	8000584 <DS1307_SetDateTime>
				HAL_UART_Transmit_IT(&huart2, (uint8_t*)"(TIME,3,000000000000)", 21);
 8000c5a:	2215      	movs	r2, #21
 8000c5c:	4913      	ldr	r1, [pc, #76]	; (8000cac <HAL_UART_RxCpltCallback+0x12c>)
 8000c5e:	480b      	ldr	r0, [pc, #44]	; (8000c8c <HAL_UART_RxCpltCallback+0x10c>)
 8000c60:	f004 fdc4 	bl	80057ec <HAL_UART_Transmit_IT>
				break;
 8000c64:	e000      	b.n	8000c68 <HAL_UART_RxCpltCallback+0xe8>
				break;
 8000c66:	bf00      	nop
				break;
			}
			}
		}
	}
	memset(receive_uart_buffer, 0, sizeof(receive_uart_buffer));
 8000c68:	2219      	movs	r2, #25
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <HAL_UART_RxCpltCallback+0x110>)
 8000c6e:	f008 fe0b 	bl	8009888 <memset>
	HAL_UART_Receive_IT(&huart2, receive_uart_buffer, 21);
 8000c72:	2215      	movs	r2, #21
 8000c74:	4906      	ldr	r1, [pc, #24]	; (8000c90 <HAL_UART_RxCpltCallback+0x110>)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <HAL_UART_RxCpltCallback+0x10c>)
 8000c78:	f004 fded 	bl	8005856 <HAL_UART_Receive_IT>
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200012ac 	.word	0x200012ac
 8000c88:	0800aa4c 	.word	0x0800aa4c
 8000c8c:	200001fc 	.word	0x200001fc
 8000c90:	200012b4 	.word	0x200012b4
 8000c94:	0800aa64 	.word	0x0800aa64
 8000c98:	01e84800 	.word	0x01e84800
 8000c9c:	40000800 	.word	0x40000800
 8000ca0:	0800aa6c 	.word	0x0800aa6c
 8000ca4:	0800aa84 	.word	0x0800aa84
 8000ca8:	0800aa8c 	.word	0x0800aa8c
 8000cac:	0800aaa4 	.word	0x0800aaa4

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fd01 	bl	80016bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f88f 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f000 fa25 	bl	800110c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc2:	f000 fa05 	bl	80010d0 <MX_DMA_Init>
  MX_FATFS_Init();
 8000cc6:	f005 fafd 	bl	80062c4 <MX_FATFS_Init>
  MX_ADC1_Init();
 8000cca:	f000 f8df 	bl	8000e8c <MX_ADC1_Init>
  MX_TIM4_Init();
 8000cce:	f000 f97f 	bl	8000fd0 <MX_TIM4_Init>
  MX_SPI2_Init();
 8000cd2:	f000 f947 	bl	8000f64 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000cd6:	f000 f917 	bl	8000f08 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000cda:	f000 f9cf 	bl	800107c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  is_started = 0;
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <main+0x100>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
  is_stoped = 0;
 8000ce4:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <main+0x104>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]

  // RTC Initialization
  DS1307_Init(&hi2c2);
 8000cea:	4833      	ldr	r0, [pc, #204]	; (8000db8 <main+0x108>)
 8000cec:	f7ff fac8 	bl	8000280 <DS1307_Init>
  DS1307_SetRate(DS1307_32768Hz);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f7ff fb3c 	bl	800036e <DS1307_SetRate>

  // UART Rx Initialization
  memset(receive_uart_buffer, 0, 25);
 8000cf6:	2219      	movs	r2, #25
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4830      	ldr	r0, [pc, #192]	; (8000dbc <main+0x10c>)
 8000cfc:	f008 fdc4 	bl	8009888 <memset>
  HAL_UART_Receive_IT(&huart2, receive_uart_buffer, 21);
 8000d00:	2215      	movs	r2, #21
 8000d02:	492e      	ldr	r1, [pc, #184]	; (8000dbc <main+0x10c>)
 8000d04:	482e      	ldr	r0, [pc, #184]	; (8000dc0 <main+0x110>)
 8000d06:	f004 fda6 	bl	8005856 <HAL_UART_Receive_IT>

  // Test init of FatFS
  MX_FATFS_Init();
 8000d0a:	f005 fadb 	bl	80062c4 <MX_FATFS_Init>
  fresult = f_mount(&fs, "", 1);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	492c      	ldr	r1, [pc, #176]	; (8000dc4 <main+0x114>)
 8000d12:	482d      	ldr	r0, [pc, #180]	; (8000dc8 <main+0x118>)
 8000d14:	f007 fec2 	bl	8008a9c <f_mount>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <main+0x11c>)
 8000d1e:	701a      	strb	r2, [r3, #0]
  while (fresult != FR_OK) {
 8000d20:	e00b      	b.n	8000d3a <main+0x8a>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000d22:	2120      	movs	r1, #32
 8000d24:	482a      	ldr	r0, [pc, #168]	; (8000dd0 <main+0x120>)
 8000d26:	f002 f838 	bl	8002d9a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000d2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2e:	f000 fd27 	bl	8001780 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000d32:	2120      	movs	r1, #32
 8000d34:	4826      	ldr	r0, [pc, #152]	; (8000dd0 <main+0x120>)
 8000d36:	f002 f830 	bl	8002d9a <HAL_GPIO_TogglePin>
  while (fresult != FR_OK) {
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <main+0x11c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1ef      	bne.n	8000d22 <main+0x72>
  }
  fresult = f_mount(0, "", 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	491f      	ldr	r1, [pc, #124]	; (8000dc4 <main+0x114>)
 8000d46:	2000      	movs	r0, #0
 8000d48:	f007 fea8 	bl	8008a9c <f_mount>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <main+0x11c>)
 8000d52:	701a      	strb	r2, [r3, #0]
  MX_FATFS_DeInit();
 8000d54:	f005 fad0 	bl	80062f8 <MX_FATFS_DeInit>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000d58:	481e      	ldr	r0, [pc, #120]	; (8000dd4 <main+0x124>)
 8000d5a:	f001 fa03 	bl	8002164 <HAL_ADCEx_Calibration_Start>
  for (int i = 0; i < 10; i++) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	e010      	b.n	8000d86 <main+0xd6>
	  HAL_Delay(100);
 8000d64:	2064      	movs	r0, #100	; 0x64
 8000d66:	f000 fd0b 	bl	8001780 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <main+0x120>)
 8000d6e:	f002 f814 	bl	8002d9a <HAL_GPIO_TogglePin>
  	  HAL_Delay(100);
 8000d72:	2064      	movs	r0, #100	; 0x64
 8000d74:	f000 fd04 	bl	8001780 <HAL_Delay>
  	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000d78:	2110      	movs	r1, #16
 8000d7a:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <main+0x120>)
 8000d7c:	f002 f80d 	bl	8002d9a <HAL_GPIO_TogglePin>
  for (int i = 0; i < 10; i++) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3301      	adds	r3, #1
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b09      	cmp	r3, #9
 8000d8a:	ddeb      	ble.n	8000d64 <main+0xb4>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ((HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET) && !is_started) {
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4812      	ldr	r0, [pc, #72]	; (8000dd8 <main+0x128>)
 8000d90:	f001 ffd4 	bl	8002d3c <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f8      	bne.n	8000d8c <main+0xdc>
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <main+0x100>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f4      	bne.n	8000d8c <main+0xdc>
		  is_started = 1;
 8000da2:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <main+0x100>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
		  startWritingInFile();
 8000da8:	f7ff fd00 	bl	80007ac <startWritingInFile>
	  if ((HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET) && !is_started) {
 8000dac:	e7ee      	b.n	8000d8c <main+0xdc>
 8000dae:	bf00      	nop
 8000db0:	200012ac 	.word	0x200012ac
 8000db4:	200012ad 	.word	0x200012ad
 8000db8:	20000108 	.word	0x20000108
 8000dbc:	200012b4 	.word	0x200012b4
 8000dc0:	200001fc 	.word	0x200001fc
 8000dc4:	0800a9f8 	.word	0x0800a9f8
 8000dc8:	20000a44 	.word	0x20000a44
 8000dcc:	20000ea0 	.word	0x20000ea0
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	20000094 	.word	0x20000094
 8000dd8:	40011000 	.word	0x40011000

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de6:	2228      	movs	r2, #40	; 0x28
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f008 fd4c 	bl	8009888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e10:	2301      	movs	r3, #1
 8000e12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e14:	2310      	movs	r3, #16
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e20:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 f81a 	bl	8003e64 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e36:	f000 f9e5 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2102      	movs	r1, #2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 fa86 	bl	8004368 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000e62:	f000 f9cf 	bl	8001204 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e66:	2302      	movs	r3, #2
 8000e68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fc06 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e7e:	f000 f9c1 	bl	8001204 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3750      	adds	r7, #80	; 0x50
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <MX_ADC1_Init+0x78>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000eb6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000eba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000eca:	f000 fc7d 	bl	80017c8 <HAL_ADC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ed4:	f000 f996 	bl	8001204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_ADC1_Init+0x74>)
 8000eea:	f000 ff41 	bl	8001d70 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ef4:	f000 f986 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000094 	.word	0x20000094
 8000f04:	40012400 	.word	0x40012400

08000f08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C2_Init+0x50>)
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <MX_I2C2_Init+0x54>)
 8000f10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C2_Init+0x50>)
 8000f14:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <MX_I2C2_Init+0x58>)
 8000f16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C2_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_I2C2_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_I2C2_Init+0x50>)
 8000f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MX_I2C2_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_I2C2_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MX_I2C2_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <MX_I2C2_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <MX_I2C2_Init+0x50>)
 8000f46:	f001 ff59 	bl	8002dfc <HAL_I2C_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f50:	f000 f958 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000108 	.word	0x20000108
 8000f5c:	40005800 	.word	0x40005800
 8000f60:	000186a0 	.word	0x000186a0

08000f64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <MX_SPI2_Init+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f98:	2230      	movs	r2, #48	; 0x30
 8000f9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000fb0:	220a      	movs	r2, #10
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_SPI2_Init+0x64>)
 8000fb6:	f003 fcd1 	bl	800495c <HAL_SPI_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fc0:	f000 f920 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000015c 	.word	0x2000015c
 8000fcc:	40003800 	.word	0x40003800

08000fd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <MX_TIM4_Init+0xa4>)
 8000ff4:	4a20      	ldr	r2, [pc, #128]	; (8001078 <MX_TIM4_Init+0xa8>)
 8000ff6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_TIM4_Init+0xa4>)
 8000ffa:	224f      	movs	r2, #79	; 0x4f
 8000ffc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_TIM4_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <MX_TIM4_Init+0xa4>)
 8001006:	f240 128f 	movw	r2, #399	; 0x18f
 800100a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <MX_TIM4_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <MX_TIM4_Init+0xa4>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001018:	4816      	ldr	r0, [pc, #88]	; (8001074 <MX_TIM4_Init+0xa4>)
 800101a:	f003 ff79 	bl	8004f10 <HAL_TIM_OC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001024:	f000 f8ee 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4619      	mov	r1, r3
 8001036:	480f      	ldr	r0, [pc, #60]	; (8001074 <MX_TIM4_Init+0xa4>)
 8001038:	f004 fb2a 	bl	8005690 <HAL_TIMEx_MasterConfigSynchronization>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001042:	f000 f8df 	bl	8001204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001046:	2330      	movs	r3, #48	; 0x30
 8001048:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	220c      	movs	r2, #12
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_TIM4_Init+0xa4>)
 800105e:	f004 f8ad 	bl	80051bc <HAL_TIM_OC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001068:	f000 f8cc 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200001b4 	.word	0x200001b4
 8001078:	40000800 	.word	0x40000800

0800107c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	; (80010cc <MX_USART2_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_USART2_UART_Init+0x4c>)
 80010b4:	f004 fb4a 	bl	800574c <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f000 f8a1 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001fc 	.word	0x200001fc
 80010cc:	40004400 	.word	0x40004400

080010d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_DMA_Init+0x38>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <MX_DMA_Init+0x38>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6153      	str	r3, [r2, #20]
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_DMA_Init+0x38>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	200b      	movs	r0, #11
 80010f4:	f001 f9c5 	bl	8002482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010f8:	200b      	movs	r0, #11
 80010fa:	f001 f9de 	bl	80024ba <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001120:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <MX_GPIO_Init+0xe8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a33      	ldr	r2, [pc, #204]	; (80011f4 <MX_GPIO_Init+0xe8>)
 8001126:	f043 0310 	orr.w	r3, r3, #16
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <MX_GPIO_Init+0xe8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <MX_GPIO_Init+0xe8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <MX_GPIO_Init+0xe8>)
 800113e:	f043 0320 	orr.w	r3, r3, #32
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <MX_GPIO_Init+0xe8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0320 	and.w	r3, r3, #32
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001150:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <MX_GPIO_Init+0xe8>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <MX_GPIO_Init+0xe8>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_GPIO_Init+0xe8>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_GPIO_Init+0xe8>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <MX_GPIO_Init+0xe8>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_GPIO_Init+0xe8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f241 0130 	movw	r1, #4144	; 0x1030
 8001186:	481c      	ldr	r0, [pc, #112]	; (80011f8 <MX_GPIO_Init+0xec>)
 8001188:	f001 fdef 	bl	8002d6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_STOP_Pin */
  GPIO_InitStruct.Pin = BTN_STOP_Pin;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_GPIO_Init+0xf0>)
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001196:	2301      	movs	r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_STOP_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	4817      	ldr	r0, [pc, #92]	; (8001200 <MX_GPIO_Init+0xf4>)
 80011a2:	f001 fc47 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_START_Pin */
  GPIO_InitStruct.Pin = BTN_START_Pin;
 80011a6:	2304      	movs	r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_START_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	4811      	ldr	r0, [pc, #68]	; (8001200 <MX_GPIO_Init+0xf4>)
 80011ba:	f001 fc3b 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LED_GREEN_Pin|LED_RED_Pin;
 80011be:	f241 0330 	movw	r3, #4144	; 0x1030
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4619      	mov	r1, r3
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <MX_GPIO_Init+0xec>)
 80011d8:	f001 fc2c 	bl	8002a34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	2028      	movs	r0, #40	; 0x28
 80011e2:	f001 f94e 	bl	8002482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011e6:	2028      	movs	r0, #40	; 0x28
 80011e8:	f001 f967 	bl	80024ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ec:	bf00      	nop
 80011ee:	3720      	adds	r7, #32
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010c00 	.word	0x40010c00
 80011fc:	10310000 	.word	0x10310000
 8001200:	40011000 	.word	0x40011000

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_MspInit+0x5c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_MspInit+0x5c>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <HAL_MspInit+0x5c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_MspInit+0x5c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_MspInit+0x60>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_MspInit+0x60>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000

08001274 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a2c      	ldr	r2, [pc, #176]	; (8001340 <HAL_ADC_MspInit+0xcc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d151      	bne.n	8001338 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_ADC_MspInit+0xd0>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a2a      	ldr	r2, [pc, #168]	; (8001344 <HAL_ADC_MspInit+0xd0>)
 800129a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <HAL_ADC_MspInit+0xd0>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_ADC_MspInit+0xd0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a24      	ldr	r2, [pc, #144]	; (8001344 <HAL_ADC_MspInit+0xd0>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_ADC_MspInit+0xd0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c4:	2301      	movs	r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c8:	2303      	movs	r3, #3
 80012ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	481d      	ldr	r0, [pc, #116]	; (8001348 <HAL_ADC_MspInit+0xd4>)
 80012d4:	f001 fbae 	bl	8002a34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_ADC_MspInit+0xd8>)
 80012da:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <HAL_ADC_MspInit+0xdc>)
 80012dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_ADC_MspInit+0xd8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <HAL_ADC_MspInit+0xd8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_ADC_MspInit+0xd8>)
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <HAL_ADC_MspInit+0xd8>)
 80012f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_ADC_MspInit+0xd8>)
 80012fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_ADC_MspInit+0xd8>)
 8001302:	2220      	movs	r2, #32
 8001304:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_ADC_MspInit+0xd8>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <HAL_ADC_MspInit+0xd8>)
 800130e:	f001 f8ef 	bl	80024f0 <HAL_DMA_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001318:	f7ff ff74 	bl	8001204 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_ADC_MspInit+0xd8>)
 8001320:	621a      	str	r2, [r3, #32]
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_ADC_MspInit+0xd8>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2012      	movs	r0, #18
 800132e:	f001 f8a8 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001332:	2012      	movs	r0, #18
 8001334:	f001 f8c1 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40012400 	.word	0x40012400
 8001344:	40021000 	.word	0x40021000
 8001348:	40010800 	.word	0x40010800
 800134c:	200000c4 	.word	0x200000c4
 8001350:	40020008 	.word	0x40020008

08001354 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <HAL_I2C_MspInit+0x74>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d124      	bne.n	80013be <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_I2C_MspInit+0x78>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a14      	ldr	r2, [pc, #80]	; (80013cc <HAL_I2C_MspInit+0x78>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_I2C_MspInit+0x78>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800138c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	480b      	ldr	r0, [pc, #44]	; (80013d0 <HAL_I2C_MspInit+0x7c>)
 80013a2:	f001 fb47 	bl	8002a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_I2C_MspInit+0x78>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_I2C_MspInit+0x78>)
 80013ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_I2C_MspInit+0x78>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40005800 	.word	0x40005800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010c00 	.word	0x40010c00

080013d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_SPI_MspInit+0x8c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d131      	bne.n	8001458 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_SPI_MspInit+0x90>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_SPI_MspInit+0x90>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_SPI_MspInit+0x90>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_SPI_MspInit+0x90>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_SPI_MspInit+0x90>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_SPI_MspInit+0x90>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001424:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001428:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <HAL_SPI_MspInit+0x94>)
 800143a:	f001 fafb 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800143e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_SPI_MspInit+0x94>)
 8001454:	f001 faee 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40003800 	.word	0x40003800
 8001464:	40021000 	.word	0x40021000
 8001468:	40010c00 	.word	0x40010c00

0800146c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_TIM_OC_MspInit+0x34>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10b      	bne.n	8001496 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_TIM_OC_MspInit+0x38>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_TIM_OC_MspInit+0x38>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_TIM_OC_MspInit+0x38>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40000800 	.word	0x40000800
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_UART_MspInit+0x98>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d137      	bne.n	8001538 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_UART_MspInit+0x9c>)
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_UART_MspInit+0x9c>)
 80014ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d2:	61d3      	str	r3, [r2, #28]
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_UART_MspInit+0x9c>)
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_UART_MspInit+0x9c>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_UART_MspInit+0x9c>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_UART_MspInit+0x9c>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f8:	2304      	movs	r3, #4
 80014fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	4619      	mov	r1, r3
 800150a:	480f      	ldr	r0, [pc, #60]	; (8001548 <HAL_UART_MspInit+0xa0>)
 800150c:	f001 fa92 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001510:	2308      	movs	r3, #8
 8001512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	4619      	mov	r1, r3
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_UART_MspInit+0xa0>)
 8001524:	f001 fa86 	bl	8002a34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2101      	movs	r1, #1
 800152c:	2026      	movs	r0, #38	; 0x26
 800152e:	f000 ffa8 	bl	8002482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001532:	2026      	movs	r0, #38	; 0x26
 8001534:	f000 ffc1 	bl	80024ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40004400 	.word	0x40004400
 8001544:	40021000 	.word	0x40021000
 8001548:	40010800 	.word	0x40010800

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>
	...

08001554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	f_mount(0, "", 0);
 8001558:	2200      	movs	r2, #0
 800155a:	4902      	ldr	r1, [pc, #8]	; (8001564 <HardFault_Handler+0x10>)
 800155c:	2000      	movs	r0, #0
 800155e:	f007 fa9d 	bl	8008a9c <f_mount>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0xe>
 8001564:	0800aabc 	.word	0x0800aabc

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <MemManage_Handler+0x4>

0800156e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <UsageFault_Handler+0x4>

0800157a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a2:	f000 f8d1 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <DMA1_Channel1_IRQHandler+0x10>)
 80015b2:	f001 f90b 	bl	80027cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200000c4 	.word	0x200000c4

080015c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <ADC1_2_IRQHandler+0x10>)
 80015c6:	f000 fb01 	bl	8001bcc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000094 	.word	0x20000094

080015d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <USART2_IRQHandler+0x10>)
 80015da:	f004 f961 	bl	80058a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200001fc 	.word	0x200001fc

080015e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_STOP_Pin);
 80015ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015f0:	f001 fbec 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f008 f946 	bl	80098b8 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20005000 	.word	0x20005000
 8001658:	00000400 	.word	0x00000400
 800165c:	200012d4 	.word	0x200012d4
 8001660:	20001468 	.word	0x20001468

08001664 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001670:	f7ff fff8 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001676:	490c      	ldr	r1, [pc, #48]	; (80016a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a09      	ldr	r2, [pc, #36]	; (80016b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800168c:	4c09      	ldr	r4, [pc, #36]	; (80016b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f008 f913 	bl	80098c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800169e:	f7ff fb07 	bl	8000cb0 <main>
  bx lr
 80016a2:	4770      	bx	lr
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016ac:	0800ad28 	.word	0x0800ad28
  ldr r2, =_sbss
 80016b0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016b4:	20001464 	.word	0x20001464

080016b8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <CAN1_RX1_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_Init+0x28>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_Init+0x28>)
 80016c6:	f043 0310 	orr.w	r3, r3, #16
 80016ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 fecd 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff fd9a 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40022000 	.word	0x40022000

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 fee5 	bl	80024d6 <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 fead 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000000 	.word	0x20000000
 8001740:	20000008 	.word	0x20000008
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_IncTick+0x1c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b05      	ldr	r3, [pc, #20]	; (8001768 <HAL_IncTick+0x20>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a03      	ldr	r2, [pc, #12]	; (8001768 <HAL_IncTick+0x20>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000008 	.word	0x20000008
 8001768:	200012d8 	.word	0x200012d8

0800176c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return uwTick;
 8001770:	4b02      	ldr	r3, [pc, #8]	; (800177c <HAL_GetTick+0x10>)
 8001772:	681b      	ldr	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	200012d8 	.word	0x200012d8

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff fff0 	bl	800176c <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffe0 	bl	800176c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000008 	.word	0x20000008

080017c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0be      	b.n	8001968 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fd34 	bl	8001274 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fc01 	bl	8002014 <ADC_ConversionStop_Disable>
 8001812:	4603      	mov	r3, r0
 8001814:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 8099 	bne.w	8001956 <HAL_ADC_Init+0x18e>
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 8095 	bne.w	8001956 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001834:	f023 0302 	bic.w	r3, r3, #2
 8001838:	f043 0202 	orr.w	r2, r3, #2
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001848:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7b1b      	ldrb	r3, [r3, #12]
 800184e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001850:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	4313      	orrs	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001860:	d003      	beq.n	800186a <HAL_ADC_Init+0xa2>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d102      	bne.n	8001870 <HAL_ADC_Init+0xa8>
 800186a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186e:	e000      	b.n	8001872 <HAL_ADC_Init+0xaa>
 8001870:	2300      	movs	r3, #0
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	7d1b      	ldrb	r3, [r3, #20]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d119      	bne.n	80018b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7b1b      	ldrb	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	3b01      	subs	r3, #1
 800188e:	035a      	lsls	r2, r3, #13
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	e00b      	b.n	80018b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	f043 0220 	orr.w	r2, r3, #32
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <HAL_ADC_Init+0x1a8>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	68b9      	ldr	r1, [r7, #8]
 80018d8:	430b      	orrs	r3, r1
 80018da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018e4:	d003      	beq.n	80018ee <HAL_ADC_Init+0x126>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d104      	bne.n	80018f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	051b      	lsls	r3, r3, #20
 80018f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	430a      	orrs	r2, r1
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_ADC_Init+0x1ac>)
 8001914:	4013      	ands	r3, r2
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	429a      	cmp	r2, r3
 800191a:	d10b      	bne.n	8001934 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	f023 0303 	bic.w	r3, r3, #3
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001932:	e018      	b.n	8001966 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	f023 0312 	bic.w	r3, r3, #18
 800193c:	f043 0210 	orr.w	r2, r3, #16
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	f043 0201 	orr.w	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001954:	e007      	b.n	8001966 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	f043 0210 	orr.w	r2, r3, #16
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001966:	7dfb      	ldrb	r3, [r7, #23]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	ffe1f7fd 	.word	0xffe1f7fd
 8001974:	ff1f0efe 	.word	0xff1f0efe

08001978 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a64      	ldr	r2, [pc, #400]	; (8001b20 <HAL_ADC_Start_DMA+0x1a8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d004      	beq.n	800199c <HAL_ADC_Start_DMA+0x24>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a63      	ldr	r2, [pc, #396]	; (8001b24 <HAL_ADC_Start_DMA+0x1ac>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d106      	bne.n	80019aa <HAL_ADC_Start_DMA+0x32>
 800199c:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <HAL_ADC_Start_DMA+0x1a8>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 80b3 	bne.w	8001b10 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_Start_DMA+0x40>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e0ae      	b.n	8001b16 <HAL_ADC_Start_DMA+0x19e>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 facd 	bl	8001f60 <ADC_Enable>
 80019c6:	4603      	mov	r3, r0
 80019c8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f040 809a 	bne.w	8001b06 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_ADC_Start_DMA+0x1ac>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d105      	bne.n	80019fc <HAL_ADC_Start_DMA+0x84>
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_ADC_Start_DMA+0x1a8>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d115      	bne.n	8001a28 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d026      	beq.n	8001a64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a26:	e01d      	b.n	8001a64 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a39      	ldr	r2, [pc, #228]	; (8001b20 <HAL_ADC_Start_DMA+0x1a8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d004      	beq.n	8001a48 <HAL_ADC_Start_DMA+0xd0>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a38      	ldr	r2, [pc, #224]	; (8001b24 <HAL_ADC_Start_DMA+0x1ac>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d10d      	bne.n	8001a64 <HAL_ADC_Start_DMA+0xec>
 8001a48:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <HAL_ADC_Start_DMA+0x1a8>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d007      	beq.n	8001a64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d006      	beq.n	8001a7e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	f023 0206 	bic.w	r2, r3, #6
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <HAL_ADC_Start_DMA+0x1b0>)
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4a24      	ldr	r2, [pc, #144]	; (8001b2c <HAL_ADC_Start_DMA+0x1b4>)
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <HAL_ADC_Start_DMA+0x1b8>)
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0202 	mvn.w	r2, #2
 8001aac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001abc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a18      	ldr	r0, [r3, #32]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	334c      	adds	r3, #76	; 0x4c
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f000 fd69 	bl	80025a4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001adc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ae0:	d108      	bne.n	8001af4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001af0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001af2:	e00f      	b.n	8001b14 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b02:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001b04:	e006      	b.n	8001b14 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001b0e:	e001      	b.n	8001b14 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40012400 	.word	0x40012400
 8001b24:	40012800 	.word	0x40012800
 8001b28:	08002097 	.word	0x08002097
 8001b2c:	08002113 	.word	0x08002113
 8001b30:	0800212f 	.word	0x0800212f

08001b34 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_Stop_DMA+0x1a>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e03a      	b.n	8001bc4 <HAL_ADC_Stop_DMA+0x90>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fa5c 	bl	8002014 <ADC_ConversionStop_Disable>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d129      	bne.n	8001bba <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b74:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d11a      	bne.n	8001bba <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fd6b 	bl	8002664 <HAL_DMA_Abort>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10a      	bne.n	8001bae <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
 8001bac:	e005      	b.n	8001bba <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03e      	beq.n	8001c6c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d039      	beq.n	8001c6c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c1e:	d11d      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d119      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0220 	bic.w	r2, r2, #32
 8001c36:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7fe ff1f 	bl	8000aa0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f06f 0212 	mvn.w	r2, #18
 8001c6a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d04d      	beq.n	8001d12 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d048      	beq.n	8001d12 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001ca2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001ca6:	d012      	beq.n	8001cce <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d125      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cc0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cc4:	d11d      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d119      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cdc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fadc 	bl	80022c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 020c 	mvn.w	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d012      	beq.n	8001d42 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00d      	beq.n	8001d42 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f809 	bl	8001d4a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0201 	mvn.w	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x20>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e0dc      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x1da>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b06      	cmp	r3, #6
 8001d9e:	d81c      	bhi.n	8001dda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3b05      	subs	r3, #5
 8001db2:	221f      	movs	r2, #31
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4019      	ands	r1, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b05      	subs	r3, #5
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34
 8001dd8:	e03c      	b.n	8001e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d81c      	bhi.n	8001e1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	3b23      	subs	r3, #35	; 0x23
 8001df4:	221f      	movs	r2, #31
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	4019      	ands	r1, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b23      	subs	r3, #35	; 0x23
 8001e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1a:	e01b      	b.n	8001e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b41      	subs	r3, #65	; 0x41
 8001e2e:	221f      	movs	r2, #31
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	4019      	ands	r1, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b41      	subs	r3, #65	; 0x41
 8001e48:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d91c      	bls.n	8001e96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68d9      	ldr	r1, [r3, #12]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b1e      	subs	r3, #30
 8001e6e:	2207      	movs	r2, #7
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4019      	ands	r1, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6898      	ldr	r0, [r3, #8]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	3b1e      	subs	r3, #30
 8001e88:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	e019      	b.n	8001eca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6919      	ldr	r1, [r3, #16]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	4019      	ands	r1, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	6898      	ldr	r0, [r3, #8]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d003      	beq.n	8001eda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ed6:	2b11      	cmp	r3, #17
 8001ed8:	d132      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d125      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d126      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d11a      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	0c9a      	lsrs	r2, r3, #18
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f20:	e002      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f9      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x1b2>
 8001f2e:	e007      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40012400 	.word	0x40012400
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	431bde83 	.word	0x431bde83

08001f60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d040      	beq.n	8002000 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 0201 	orr.w	r2, r2, #1
 8001f8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <ADC_Enable+0xac>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1f      	ldr	r2, [pc, #124]	; (8002010 <ADC_Enable+0xb0>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f9c:	e002      	b.n	8001fa4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f9      	bne.n	8001f9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001faa:	f7ff fbdf 	bl	800176c <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fb0:	e01f      	b.n	8001ff2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fb2:	f7ff fbdb 	bl	800176c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d918      	bls.n	8001ff2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d011      	beq.n	8001ff2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e007      	b.n	8002002 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d1d8      	bne.n	8001fb2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000
 8002010:	431bde83 	.word	0x431bde83

08002014 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d12e      	bne.n	800208c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800203e:	f7ff fb95 	bl	800176c <HAL_GetTick>
 8002042:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002044:	e01b      	b.n	800207e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002046:	f7ff fb91 	bl	800176c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d914      	bls.n	800207e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10d      	bne.n	800207e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f043 0210 	orr.w	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e007      	b.n	800208e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b01      	cmp	r3, #1
 800208a:	d0dc      	beq.n	8002046 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d127      	bne.n	8002100 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020ca:	d115      	bne.n	80020f8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d111      	bne.n	80020f8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	f043 0201 	orr.w	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7fe fcd1 	bl	8000aa0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80020fe:	e004      	b.n	800210a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7fe fca3 	bl	8000a6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	f043 0204 	orr.w	r2, r3, #4
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff fe01 	bl	8001d5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_ADCEx_Calibration_Start+0x1e>
 800217e:	2302      	movs	r3, #2
 8002180:	e097      	b.n	80022b2 <HAL_ADCEx_Calibration_Start+0x14e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ff42 	bl	8002014 <ADC_ConversionStop_Disable>
 8002190:	4603      	mov	r3, r0
 8002192:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fee3 	bl	8001f60 <ADC_Enable>
 800219a:	4603      	mov	r3, r0
 800219c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800219e:	7dfb      	ldrb	r3, [r7, #23]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f040 8081 	bne.w	80022a8 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021ae:	f023 0302 	bic.w	r3, r3, #2
 80021b2:	f043 0202 	orr.w	r2, r3, #2
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021ba:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_ADCEx_Calibration_Start+0x158>)
 80021bc:	681c      	ldr	r4, [r3, #0]
 80021be:	2002      	movs	r0, #2
 80021c0:	f002 fb16 	bl	80047f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80021c4:	4603      	mov	r3, r0
 80021c6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80021ca:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80021cc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80021ce:	e002      	b.n	80021d6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f9      	bne.n	80021d0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0208 	orr.w	r2, r2, #8
 80021ea:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80021ec:	f7ff fabe 	bl	800176c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021f2:	e01b      	b.n	800222c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80021f4:	f7ff faba 	bl	800176c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b0a      	cmp	r3, #10
 8002200:	d914      	bls.n	800222c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00d      	beq.n	800222c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	f023 0312 	bic.w	r3, r3, #18
 8002218:	f043 0210 	orr.w	r2, r3, #16
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e042      	b.n	80022b2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1dc      	bne.n	80021f4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0204 	orr.w	r2, r2, #4
 8002248:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800224a:	f7ff fa8f 	bl	800176c <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002250:	e01b      	b.n	800228a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002252:	f7ff fa8b 	bl	800176c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b0a      	cmp	r3, #10
 800225e:	d914      	bls.n	800228a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	f023 0312 	bic.w	r3, r3, #18
 8002276:	f043 0210 	orr.w	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e013      	b.n	80022b2 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1dc      	bne.n	8002252 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	f023 0303 	bic.w	r3, r3, #3
 80022a0:	f043 0201 	orr.w	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000000 	.word	0x20000000

080022c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
	...

080022d4 <__NVIC_SetPriorityGrouping>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002306:	4a04      	ldr	r2, [pc, #16]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_GetPriorityGrouping>:
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <__NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_EnableIRQ>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db0b      	blt.n	8002362 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4906      	ldr	r1, [pc, #24]	; (800236c <__NVIC_EnableIRQ+0x34>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2001      	movs	r0, #1
 800235a:	fa00 f202 	lsl.w	r2, r0, r2
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	; (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	; (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff90 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff2d 	bl	80022d4 <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff42 	bl	800231c <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff90 	bl	80023c4 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5f 	bl	8002370 <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff35 	bl	8002338 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e043      	b.n	800258e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <HAL_DMA_Init+0xa8>)
 800250e:	4413      	add	r3, r2
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <HAL_DMA_Init+0xac>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	009a      	lsls	r2, r3, #2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <HAL_DMA_Init+0xb0>)
 8002522:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800253a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800253e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	bffdfff8 	.word	0xbffdfff8
 800259c:	cccccccd 	.word	0xcccccccd
 80025a0:	40020000 	.word	0x40020000

080025a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_DMA_Start_IT+0x20>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e04b      	b.n	800265c <HAL_DMA_Start_IT+0xb8>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d13a      	bne.n	800264e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0201 	bic.w	r2, r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f9eb 	bl	80029d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 020e 	orr.w	r2, r2, #14
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e00f      	b.n	800263c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0204 	bic.w	r2, r2, #4
 800262a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 020a 	orr.w	r2, r2, #10
 800263a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e005      	b.n	800265a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002656:	2302      	movs	r3, #2
 8002658:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800265a:	7dfb      	ldrb	r3, [r7, #23]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d008      	beq.n	800268e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2204      	movs	r2, #4
 8002680:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e020      	b.n	80026d0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 020e 	bic.w	r2, r2, #14
 800269c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	2101      	movs	r1, #1
 80026b8:	fa01 f202 	lsl.w	r2, r1, r2
 80026bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
	...

080026dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d005      	beq.n	8002700 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2204      	movs	r2, #4
 80026f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e051      	b.n	80027a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 020e 	bic.w	r2, r2, #14
 800270e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <HAL_DMA_Abort_IT+0xd4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d029      	beq.n	800277e <HAL_DMA_Abort_IT+0xa2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a21      	ldr	r2, [pc, #132]	; (80027b4 <HAL_DMA_Abort_IT+0xd8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d022      	beq.n	800277a <HAL_DMA_Abort_IT+0x9e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <HAL_DMA_Abort_IT+0xdc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01a      	beq.n	8002774 <HAL_DMA_Abort_IT+0x98>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_DMA_Abort_IT+0xe0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d012      	beq.n	800276e <HAL_DMA_Abort_IT+0x92>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <HAL_DMA_Abort_IT+0xe4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00a      	beq.n	8002768 <HAL_DMA_Abort_IT+0x8c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1b      	ldr	r2, [pc, #108]	; (80027c4 <HAL_DMA_Abort_IT+0xe8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d102      	bne.n	8002762 <HAL_DMA_Abort_IT+0x86>
 800275c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002760:	e00e      	b.n	8002780 <HAL_DMA_Abort_IT+0xa4>
 8002762:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002766:	e00b      	b.n	8002780 <HAL_DMA_Abort_IT+0xa4>
 8002768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800276c:	e008      	b.n	8002780 <HAL_DMA_Abort_IT+0xa4>
 800276e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002772:	e005      	b.n	8002780 <HAL_DMA_Abort_IT+0xa4>
 8002774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002778:	e002      	b.n	8002780 <HAL_DMA_Abort_IT+0xa4>
 800277a:	2310      	movs	r3, #16
 800277c:	e000      	b.n	8002780 <HAL_DMA_Abort_IT+0xa4>
 800277e:	2301      	movs	r3, #1
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_DMA_Abort_IT+0xec>)
 8002782:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	4798      	blx	r3
    } 
  }
  return status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40020008 	.word	0x40020008
 80027b4:	4002001c 	.word	0x4002001c
 80027b8:	40020030 	.word	0x40020030
 80027bc:	40020044 	.word	0x40020044
 80027c0:	40020058 	.word	0x40020058
 80027c4:	4002006c 	.word	0x4002006c
 80027c8:	40020000 	.word	0x40020000

080027cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	2204      	movs	r2, #4
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d04f      	beq.n	8002894 <HAL_DMA_IRQHandler+0xc8>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d04a      	beq.n	8002894 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a66      	ldr	r2, [pc, #408]	; (80029bc <HAL_DMA_IRQHandler+0x1f0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d029      	beq.n	800287a <HAL_DMA_IRQHandler+0xae>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a65      	ldr	r2, [pc, #404]	; (80029c0 <HAL_DMA_IRQHandler+0x1f4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d022      	beq.n	8002876 <HAL_DMA_IRQHandler+0xaa>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a63      	ldr	r2, [pc, #396]	; (80029c4 <HAL_DMA_IRQHandler+0x1f8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01a      	beq.n	8002870 <HAL_DMA_IRQHandler+0xa4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a62      	ldr	r2, [pc, #392]	; (80029c8 <HAL_DMA_IRQHandler+0x1fc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d012      	beq.n	800286a <HAL_DMA_IRQHandler+0x9e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a60      	ldr	r2, [pc, #384]	; (80029cc <HAL_DMA_IRQHandler+0x200>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00a      	beq.n	8002864 <HAL_DMA_IRQHandler+0x98>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a5f      	ldr	r2, [pc, #380]	; (80029d0 <HAL_DMA_IRQHandler+0x204>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d102      	bne.n	800285e <HAL_DMA_IRQHandler+0x92>
 8002858:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800285c:	e00e      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 800285e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002862:	e00b      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 8002864:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002868:	e008      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 800286a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800286e:	e005      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 8002870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002874:	e002      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 8002876:	2340      	movs	r3, #64	; 0x40
 8002878:	e000      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 800287a:	2304      	movs	r3, #4
 800287c:	4a55      	ldr	r2, [pc, #340]	; (80029d4 <HAL_DMA_IRQHandler+0x208>)
 800287e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8094 	beq.w	80029b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002892:	e08e      	b.n	80029b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2202      	movs	r2, #2
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d056      	beq.n	8002952 <HAL_DMA_IRQHandler+0x186>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d051      	beq.n	8002952 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 020a 	bic.w	r2, r2, #10
 80028ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a38      	ldr	r2, [pc, #224]	; (80029bc <HAL_DMA_IRQHandler+0x1f0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d029      	beq.n	8002932 <HAL_DMA_IRQHandler+0x166>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a37      	ldr	r2, [pc, #220]	; (80029c0 <HAL_DMA_IRQHandler+0x1f4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_IRQHandler+0x162>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a35      	ldr	r2, [pc, #212]	; (80029c4 <HAL_DMA_IRQHandler+0x1f8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01a      	beq.n	8002928 <HAL_DMA_IRQHandler+0x15c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <HAL_DMA_IRQHandler+0x1fc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d012      	beq.n	8002922 <HAL_DMA_IRQHandler+0x156>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a32      	ldr	r2, [pc, #200]	; (80029cc <HAL_DMA_IRQHandler+0x200>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00a      	beq.n	800291c <HAL_DMA_IRQHandler+0x150>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_DMA_IRQHandler+0x204>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d102      	bne.n	8002916 <HAL_DMA_IRQHandler+0x14a>
 8002910:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002914:	e00e      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 8002916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291a:	e00b      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 800291c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002920:	e008      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 8002922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002926:	e005      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 8002928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800292c:	e002      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 800292e:	2320      	movs	r3, #32
 8002930:	e000      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 8002932:	2302      	movs	r3, #2
 8002934:	4a27      	ldr	r2, [pc, #156]	; (80029d4 <HAL_DMA_IRQHandler+0x208>)
 8002936:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d034      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002950:	e02f      	b.n	80029b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2208      	movs	r2, #8
 8002958:	409a      	lsls	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d028      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x1e8>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d023      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 020e 	bic.w	r2, r2, #14
 800297a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f202 	lsl.w	r2, r1, r2
 800298a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
    }
  }
  return;
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
}
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40020008 	.word	0x40020008
 80029c0:	4002001c 	.word	0x4002001c
 80029c4:	40020030 	.word	0x40020030
 80029c8:	40020044 	.word	0x40020044
 80029cc:	40020058 	.word	0x40020058
 80029d0:	4002006c 	.word	0x4002006c
 80029d4:	40020000 	.word	0x40020000

080029d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d108      	bne.n	8002a18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a16:	e007      	b.n	8002a28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	60da      	str	r2, [r3, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b08b      	sub	sp, #44	; 0x2c
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a46:	e169      	b.n	8002d1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	f040 8158 	bne.w	8002d16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a9a      	ldr	r2, [pc, #616]	; (8002cd4 <HAL_GPIO_Init+0x2a0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d05e      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a70:	4a98      	ldr	r2, [pc, #608]	; (8002cd4 <HAL_GPIO_Init+0x2a0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d875      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a76:	4a98      	ldr	r2, [pc, #608]	; (8002cd8 <HAL_GPIO_Init+0x2a4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d058      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a7c:	4a96      	ldr	r2, [pc, #600]	; (8002cd8 <HAL_GPIO_Init+0x2a4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d86f      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a82:	4a96      	ldr	r2, [pc, #600]	; (8002cdc <HAL_GPIO_Init+0x2a8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d052      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a88:	4a94      	ldr	r2, [pc, #592]	; (8002cdc <HAL_GPIO_Init+0x2a8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d869      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a8e:	4a94      	ldr	r2, [pc, #592]	; (8002ce0 <HAL_GPIO_Init+0x2ac>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d04c      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002a94:	4a92      	ldr	r2, [pc, #584]	; (8002ce0 <HAL_GPIO_Init+0x2ac>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d863      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002a9a:	4a92      	ldr	r2, [pc, #584]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d046      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
 8002aa0:	4a90      	ldr	r2, [pc, #576]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d85d      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002aa6:	2b12      	cmp	r3, #18
 8002aa8:	d82a      	bhi.n	8002b00 <HAL_GPIO_Init+0xcc>
 8002aaa:	2b12      	cmp	r3, #18
 8002aac:	d859      	bhi.n	8002b62 <HAL_GPIO_Init+0x12e>
 8002aae:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <HAL_GPIO_Init+0x80>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002b2f 	.word	0x08002b2f
 8002ab8:	08002b09 	.word	0x08002b09
 8002abc:	08002b1b 	.word	0x08002b1b
 8002ac0:	08002b5d 	.word	0x08002b5d
 8002ac4:	08002b63 	.word	0x08002b63
 8002ac8:	08002b63 	.word	0x08002b63
 8002acc:	08002b63 	.word	0x08002b63
 8002ad0:	08002b63 	.word	0x08002b63
 8002ad4:	08002b63 	.word	0x08002b63
 8002ad8:	08002b63 	.word	0x08002b63
 8002adc:	08002b63 	.word	0x08002b63
 8002ae0:	08002b63 	.word	0x08002b63
 8002ae4:	08002b63 	.word	0x08002b63
 8002ae8:	08002b63 	.word	0x08002b63
 8002aec:	08002b63 	.word	0x08002b63
 8002af0:	08002b63 	.word	0x08002b63
 8002af4:	08002b63 	.word	0x08002b63
 8002af8:	08002b11 	.word	0x08002b11
 8002afc:	08002b25 	.word	0x08002b25
 8002b00:	4a79      	ldr	r2, [pc, #484]	; (8002ce8 <HAL_GPIO_Init+0x2b4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b06:	e02c      	b.n	8002b62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	623b      	str	r3, [r7, #32]
          break;
 8002b0e:	e029      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	3304      	adds	r3, #4
 8002b16:	623b      	str	r3, [r7, #32]
          break;
 8002b18:	e024      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	623b      	str	r3, [r7, #32]
          break;
 8002b22:	e01f      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	623b      	str	r3, [r7, #32]
          break;
 8002b2c:	e01a      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d102      	bne.n	8002b3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b36:	2304      	movs	r3, #4
 8002b38:	623b      	str	r3, [r7, #32]
          break;
 8002b3a:	e013      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b44:	2308      	movs	r3, #8
 8002b46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	611a      	str	r2, [r3, #16]
          break;
 8002b4e:	e009      	b.n	8002b64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b50:	2308      	movs	r3, #8
 8002b52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	615a      	str	r2, [r3, #20]
          break;
 8002b5a:	e003      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	623b      	str	r3, [r7, #32]
          break;
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x130>
          break;
 8002b62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2bff      	cmp	r3, #255	; 0xff
 8002b68:	d801      	bhi.n	8002b6e <HAL_GPIO_Init+0x13a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	e001      	b.n	8002b72 <HAL_GPIO_Init+0x13e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2bff      	cmp	r3, #255	; 0xff
 8002b78:	d802      	bhi.n	8002b80 <HAL_GPIO_Init+0x14c>
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	e002      	b.n	8002b86 <HAL_GPIO_Init+0x152>
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	3b08      	subs	r3, #8
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	210f      	movs	r1, #15
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80b1 	beq.w	8002d16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bb4:	4b4d      	ldr	r3, [pc, #308]	; (8002cec <HAL_GPIO_Init+0x2b8>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	4a4c      	ldr	r2, [pc, #304]	; (8002cec <HAL_GPIO_Init+0x2b8>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6193      	str	r3, [r2, #24]
 8002bc0:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <HAL_GPIO_Init+0x2b8>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bcc:	4a48      	ldr	r2, [pc, #288]	; (8002cf0 <HAL_GPIO_Init+0x2bc>)
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a40      	ldr	r2, [pc, #256]	; (8002cf4 <HAL_GPIO_Init+0x2c0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_GPIO_Init+0x1ec>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3f      	ldr	r2, [pc, #252]	; (8002cf8 <HAL_GPIO_Init+0x2c4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00d      	beq.n	8002c1c <HAL_GPIO_Init+0x1e8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3e      	ldr	r2, [pc, #248]	; (8002cfc <HAL_GPIO_Init+0x2c8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <HAL_GPIO_Init+0x1e4>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a3d      	ldr	r2, [pc, #244]	; (8002d00 <HAL_GPIO_Init+0x2cc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d101      	bne.n	8002c14 <HAL_GPIO_Init+0x1e0>
 8002c10:	2303      	movs	r3, #3
 8002c12:	e006      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c14:	2304      	movs	r3, #4
 8002c16:	e004      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e002      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c20:	2300      	movs	r3, #0
 8002c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c24:	f002 0203 	and.w	r2, r2, #3
 8002c28:	0092      	lsls	r2, r2, #2
 8002c2a:	4093      	lsls	r3, r2
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c32:	492f      	ldr	r1, [pc, #188]	; (8002cf0 <HAL_GPIO_Init+0x2bc>)
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	492c      	ldr	r1, [pc, #176]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
 8002c58:	e006      	b.n	8002c68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c5a:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	4928      	ldr	r1, [pc, #160]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c74:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	4922      	ldr	r1, [pc, #136]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60cb      	str	r3, [r1, #12]
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	491e      	ldr	r1, [pc, #120]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	4918      	ldr	r1, [pc, #96]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
 8002ca8:	e006      	b.n	8002cb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	4914      	ldr	r1, [pc, #80]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d021      	beq.n	8002d08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	490e      	ldr	r1, [pc, #56]	; (8002d04 <HAL_GPIO_Init+0x2d0>)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
 8002cd0:	e021      	b.n	8002d16 <HAL_GPIO_Init+0x2e2>
 8002cd2:	bf00      	nop
 8002cd4:	10320000 	.word	0x10320000
 8002cd8:	10310000 	.word	0x10310000
 8002cdc:	10220000 	.word	0x10220000
 8002ce0:	10210000 	.word	0x10210000
 8002ce4:	10120000 	.word	0x10120000
 8002ce8:	10110000 	.word	0x10110000
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40010800 	.word	0x40010800
 8002cf8:	40010c00 	.word	0x40010c00
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40011400 	.word	0x40011400
 8002d04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	4909      	ldr	r1, [pc, #36]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	3301      	adds	r3, #1
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f47f ae8e 	bne.w	8002a48 <HAL_GPIO_Init+0x14>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	372c      	adds	r7, #44	; 0x2c
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e001      	b.n	8002d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	807b      	strh	r3, [r7, #2]
 8002d76:	4613      	mov	r3, r2
 8002d78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d7a:	787b      	ldrb	r3, [r7, #1]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d80:	887a      	ldrh	r2, [r7, #2]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d86:	e003      	b.n	8002d90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	041a      	lsls	r2, r3, #16
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	611a      	str	r2, [r3, #16]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dac:	887a      	ldrh	r2, [r7, #2]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4013      	ands	r3, r2
 8002db2:	041a      	lsls	r2, r3, #16
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	400b      	ands	r3, r1
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fe74 	bl	8000ad8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40010400 	.word	0x40010400

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e12b      	b.n	8003066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe fa96 	bl	8001354 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e60:	f001 fbca 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a81      	ldr	r2, [pc, #516]	; (8003070 <HAL_I2C_Init+0x274>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d807      	bhi.n	8002e80 <HAL_I2C_Init+0x84>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a80      	ldr	r2, [pc, #512]	; (8003074 <HAL_I2C_Init+0x278>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	bf94      	ite	ls
 8002e78:	2301      	movls	r3, #1
 8002e7a:	2300      	movhi	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e006      	b.n	8002e8e <HAL_I2C_Init+0x92>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a7d      	ldr	r2, [pc, #500]	; (8003078 <HAL_I2C_Init+0x27c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0e7      	b.n	8003066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a78      	ldr	r2, [pc, #480]	; (800307c <HAL_I2C_Init+0x280>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9b      	lsrs	r3, r3, #18
 8002ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a6a      	ldr	r2, [pc, #424]	; (8003070 <HAL_I2C_Init+0x274>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d802      	bhi.n	8002ed0 <HAL_I2C_Init+0xd4>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	e009      	b.n	8002ee4 <HAL_I2C_Init+0xe8>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ed6:	fb02 f303 	mul.w	r3, r2, r3
 8002eda:	4a69      	ldr	r2, [pc, #420]	; (8003080 <HAL_I2C_Init+0x284>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	099b      	lsrs	r3, r3, #6
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ef6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	495c      	ldr	r1, [pc, #368]	; (8003070 <HAL_I2C_Init+0x274>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d819      	bhi.n	8002f38 <HAL_I2C_Init+0x13c>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e59      	subs	r1, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f12:	1c59      	adds	r1, r3, #1
 8002f14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f18:	400b      	ands	r3, r1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_I2C_Init+0x138>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	e051      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e04f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d111      	bne.n	8002f64 <HAL_I2C_Init+0x168>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	e012      	b.n	8002f8a <HAL_I2C_Init+0x18e>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1e58      	subs	r0, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	0099      	lsls	r1, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x196>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e022      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_I2C_Init+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e58      	subs	r0, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	440b      	add	r3, r1
 8002fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb6:	e00f      	b.n	8002fd8 <HAL_I2C_Init+0x1dc>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1e58      	subs	r0, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	0099      	lsls	r1, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6809      	ldr	r1, [r1, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6911      	ldr	r1, [r2, #16]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68d2      	ldr	r2, [r2, #12]
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	000186a0 	.word	0x000186a0
 8003074:	001e847f 	.word	0x001e847f
 8003078:	003d08ff 	.word	0x003d08ff
 800307c:	431bde83 	.word	0x431bde83
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	460b      	mov	r3, r1
 8003092:	817b      	strh	r3, [r7, #10]
 8003094:	4613      	mov	r3, r2
 8003096:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7fe fb68 	bl	800176c <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b20      	cmp	r3, #32
 80030a8:	f040 80e0 	bne.w	800326c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2319      	movs	r3, #25
 80030b2:	2201      	movs	r2, #1
 80030b4:	4970      	ldr	r1, [pc, #448]	; (8003278 <HAL_I2C_Master_Transmit+0x1f4>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fc9e 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0d3      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_I2C_Master_Transmit+0x50>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0cc      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d007      	beq.n	80030fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2221      	movs	r2, #33	; 0x21
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2210      	movs	r2, #16
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	893a      	ldrh	r2, [r7, #8]
 800312a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a50      	ldr	r2, [pc, #320]	; (800327c <HAL_I2C_Master_Transmit+0x1f8>)
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800313c:	8979      	ldrh	r1, [r7, #10]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fb08 	bl	8003758 <I2C_MasterRequestWrite>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e08d      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003168:	e066      	b.n	8003238 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	6a39      	ldr	r1, [r7, #32]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fd5c 	bl	8003c2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b04      	cmp	r3, #4
 8003180:	d107      	bne.n	8003192 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d11b      	bne.n	800320c <HAL_I2C_Master_Transmit+0x188>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d017      	beq.n	800320c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	6a39      	ldr	r1, [r7, #32]
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fd53 	bl	8003cbc <I2C_WaitOnBTFFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	2b04      	cmp	r3, #4
 8003222:	d107      	bne.n	8003234 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003232:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e01a      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	2b00      	cmp	r3, #0
 800323e:	d194      	bne.n	800316a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	00100002 	.word	0x00100002
 800327c:	ffff0000 	.word	0xffff0000

08003280 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08c      	sub	sp, #48	; 0x30
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	461a      	mov	r2, r3
 800328c:	460b      	mov	r3, r1
 800328e:	817b      	strh	r3, [r7, #10]
 8003290:	4613      	mov	r3, r2
 8003292:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003298:	f7fe fa68 	bl	800176c <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	f040 824b 	bne.w	8003742 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	2319      	movs	r3, #25
 80032b2:	2201      	movs	r2, #1
 80032b4:	497f      	ldr	r1, [pc, #508]	; (80034b4 <HAL_I2C_Master_Receive+0x234>)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fb9e 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
 80032c4:	e23e      	b.n	8003744 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_I2C_Master_Receive+0x54>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e237      	b.n	8003744 <HAL_I2C_Master_Receive+0x4c4>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d007      	beq.n	80032fa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2222      	movs	r2, #34	; 0x22
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2210      	movs	r2, #16
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	893a      	ldrh	r2, [r7, #8]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a5f      	ldr	r2, [pc, #380]	; (80034b8 <HAL_I2C_Master_Receive+0x238>)
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800333c:	8979      	ldrh	r1, [r7, #10]
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 fa8a 	bl	800385c <I2C_MasterRequestRead>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e1f8      	b.n	8003744 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	2b00      	cmp	r3, #0
 8003358:	d113      	bne.n	8003382 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	e1cc      	b.n	800371c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	2b01      	cmp	r3, #1
 8003388:	d11e      	bne.n	80033c8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003398:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800339a:	b672      	cpsid	i
}
 800339c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033c4:	b662      	cpsie	i
}
 80033c6:	e035      	b.n	8003434 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d11e      	bne.n	800340e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033e0:	b672      	cpsid	i
}
 80033e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003408:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800340a:	b662      	cpsie	i
}
 800340c:	e012      	b.n	8003434 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800341c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003434:	e172      	b.n	800371c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	2b03      	cmp	r3, #3
 800343c:	f200 811f 	bhi.w	800367e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	2b01      	cmp	r3, #1
 8003446:	d123      	bne.n	8003490 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fc7d 	bl	8003d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e173      	b.n	8003744 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800348e:	e145      	b.n	800371c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	2b02      	cmp	r3, #2
 8003496:	d152      	bne.n	800353e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	2200      	movs	r2, #0
 80034a0:	4906      	ldr	r1, [pc, #24]	; (80034bc <HAL_I2C_Master_Receive+0x23c>)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 faa8 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e148      	b.n	8003744 <HAL_I2C_Master_Receive+0x4c4>
 80034b2:	bf00      	nop
 80034b4:	00100002 	.word	0x00100002
 80034b8:	ffff0000 	.word	0xffff0000
 80034bc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80034c0:	b672      	cpsid	i
}
 80034c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003506:	b662      	cpsie	i
}
 8003508:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800353c:	e0ee      	b.n	800371c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	2200      	movs	r2, #0
 8003546:	4981      	ldr	r1, [pc, #516]	; (800374c <HAL_I2C_Master_Receive+0x4cc>)
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fa55 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0f5      	b.n	8003744 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003566:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003568:	b672      	cpsid	i
}
 800356a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691a      	ldr	r2, [r3, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	b2d2      	uxtb	r2, r2
 8003578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800359e:	4b6c      	ldr	r3, [pc, #432]	; (8003750 <HAL_I2C_Master_Receive+0x4d0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	08db      	lsrs	r3, r3, #3
 80035a4:	4a6b      	ldr	r2, [pc, #428]	; (8003754 <HAL_I2C_Master_Receive+0x4d4>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	0a1a      	lsrs	r2, r3, #8
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	00da      	lsls	r2, r3, #3
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d118      	bne.n	80035f6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f043 0220 	orr.w	r2, r3, #32
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80035e6:	b662      	cpsie	i
}
 80035e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0a6      	b.n	8003744 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b04      	cmp	r3, #4
 8003602:	d1d9      	bne.n	80035b8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003646:	b662      	cpsie	i
}
 8003648:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800367c:	e04e      	b.n	800371c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 fb62 	bl	8003d4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e058      	b.n	8003744 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d124      	bne.n	800371c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d107      	bne.n	80036ea <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	f47f ae88 	bne.w	8003436 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003742:	2302      	movs	r3, #2
  }
}
 8003744:	4618      	mov	r0, r3
 8003746:	3728      	adds	r7, #40	; 0x28
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	00010004 	.word	0x00010004
 8003750:	20000000 	.word	0x20000000
 8003754:	14f8b589 	.word	0x14f8b589

08003758 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b088      	sub	sp, #32
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	460b      	mov	r3, r1
 8003766:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d006      	beq.n	8003782 <I2C_MasterRequestWrite+0x2a>
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d003      	beq.n	8003782 <I2C_MasterRequestWrite+0x2a>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003780:	d108      	bne.n	8003794 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e00b      	b.n	80037ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	2b12      	cmp	r3, #18
 800379a:	d107      	bne.n	80037ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f91d 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d2:	d103      	bne.n	80037dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e035      	b.n	800384c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e8:	d108      	bne.n	80037fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ea:	897b      	ldrh	r3, [r7, #10]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037f8:	611a      	str	r2, [r3, #16]
 80037fa:	e01b      	b.n	8003834 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037fc:	897b      	ldrh	r3, [r7, #10]
 80037fe:	11db      	asrs	r3, r3, #7
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0306 	and.w	r3, r3, #6
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f063 030f 	orn	r3, r3, #15
 800380c:	b2da      	uxtb	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	490e      	ldr	r1, [pc, #56]	; (8003854 <I2C_MasterRequestWrite+0xfc>)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f966 	bl	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e010      	b.n	800384c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4907      	ldr	r1, [pc, #28]	; (8003858 <I2C_MasterRequestWrite+0x100>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f956 	bl	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	00010008 	.word	0x00010008
 8003858:	00010002 	.word	0x00010002

0800385c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	460b      	mov	r3, r1
 800386a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003880:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d006      	beq.n	8003896 <I2C_MasterRequestRead+0x3a>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d003      	beq.n	8003896 <I2C_MasterRequestRead+0x3a>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003894:	d108      	bne.n	80038a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e00b      	b.n	80038c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	2b11      	cmp	r3, #17
 80038ae:	d107      	bne.n	80038c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f893 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00d      	beq.n	80038f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	d103      	bne.n	80038f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e079      	b.n	80039e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038fc:	d108      	bne.n	8003910 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038fe:	897b      	ldrh	r3, [r7, #10]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]
 800390e:	e05f      	b.n	80039d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003910:	897b      	ldrh	r3, [r7, #10]
 8003912:	11db      	asrs	r3, r3, #7
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f003 0306 	and.w	r3, r3, #6
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f063 030f 	orn	r3, r3, #15
 8003920:	b2da      	uxtb	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4930      	ldr	r1, [pc, #192]	; (80039f0 <I2C_MasterRequestRead+0x194>)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f8dc 	bl	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e054      	b.n	80039e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800393e:	897b      	ldrh	r3, [r7, #10]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4929      	ldr	r1, [pc, #164]	; (80039f4 <I2C_MasterRequestRead+0x198>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f8cc 	bl	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e044      	b.n	80039e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003982:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f831 	bl	80039f8 <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00d      	beq.n	80039b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039aa:	d103      	bne.n	80039b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e017      	b.n	80039e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039b8:	897b      	ldrh	r3, [r7, #10]
 80039ba:	11db      	asrs	r3, r3, #7
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0306 	and.w	r3, r3, #6
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f063 030e 	orn	r3, r3, #14
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4907      	ldr	r1, [pc, #28]	; (80039f4 <I2C_MasterRequestRead+0x198>)
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f888 	bl	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	00010008 	.word	0x00010008
 80039f4:	00010002 	.word	0x00010002

080039f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a08:	e048      	b.n	8003a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d044      	beq.n	8003a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a12:	f7fd feab 	bl	800176c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d302      	bcc.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d139      	bne.n	8003a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	0c1b      	lsrs	r3, r3, #16
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d10d      	bne.n	8003a4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	43da      	mvns	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	e00c      	b.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	43da      	mvns	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	461a      	mov	r2, r3
 8003a68:	79fb      	ldrb	r3, [r7, #7]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d116      	bne.n	8003a9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e023      	b.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10d      	bne.n	8003ac2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	43da      	mvns	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	e00c      	b.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d093      	beq.n	8003a0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003afa:	e071      	b.n	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0a:	d123      	bne.n	8003b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f043 0204 	orr.w	r2, r3, #4
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e067      	b.n	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d041      	beq.n	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5c:	f7fd fe06 	bl	800176c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d302      	bcc.n	8003b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d136      	bne.n	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d10c      	bne.n	8003b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	43da      	mvns	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf14      	ite	ne
 8003b8e:	2301      	movne	r3, #1
 8003b90:	2300      	moveq	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	e00b      	b.n	8003bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	43da      	mvns	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf14      	ite	ne
 8003ba8:	2301      	movne	r3, #1
 8003baa:	2300      	moveq	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d016      	beq.n	8003be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e021      	b.n	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	0c1b      	lsrs	r3, r3, #16
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10c      	bne.n	8003c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	43da      	mvns	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e00b      	b.n	8003c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf14      	ite	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	2300      	moveq	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f47f af6d 	bne.w	8003afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c38:	e034      	b.n	8003ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f8e3 	bl	8003e06 <I2C_IsAcknowledgeFailed>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e034      	b.n	8003cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d028      	beq.n	8003ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c52:	f7fd fd8b 	bl	800176c <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d302      	bcc.n	8003c68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11d      	bne.n	8003ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b80      	cmp	r3, #128	; 0x80
 8003c74:	d016      	beq.n	8003ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e007      	b.n	8003cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cae:	2b80      	cmp	r3, #128	; 0x80
 8003cb0:	d1c3      	bne.n	8003c3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cc8:	e034      	b.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f89b 	bl	8003e06 <I2C_IsAcknowledgeFailed>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e034      	b.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce0:	d028      	beq.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fd fd43 	bl	800176c <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d11d      	bne.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d016      	beq.n	8003d34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f043 0220 	orr.w	r2, r3, #32
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e007      	b.n	8003d44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d1c3      	bne.n	8003cca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d58:	e049      	b.n	8003dee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d119      	bne.n	8003d9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0210 	mvn.w	r2, #16
 8003d70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e030      	b.n	8003dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9c:	f7fd fce6 	bl	800176c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d302      	bcc.n	8003db2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d11d      	bne.n	8003dee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d016      	beq.n	8003dee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e007      	b.n	8003dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d1ae      	bne.n	8003d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1c:	d11b      	bne.n	8003e56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e272      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8087 	beq.w	8003f92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e84:	4b92      	ldr	r3, [pc, #584]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d00c      	beq.n	8003eaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e90:	4b8f      	ldr	r3, [pc, #572]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d112      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x5e>
 8003e9c:	4b8c      	ldr	r3, [pc, #560]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eaa:	4b89      	ldr	r3, [pc, #548]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d06c      	beq.n	8003f90 <HAL_RCC_OscConfig+0x12c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d168      	bne.n	8003f90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e24c      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eca:	d106      	bne.n	8003eda <HAL_RCC_OscConfig+0x76>
 8003ecc:	4b80      	ldr	r3, [pc, #512]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a7f      	ldr	r2, [pc, #508]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e02e      	b.n	8003f38 <HAL_RCC_OscConfig+0xd4>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10c      	bne.n	8003efc <HAL_RCC_OscConfig+0x98>
 8003ee2:	4b7b      	ldr	r3, [pc, #492]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a7a      	ldr	r2, [pc, #488]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b78      	ldr	r3, [pc, #480]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a77      	ldr	r2, [pc, #476]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e01d      	b.n	8003f38 <HAL_RCC_OscConfig+0xd4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0xbc>
 8003f06:	4b72      	ldr	r3, [pc, #456]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a71      	ldr	r2, [pc, #452]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b6f      	ldr	r3, [pc, #444]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6e      	ldr	r2, [pc, #440]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0xd4>
 8003f20:	4b6b      	ldr	r3, [pc, #428]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a6a      	ldr	r2, [pc, #424]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b68      	ldr	r3, [pc, #416]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a67      	ldr	r2, [pc, #412]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fd fc14 	bl	800176c <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fd fc10 	bl	800176c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e200      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b5d      	ldr	r3, [pc, #372]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0xe4>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fd fc00 	bl	800176c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fd fbfc 	bl	800176c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e1ec      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x10c>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d063      	beq.n	8004066 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f9e:	4b4c      	ldr	r3, [pc, #304]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003faa:	4b49      	ldr	r3, [pc, #292]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x18c>
 8003fb6:	4b46      	ldr	r3, [pc, #280]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d116      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	4b43      	ldr	r3, [pc, #268]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x176>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1c0      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fda:	4b3d      	ldr	r3, [pc, #244]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4939      	ldr	r1, [pc, #228]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fee:	e03a      	b.n	8004066 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d020      	beq.n	800403a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff8:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <HAL_RCC_OscConfig+0x270>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fbb5 	bl	800176c <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004006:	f7fd fbb1 	bl	800176c <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1a1      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004018:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004024:	4b2a      	ldr	r3, [pc, #168]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4927      	ldr	r1, [pc, #156]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 8004034:	4313      	orrs	r3, r2
 8004036:	600b      	str	r3, [r1, #0]
 8004038:	e015      	b.n	8004066 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403a:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <HAL_RCC_OscConfig+0x270>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fd fb94 	bl	800176c <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004048:	f7fd fb90 	bl	800176c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e180      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d03a      	beq.n	80040e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d019      	beq.n	80040ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407a:	4b17      	ldr	r3, [pc, #92]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004080:	f7fd fb74 	bl	800176c <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004088:	f7fd fb70 	bl	800176c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e160      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409a:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <HAL_RCC_OscConfig+0x26c>)
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040a6:	2001      	movs	r0, #1
 80040a8:	f000 face 	bl	8004648 <RCC_Delay>
 80040ac:	e01c      	b.n	80040e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_RCC_OscConfig+0x274>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b4:	f7fd fb5a 	bl	800176c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ba:	e00f      	b.n	80040dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040bc:	f7fd fb56 	bl	800176c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d908      	bls.n	80040dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e146      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	42420000 	.word	0x42420000
 80040d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040dc:	4b92      	ldr	r3, [pc, #584]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e9      	bne.n	80040bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a6 	beq.w	8004242 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f6:	2300      	movs	r3, #0
 80040f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fa:	4b8b      	ldr	r3, [pc, #556]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10d      	bne.n	8004122 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	4b88      	ldr	r3, [pc, #544]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	4a87      	ldr	r2, [pc, #540]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	61d3      	str	r3, [r2, #28]
 8004112:	4b85      	ldr	r3, [pc, #532]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	60bb      	str	r3, [r7, #8]
 800411c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004122:	4b82      	ldr	r3, [pc, #520]	; (800432c <HAL_RCC_OscConfig+0x4c8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d118      	bne.n	8004160 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412e:	4b7f      	ldr	r3, [pc, #508]	; (800432c <HAL_RCC_OscConfig+0x4c8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a7e      	ldr	r2, [pc, #504]	; (800432c <HAL_RCC_OscConfig+0x4c8>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800413a:	f7fd fb17 	bl	800176c <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004142:	f7fd fb13 	bl	800176c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b64      	cmp	r3, #100	; 0x64
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e103      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b75      	ldr	r3, [pc, #468]	; (800432c <HAL_RCC_OscConfig+0x4c8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d106      	bne.n	8004176 <HAL_RCC_OscConfig+0x312>
 8004168:	4b6f      	ldr	r3, [pc, #444]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	4a6e      	ldr	r2, [pc, #440]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6213      	str	r3, [r2, #32]
 8004174:	e02d      	b.n	80041d2 <HAL_RCC_OscConfig+0x36e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0x334>
 800417e:	4b6a      	ldr	r3, [pc, #424]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	4a69      	ldr	r2, [pc, #420]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6213      	str	r3, [r2, #32]
 800418a:	4b67      	ldr	r3, [pc, #412]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	4a66      	ldr	r2, [pc, #408]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 8004190:	f023 0304 	bic.w	r3, r3, #4
 8004194:	6213      	str	r3, [r2, #32]
 8004196:	e01c      	b.n	80041d2 <HAL_RCC_OscConfig+0x36e>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b05      	cmp	r3, #5
 800419e:	d10c      	bne.n	80041ba <HAL_RCC_OscConfig+0x356>
 80041a0:	4b61      	ldr	r3, [pc, #388]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	4a60      	ldr	r2, [pc, #384]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80041a6:	f043 0304 	orr.w	r3, r3, #4
 80041aa:	6213      	str	r3, [r2, #32]
 80041ac:	4b5e      	ldr	r3, [pc, #376]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	4a5d      	ldr	r2, [pc, #372]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6213      	str	r3, [r2, #32]
 80041b8:	e00b      	b.n	80041d2 <HAL_RCC_OscConfig+0x36e>
 80041ba:	4b5b      	ldr	r3, [pc, #364]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4a5a      	ldr	r2, [pc, #360]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	6213      	str	r3, [r2, #32]
 80041c6:	4b58      	ldr	r3, [pc, #352]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4a57      	ldr	r2, [pc, #348]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80041cc:	f023 0304 	bic.w	r3, r3, #4
 80041d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d015      	beq.n	8004206 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041da:	f7fd fac7 	bl	800176c <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e0:	e00a      	b.n	80041f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e2:	f7fd fac3 	bl	800176c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e0b1      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f8:	4b4b      	ldr	r3, [pc, #300]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0ee      	beq.n	80041e2 <HAL_RCC_OscConfig+0x37e>
 8004204:	e014      	b.n	8004230 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004206:	f7fd fab1 	bl	800176c <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420c:	e00a      	b.n	8004224 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420e:	f7fd faad 	bl	800176c <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	f241 3288 	movw	r2, #5000	; 0x1388
 800421c:	4293      	cmp	r3, r2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e09b      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ee      	bne.n	800420e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d105      	bne.n	8004242 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004236:	4b3c      	ldr	r3, [pc, #240]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4a3b      	ldr	r2, [pc, #236]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 800423c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004240:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8087 	beq.w	800435a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800424c:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b08      	cmp	r3, #8
 8004256:	d061      	beq.n	800431c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	2b02      	cmp	r3, #2
 800425e:	d146      	bne.n	80042ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004260:	4b33      	ldr	r3, [pc, #204]	; (8004330 <HAL_RCC_OscConfig+0x4cc>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004266:	f7fd fa81 	bl	800176c <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426e:	f7fd fa7d 	bl	800176c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e06d      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004280:	4b29      	ldr	r3, [pc, #164]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f0      	bne.n	800426e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004294:	d108      	bne.n	80042a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004296:	4b24      	ldr	r3, [pc, #144]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	4921      	ldr	r1, [pc, #132]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a8:	4b1f      	ldr	r3, [pc, #124]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a19      	ldr	r1, [r3, #32]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	430b      	orrs	r3, r1
 80042ba:	491b      	ldr	r1, [pc, #108]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c0:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <HAL_RCC_OscConfig+0x4cc>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fd fa51 	bl	800176c <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fd fa4d 	bl	800176c <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e03d      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x46a>
 80042ec:	e035      	b.n	800435a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_RCC_OscConfig+0x4cc>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f4:	f7fd fa3a 	bl	800176c <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fc:	f7fd fa36 	bl	800176c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e026      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_RCC_OscConfig+0x4c4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x498>
 800431a:	e01e      	b.n	800435a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d107      	bne.n	8004334 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e019      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
 8004328:	40021000 	.word	0x40021000
 800432c:	40007000 	.word	0x40007000
 8004330:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004334:	4b0b      	ldr	r3, [pc, #44]	; (8004364 <HAL_RCC_OscConfig+0x500>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	429a      	cmp	r2, r3
 8004346:	d106      	bne.n	8004356 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40021000 	.word	0x40021000

08004368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0d0      	b.n	800451e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800437c:	4b6a      	ldr	r3, [pc, #424]	; (8004528 <HAL_RCC_ClockConfig+0x1c0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d910      	bls.n	80043ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b67      	ldr	r3, [pc, #412]	; (8004528 <HAL_RCC_ClockConfig+0x1c0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 0207 	bic.w	r2, r3, #7
 8004392:	4965      	ldr	r1, [pc, #404]	; (8004528 <HAL_RCC_ClockConfig+0x1c0>)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b63      	ldr	r3, [pc, #396]	; (8004528 <HAL_RCC_ClockConfig+0x1c0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0b8      	b.n	800451e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d020      	beq.n	80043fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c4:	4b59      	ldr	r3, [pc, #356]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4a58      	ldr	r2, [pc, #352]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80043ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043dc:	4b53      	ldr	r3, [pc, #332]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	4a52      	ldr	r2, [pc, #328]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80043e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e8:	4b50      	ldr	r3, [pc, #320]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	494d      	ldr	r1, [pc, #308]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d040      	beq.n	8004488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d107      	bne.n	800441e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b47      	ldr	r3, [pc, #284]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d115      	bne.n	8004446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e07f      	b.n	800451e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b02      	cmp	r3, #2
 8004424:	d107      	bne.n	8004436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004426:	4b41      	ldr	r3, [pc, #260]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e073      	b.n	800451e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004436:	4b3d      	ldr	r3, [pc, #244]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e06b      	b.n	800451e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004446:	4b39      	ldr	r3, [pc, #228]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4936      	ldr	r1, [pc, #216]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004458:	f7fd f988 	bl	800176c <HAL_GetTick>
 800445c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445e:	e00a      	b.n	8004476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004460:	f7fd f984 	bl	800176c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	; 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e053      	b.n	800451e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004476:	4b2d      	ldr	r3, [pc, #180]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f003 020c 	and.w	r2, r3, #12
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	429a      	cmp	r2, r3
 8004486:	d1eb      	bne.n	8004460 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004488:	4b27      	ldr	r3, [pc, #156]	; (8004528 <HAL_RCC_ClockConfig+0x1c0>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d210      	bcs.n	80044b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCC_ClockConfig+0x1c0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f023 0207 	bic.w	r2, r3, #7
 800449e:	4922      	ldr	r1, [pc, #136]	; (8004528 <HAL_RCC_ClockConfig+0x1c0>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a6:	4b20      	ldr	r3, [pc, #128]	; (8004528 <HAL_RCC_ClockConfig+0x1c0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e032      	b.n	800451e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c4:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4916      	ldr	r1, [pc, #88]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	490e      	ldr	r1, [pc, #56]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044f6:	f000 f821 	bl	800453c <HAL_RCC_GetSysClockFreq>
 80044fa:	4602      	mov	r2, r0
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_ClockConfig+0x1c4>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	490a      	ldr	r1, [pc, #40]	; (8004530 <HAL_RCC_ClockConfig+0x1c8>)
 8004508:	5ccb      	ldrb	r3, [r1, r3]
 800450a:	fa22 f303 	lsr.w	r3, r2, r3
 800450e:	4a09      	ldr	r2, [pc, #36]	; (8004534 <HAL_RCC_ClockConfig+0x1cc>)
 8004510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004512:	4b09      	ldr	r3, [pc, #36]	; (8004538 <HAL_RCC_ClockConfig+0x1d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd f8e6 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40022000 	.word	0x40022000
 800452c:	40021000 	.word	0x40021000
 8004530:	0800ab10 	.word	0x0800ab10
 8004534:	20000000 	.word	0x20000000
 8004538:	20000004 	.word	0x20000004

0800453c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	2300      	movs	r3, #0
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004556:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b04      	cmp	r3, #4
 8004564:	d002      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x30>
 8004566:	2b08      	cmp	r3, #8
 8004568:	d003      	beq.n	8004572 <HAL_RCC_GetSysClockFreq+0x36>
 800456a:	e027      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800456e:	613b      	str	r3, [r7, #16]
      break;
 8004570:	e027      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	0c9b      	lsrs	r3, r3, #18
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800457c:	5cd3      	ldrb	r3, [r2, r3]
 800457e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d010      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	0c5b      	lsrs	r3, r3, #17
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	4a11      	ldr	r2, [pc, #68]	; (80045dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004596:	5cd3      	ldrb	r3, [r2, r3]
 8004598:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a0d      	ldr	r2, [pc, #52]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800459e:	fb03 f202 	mul.w	r2, r3, r2
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e004      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a0c      	ldr	r2, [pc, #48]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	613b      	str	r3, [r7, #16]
      break;
 80045ba:	e002      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80045be:	613b      	str	r3, [r7, #16]
      break;
 80045c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045c2:	693b      	ldr	r3, [r7, #16]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40021000 	.word	0x40021000
 80045d4:	007a1200 	.word	0x007a1200
 80045d8:	0800ab28 	.word	0x0800ab28
 80045dc:	0800ab38 	.word	0x0800ab38
 80045e0:	003d0900 	.word	0x003d0900

080045e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e8:	4b02      	ldr	r3, [pc, #8]	; (80045f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80045ea:	681b      	ldr	r3, [r3, #0]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	20000000 	.word	0x20000000

080045f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045fc:	f7ff fff2 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4903      	ldr	r1, [pc, #12]	; (800461c <HAL_RCC_GetPCLK1Freq+0x24>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	0800ab20 	.word	0x0800ab20

08004620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004624:	f7ff ffde 	bl	80045e4 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	0adb      	lsrs	r3, r3, #11
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4903      	ldr	r1, [pc, #12]	; (8004644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40021000 	.word	0x40021000
 8004644:	0800ab20 	.word	0x0800ab20

08004648 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <RCC_Delay+0x34>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0a      	ldr	r2, [pc, #40]	; (8004680 <RCC_Delay+0x38>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0a5b      	lsrs	r3, r3, #9
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004664:	bf00      	nop
  }
  while (Delay --);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1e5a      	subs	r2, r3, #1
 800466a:	60fa      	str	r2, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f9      	bne.n	8004664 <RCC_Delay+0x1c>
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr
 800467c:	20000000 	.word	0x20000000
 8004680:	10624dd3 	.word	0x10624dd3

08004684 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d07d      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80046a0:	2300      	movs	r3, #0
 80046a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a4:	4b4f      	ldr	r3, [pc, #316]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10d      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b0:	4b4c      	ldr	r3, [pc, #304]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	4a4b      	ldr	r2, [pc, #300]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ba:	61d3      	str	r3, [r2, #28]
 80046bc:	4b49      	ldr	r3, [pc, #292]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c8:	2301      	movs	r3, #1
 80046ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046cc:	4b46      	ldr	r3, [pc, #280]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d118      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d8:	4b43      	ldr	r3, [pc, #268]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a42      	ldr	r2, [pc, #264]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e4:	f7fd f842 	bl	800176c <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ea:	e008      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ec:	f7fd f83e 	bl	800176c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e06d      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fe:	4b3a      	ldr	r3, [pc, #232]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800470a:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d02e      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	429a      	cmp	r2, r3
 8004726:	d027      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004728:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004730:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004732:	4b2e      	ldr	r3, [pc, #184]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004734:	2201      	movs	r2, #1
 8004736:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004738:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800473e:	4a29      	ldr	r2, [pc, #164]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d014      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474e:	f7fd f80d 	bl	800176c <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fd f809 	bl	800176c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e036      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ee      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004778:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4917      	ldr	r1, [pc, #92]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004786:	4313      	orrs	r3, r2
 8004788:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800478a:	7dfb      	ldrb	r3, [r7, #23]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047a8:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	490b      	ldr	r1, [pc, #44]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047c6:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4904      	ldr	r1, [pc, #16]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40007000 	.word	0x40007000
 80047ec:	42420440 	.word	0x42420440

080047f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	2300      	movs	r3, #0
 80047fe:	61fb      	str	r3, [r7, #28]
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b10      	cmp	r3, #16
 8004810:	d00a      	beq.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b10      	cmp	r3, #16
 8004816:	f200 808a 	bhi.w	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d045      	beq.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d075      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004826:	e082      	b.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004828:	4b46      	ldr	r3, [pc, #280]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800482e:	4b45      	ldr	r3, [pc, #276]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d07b      	beq.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	0c9b      	lsrs	r3, r3, #18
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	4a41      	ldr	r2, [pc, #260]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004844:	5cd3      	ldrb	r3, [r2, r3]
 8004846:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d015      	beq.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004852:	4b3c      	ldr	r3, [pc, #240]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	0c5b      	lsrs	r3, r3, #17
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	4a3b      	ldr	r2, [pc, #236]	; (800494c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800485e:	5cd3      	ldrb	r3, [r2, r3]
 8004860:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00d      	beq.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800486c:	4a38      	ldr	r2, [pc, #224]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	fbb2 f2f3 	udiv	r2, r2, r3
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e004      	b.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4a34      	ldr	r2, [pc, #208]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004888:	4b2e      	ldr	r3, [pc, #184]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004894:	d102      	bne.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	61bb      	str	r3, [r7, #24]
      break;
 800489a:	e04a      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	61bb      	str	r3, [r7, #24]
      break;
 80048aa:	e042      	b.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80048ac:	4b25      	ldr	r3, [pc, #148]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048bc:	d108      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80048c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	e01f      	b.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048da:	d109      	bne.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80048e8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	e00f      	b.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048fa:	d11c      	bne.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d016      	beq.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004908:	f24f 4324 	movw	r3, #62500	; 0xf424
 800490c:	61bb      	str	r3, [r7, #24]
      break;
 800490e:	e012      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004910:	e011      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004912:	f7ff fe85 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 8004916:	4602      	mov	r2, r0
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	0b9b      	lsrs	r3, r3, #14
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	3301      	adds	r3, #1
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	61bb      	str	r3, [r7, #24]
      break;
 800492c:	e004      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800492e:	bf00      	nop
 8004930:	e002      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004932:	bf00      	nop
 8004934:	e000      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004936:	bf00      	nop
    }
  }
  return (frequency);
 8004938:	69bb      	ldr	r3, [r7, #24]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40021000 	.word	0x40021000
 8004948:	0800ab3c 	.word	0x0800ab3c
 800494c:	0800ab4c 	.word	0x0800ab4c
 8004950:	007a1200 	.word	0x007a1200
 8004954:	003d0900 	.word	0x003d0900
 8004958:	aaaaaaab 	.word	0xaaaaaaab

0800495c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e076      	b.n	8004a5c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	d108      	bne.n	8004988 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800497e:	d009      	beq.n	8004994 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	61da      	str	r2, [r3, #28]
 8004986:	e005      	b.n	8004994 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc fd10 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	ea42 0103 	orr.w	r1, r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	0c1a      	lsrs	r2, r3, #16
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f002 0204 	and.w	r2, r2, #4
 8004a3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08c      	sub	sp, #48	; 0x30
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a72:	2301      	movs	r3, #1
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x26>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e198      	b.n	8004dbc <HAL_SPI_TransmitReceive+0x358>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a92:	f7fc fe6b 	bl	800176c <HAL_GetTick>
 8004a96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004aa8:	887b      	ldrh	r3, [r7, #2]
 8004aaa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d00f      	beq.n	8004ad4 <HAL_SPI_TransmitReceive+0x70>
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aba:	d107      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d103      	bne.n	8004acc <HAL_SPI_TransmitReceive+0x68>
 8004ac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d003      	beq.n	8004ad4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
 8004ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ad2:	e16d      	b.n	8004db0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <HAL_SPI_TransmitReceive+0x82>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_SPI_TransmitReceive+0x82>
 8004ae0:	887b      	ldrh	r3, [r7, #2]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004aec:	e160      	b.n	8004db0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d003      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2205      	movs	r2, #5
 8004afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	887a      	ldrh	r2, [r7, #2]
 8004b12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	887a      	ldrh	r2, [r7, #2]
 8004b18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	887a      	ldrh	r2, [r7, #2]
 8004b24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	887a      	ldrh	r2, [r7, #2]
 8004b2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d007      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5e:	d17c      	bne.n	8004c5a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x10a>
 8004b68:	8b7b      	ldrh	r3, [r7, #26]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d16a      	bne.n	8004c44 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	881a      	ldrh	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	1c9a      	adds	r2, r3, #2
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b92:	e057      	b.n	8004c44 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d11b      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x176>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d016      	beq.n	8004bda <HAL_SPI_TransmitReceive+0x176>
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d113      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	881a      	ldrh	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	1c9a      	adds	r2, r3, #2
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d119      	bne.n	8004c1c <HAL_SPI_TransmitReceive+0x1b8>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d014      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	1c9a      	adds	r2, r3, #2
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c1c:	f7fc fda6 	bl	800176c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d80b      	bhi.n	8004c44 <HAL_SPI_TransmitReceive+0x1e0>
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d007      	beq.n	8004c44 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004c42:	e0b5      	b.n	8004db0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1a2      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x130>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d19d      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x130>
 8004c58:	e080      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_SPI_TransmitReceive+0x204>
 8004c62:	8b7b      	ldrh	r3, [r7, #26]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d16f      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	330c      	adds	r3, #12
 8004c72:	7812      	ldrb	r2, [r2, #0]
 8004c74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c8e:	e05b      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d11c      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x274>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <HAL_SPI_TransmitReceive+0x274>
 8004ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d114      	bne.n	8004cd8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d119      	bne.n	8004d1a <HAL_SPI_TransmitReceive+0x2b6>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d014      	beq.n	8004d1a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d16:	2301      	movs	r3, #1
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d1a:	f7fc fd27 	bl	800176c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d803      	bhi.n	8004d32 <HAL_SPI_TransmitReceive+0x2ce>
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d102      	bne.n	8004d38 <HAL_SPI_TransmitReceive+0x2d4>
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d107      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d46:	e033      	b.n	8004db0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d19e      	bne.n	8004c90 <HAL_SPI_TransmitReceive+0x22c>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d199      	bne.n	8004c90 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f8b7 	bl	8004ed4 <SPI_EndRxTxTransaction>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d006      	beq.n	8004d7a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004d78:	e01a      	b.n	8004db0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da6:	e003      	b.n	8004db0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004db8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3730      	adds	r7, #48	; 0x30
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dd4:	f7fc fcca 	bl	800176c <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	4413      	add	r3, r2
 8004de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004de4:	f7fc fcc2 	bl	800176c <HAL_GetTick>
 8004de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dea:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	015b      	lsls	r3, r3, #5
 8004df0:	0d1b      	lsrs	r3, r3, #20
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	fb02 f303 	mul.w	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dfa:	e054      	b.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d050      	beq.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e04:	f7fc fcb2 	bl	800176c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d902      	bls.n	8004e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d13d      	bne.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e32:	d111      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3c:	d004      	beq.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e46:	d107      	bne.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e60:	d10f      	bne.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e017      	b.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d19b      	bne.n	8004dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000000 	.word	0x20000000

08004ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2180      	movs	r1, #128	; 0x80
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f7ff ff6a 	bl	8004dc4 <SPI_WaitFlagStateUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efa:	f043 0220 	orr.w	r2, r3, #32
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e000      	b.n	8004f08 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e041      	b.n	8004fa6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fc fa98 	bl	800146c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f000 f990 	bl	8005274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <HAL_TIM_OC_Start+0x24>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	bf14      	ite	ne
 8004fcc:	2301      	movne	r3, #1
 8004fce:	2300      	moveq	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	e022      	b.n	800501a <HAL_TIM_OC_Start+0x6a>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d109      	bne.n	8004fee <HAL_TIM_OC_Start+0x3e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	bf14      	ite	ne
 8004fe6:	2301      	movne	r3, #1
 8004fe8:	2300      	moveq	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	e015      	b.n	800501a <HAL_TIM_OC_Start+0x6a>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d109      	bne.n	8005008 <HAL_TIM_OC_Start+0x58>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	bf14      	ite	ne
 8005000:	2301      	movne	r3, #1
 8005002:	2300      	moveq	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	e008      	b.n	800501a <HAL_TIM_OC_Start+0x6a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	bf14      	ite	ne
 8005014:	2301      	movne	r3, #1
 8005016:	2300      	moveq	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e05e      	b.n	80050e0 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d104      	bne.n	8005032 <HAL_TIM_OC_Start+0x82>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005030:	e013      	b.n	800505a <HAL_TIM_OC_Start+0xaa>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b04      	cmp	r3, #4
 8005036:	d104      	bne.n	8005042 <HAL_TIM_OC_Start+0x92>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005040:	e00b      	b.n	800505a <HAL_TIM_OC_Start+0xaa>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b08      	cmp	r3, #8
 8005046:	d104      	bne.n	8005052 <HAL_TIM_OC_Start+0xa2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005050:	e003      	b.n	800505a <HAL_TIM_OC_Start+0xaa>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2202      	movs	r2, #2
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2201      	movs	r2, #1
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f000 faf0 	bl	8005648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <HAL_TIM_OC_Start+0x138>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d107      	bne.n	8005082 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005080:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a18      	ldr	r2, [pc, #96]	; (80050e8 <HAL_TIM_OC_Start+0x138>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00e      	beq.n	80050aa <HAL_TIM_OC_Start+0xfa>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d009      	beq.n	80050aa <HAL_TIM_OC_Start+0xfa>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a14      	ldr	r2, [pc, #80]	; (80050ec <HAL_TIM_OC_Start+0x13c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d004      	beq.n	80050aa <HAL_TIM_OC_Start+0xfa>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <HAL_TIM_OC_Start+0x140>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d111      	bne.n	80050ce <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b06      	cmp	r3, #6
 80050ba:	d010      	beq.n	80050de <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050cc:	e007      	b.n	80050de <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0201 	orr.w	r2, r2, #1
 80050dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40000400 	.word	0x40000400
 80050f0:	40000800 	.word	0x40000800

080050f4 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2200      	movs	r2, #0
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fa9e 	bl	8005648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a29      	ldr	r2, [pc, #164]	; (80051b8 <HAL_TIM_OC_Stop+0xc4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d117      	bne.n	8005146 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6a1a      	ldr	r2, [r3, #32]
 800511c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10f      	bne.n	8005146 <HAL_TIM_OC_Stop+0x52>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	f240 4344 	movw	r3, #1092	; 0x444
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d107      	bne.n	8005146 <HAL_TIM_OC_Stop+0x52>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10f      	bne.n	8005176 <HAL_TIM_OC_Stop+0x82>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6a1a      	ldr	r2, [r3, #32]
 800515c:	f240 4344 	movw	r3, #1092	; 0x444
 8005160:	4013      	ands	r3, r2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d107      	bne.n	8005176 <HAL_TIM_OC_Stop+0x82>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0201 	bic.w	r2, r2, #1
 8005174:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_TIM_OC_Stop+0x92>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005184:	e013      	b.n	80051ae <HAL_TIM_OC_Stop+0xba>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d104      	bne.n	8005196 <HAL_TIM_OC_Stop+0xa2>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005194:	e00b      	b.n	80051ae <HAL_TIM_OC_Stop+0xba>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_OC_Stop+0xb2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a4:	e003      	b.n	80051ae <HAL_TIM_OC_Stop+0xba>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40012c00 	.word	0x40012c00

080051bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_TIM_OC_ConfigChannel+0x1e>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e048      	b.n	800526c <HAL_TIM_OC_ConfigChannel+0xb0>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	d839      	bhi.n	800525c <HAL_TIM_OC_ConfigChannel+0xa0>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005225 	.word	0x08005225
 80051f4:	0800525d 	.word	0x0800525d
 80051f8:	0800525d 	.word	0x0800525d
 80051fc:	0800525d 	.word	0x0800525d
 8005200:	08005233 	.word	0x08005233
 8005204:	0800525d 	.word	0x0800525d
 8005208:	0800525d 	.word	0x0800525d
 800520c:	0800525d 	.word	0x0800525d
 8005210:	08005241 	.word	0x08005241
 8005214:	0800525d 	.word	0x0800525d
 8005218:	0800525d 	.word	0x0800525d
 800521c:	0800525d 	.word	0x0800525d
 8005220:	0800524f 	.word	0x0800524f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 f884 	bl	8005338 <TIM_OC1_SetConfig>
      break;
 8005230:	e017      	b.n	8005262 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f8e3 	bl	8005404 <TIM_OC2_SetConfig>
      break;
 800523e:	e010      	b.n	8005262 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f946 	bl	80054d8 <TIM_OC3_SetConfig>
      break;
 800524c:	e009      	b.n	8005262 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 f9a9 	bl	80055ac <TIM_OC4_SetConfig>
      break;
 800525a:	e002      	b.n	8005262 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	75fb      	strb	r3, [r7, #23]
      break;
 8005260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800526a:	7dfb      	ldrb	r3, [r7, #23]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a29      	ldr	r2, [pc, #164]	; (800532c <TIM_Base_SetConfig+0xb8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00b      	beq.n	80052a4 <TIM_Base_SetConfig+0x30>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d007      	beq.n	80052a4 <TIM_Base_SetConfig+0x30>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a26      	ldr	r2, [pc, #152]	; (8005330 <TIM_Base_SetConfig+0xbc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_Base_SetConfig+0x30>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a25      	ldr	r2, [pc, #148]	; (8005334 <TIM_Base_SetConfig+0xc0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d108      	bne.n	80052b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a1c      	ldr	r2, [pc, #112]	; (800532c <TIM_Base_SetConfig+0xb8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00b      	beq.n	80052d6 <TIM_Base_SetConfig+0x62>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c4:	d007      	beq.n	80052d6 <TIM_Base_SetConfig+0x62>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a19      	ldr	r2, [pc, #100]	; (8005330 <TIM_Base_SetConfig+0xbc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d003      	beq.n	80052d6 <TIM_Base_SetConfig+0x62>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a18      	ldr	r2, [pc, #96]	; (8005334 <TIM_Base_SetConfig+0xc0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d108      	bne.n	80052e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a07      	ldr	r2, [pc, #28]	; (800532c <TIM_Base_SetConfig+0xb8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d103      	bne.n	800531c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	615a      	str	r2, [r3, #20]
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	40012c00 	.word	0x40012c00
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800

08005338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f023 0201 	bic.w	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 0302 	bic.w	r3, r3, #2
 8005380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a1c      	ldr	r2, [pc, #112]	; (8005400 <TIM_OC1_SetConfig+0xc8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10c      	bne.n	80053ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0308 	bic.w	r3, r3, #8
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 0304 	bic.w	r3, r3, #4
 80053ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a13      	ldr	r2, [pc, #76]	; (8005400 <TIM_OC1_SetConfig+0xc8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d111      	bne.n	80053da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40012c00 	.word	0x40012c00

08005404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f023 0210 	bic.w	r2, r3, #16
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0320 	bic.w	r3, r3, #32
 800544e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <TIM_OC2_SetConfig+0xd0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d10d      	bne.n	8005480 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800547e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC2_SetConfig+0xd0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d113      	bne.n	80054b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800548e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005496:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr
 80054d4:	40012c00 	.word	0x40012c00

080054d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0303 	bic.w	r3, r3, #3
 800550e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1d      	ldr	r2, [pc, #116]	; (80055a8 <TIM_OC3_SetConfig+0xd0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10d      	bne.n	8005552 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800553c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a14      	ldr	r2, [pc, #80]	; (80055a8 <TIM_OC3_SetConfig+0xd0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d113      	bne.n	8005582 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	621a      	str	r2, [r3, #32]
}
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40012c00 	.word	0x40012c00

080055ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a0f      	ldr	r2, [pc, #60]	; (8005644 <TIM_OC4_SetConfig+0x98>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	019b      	lsls	r3, r3, #6
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr
 8005644:	40012c00 	.word	0x40012c00

08005648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2201      	movs	r2, #1
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1a      	ldr	r2, [r3, #32]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	43db      	mvns	r3, r3
 800566a:	401a      	ands	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	431a      	orrs	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e046      	b.n	8005736 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a16      	ldr	r2, [pc, #88]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00e      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f4:	d009      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a12      	ldr	r2, [pc, #72]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a10      	ldr	r2, [pc, #64]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d10c      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800

0800574c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e042      	b.n	80057e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fb fe98 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	; 0x24
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800578e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fd09 	bl	80061a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b20      	cmp	r3, #32
 8005804:	d121      	bne.n	800584a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_UART_Transmit_IT+0x26>
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e01a      	b.n	800584c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	88fa      	ldrh	r2, [r7, #6]
 8005820:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2221      	movs	r2, #33	; 0x21
 8005832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005844:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	e000      	b.n	800584c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800584a:	2302      	movs	r3, #2
  }
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr

08005856 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	4613      	mov	r3, r2
 8005862:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b20      	cmp	r3, #32
 800586e:	d112      	bne.n	8005896 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_UART_Receive_IT+0x26>
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e00b      	b.n	8005898 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	461a      	mov	r2, r3
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 fab6 	bl	8005dfe <UART_Start_Receive_IT>
 8005892:	4603      	mov	r3, r0
 8005894:	e000      	b.n	8005898 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005896:	2302      	movs	r3, #2
  }
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b0ba      	sub	sp, #232	; 0xe8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10f      	bne.n	8005906 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d009      	beq.n	8005906 <HAL_UART_IRQHandler+0x66>
 80058f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fb93 	bl	800602a <UART_Receive_IT>
      return;
 8005904:	e25b      	b.n	8005dbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80de 	beq.w	8005acc <HAL_UART_IRQHandler+0x22c>
 8005910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005920:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 80d1 	beq.w	8005acc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00b      	beq.n	800594e <HAL_UART_IRQHandler+0xae>
 8005936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	f043 0201 	orr.w	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_UART_IRQHandler+0xd2>
 800595a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596a:	f043 0202 	orr.w	r2, r3, #2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <HAL_UART_IRQHandler+0xf6>
 800597e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	f043 0204 	orr.w	r2, r3, #4
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d011      	beq.n	80059c6 <HAL_UART_IRQHandler+0x126>
 80059a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d105      	bne.n	80059ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	f043 0208 	orr.w	r2, r3, #8
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 81f2 	beq.w	8005db4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_UART_IRQHandler+0x14e>
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fb1e 	bl	800602a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bf14      	ite	ne
 80059fc:	2301      	movne	r3, #1
 80059fe:	2300      	moveq	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <HAL_UART_IRQHandler+0x17a>
 8005a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04f      	beq.n	8005aba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fa28 	bl	8005e70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d041      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3314      	adds	r3, #20
 8005a34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1d9      	bne.n	8005a2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d013      	beq.n	8005aaa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a86:	4a7e      	ldr	r2, [pc, #504]	; (8005c80 <HAL_UART_IRQHandler+0x3e0>)
 8005a88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fc fe24 	bl	80026dc <HAL_DMA_Abort_IT>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	e00e      	b.n	8005ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f993 	bl	8005dd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	e00a      	b.n	8005ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f98f 	bl	8005dd6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e006      	b.n	8005ac8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f98b 	bl	8005dd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005ac6:	e175      	b.n	8005db4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	bf00      	nop
    return;
 8005aca:	e173      	b.n	8005db4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	f040 814f 	bne.w	8005d74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8148 	beq.w	8005d74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8141 	beq.w	8005d74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80b6 	beq.w	8005c84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 8145 	beq.w	8005db8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b36:	429a      	cmp	r2, r3
 8005b38:	f080 813e 	bcs.w	8005db8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	f000 8088 	beq.w	8005c60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1d9      	bne.n	8005b50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3314      	adds	r3, #20
 8005ba2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3314      	adds	r3, #20
 8005bbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e1      	bne.n	8005b9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3314      	adds	r3, #20
 8005bde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3314      	adds	r3, #20
 8005bf8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bfc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e3      	bne.n	8005bd8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c30:	f023 0310 	bic.w	r3, r3, #16
 8005c34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c42:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e3      	bne.n	8005c1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fc fd02 	bl	8002664 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f8b6 	bl	8005de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c7c:	e09c      	b.n	8005db8 <HAL_UART_IRQHandler+0x518>
 8005c7e:	bf00      	nop
 8005c80:	08005f35 	.word	0x08005f35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 808e 	beq.w	8005dbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8089 	beq.w	8005dbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	330c      	adds	r3, #12
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005cce:	647a      	str	r2, [r7, #68]	; 0x44
 8005cd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e3      	bne.n	8005caa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3314      	adds	r3, #20
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	f023 0301 	bic.w	r3, r3, #1
 8005cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3314      	adds	r3, #20
 8005d02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d06:	633a      	str	r2, [r7, #48]	; 0x30
 8005d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e3      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	e853 3f00 	ldrex	r3, [r3]
 8005d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0310 	bic.w	r3, r3, #16
 8005d3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	330c      	adds	r3, #12
 8005d48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d4c:	61fa      	str	r2, [r7, #28]
 8005d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	69b9      	ldr	r1, [r7, #24]
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	617b      	str	r3, [r7, #20]
   return(result);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e3      	bne.n	8005d28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f83b 	bl	8005de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d72:	e023      	b.n	8005dbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d009      	beq.n	8005d94 <HAL_UART_IRQHandler+0x4f4>
 8005d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8e5 	bl	8005f5c <UART_Transmit_IT>
    return;
 8005d92:	e014      	b.n	8005dbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00e      	beq.n	8005dbe <HAL_UART_IRQHandler+0x51e>
 8005da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d008      	beq.n	8005dbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f924 	bl	8005ffa <UART_EndTransmit_IT>
    return;
 8005db2:	e004      	b.n	8005dbe <HAL_UART_IRQHandler+0x51e>
    return;
 8005db4:	bf00      	nop
 8005db6:	e002      	b.n	8005dbe <HAL_UART_IRQHandler+0x51e>
      return;
 8005db8:	bf00      	nop
 8005dba:	e000      	b.n	8005dbe <HAL_UART_IRQHandler+0x51e>
      return;
 8005dbc:	bf00      	nop
  }
}
 8005dbe:	37e8      	adds	r7, #232	; 0xe8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bc80      	pop	{r7}
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr

08005de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr

08005dfe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	88fa      	ldrh	r2, [r7, #6]
 8005e16:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	88fa      	ldrh	r2, [r7, #6]
 8005e1c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2222      	movs	r2, #34	; 0x22
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e42:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0220 	orr.w	r2, r2, #32
 8005e62:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b095      	sub	sp, #84	; 0x54
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e98:	643a      	str	r2, [r7, #64]	; 0x40
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e5      	bne.n	8005e78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3314      	adds	r3, #20
 8005eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3314      	adds	r3, #20
 8005eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ecc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e5      	bne.n	8005eac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d119      	bne.n	8005f1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	330c      	adds	r3, #12
 8005eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f023 0310 	bic.w	r3, r3, #16
 8005efe:	647b      	str	r3, [r7, #68]	; 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f08:	61ba      	str	r2, [r7, #24]
 8005f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6979      	ldr	r1, [r7, #20]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	613b      	str	r3, [r7, #16]
   return(result);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e5      	bne.n	8005ee8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f2a:	bf00      	nop
 8005f2c:	3754      	adds	r7, #84	; 0x54
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff ff41 	bl	8005dd6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	2b21      	cmp	r3, #33	; 0x21
 8005f6e:	d13e      	bne.n	8005fee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f78:	d114      	bne.n	8005fa4 <UART_Transmit_IT+0x48>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d110      	bne.n	8005fa4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	1c9a      	adds	r2, r3, #2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	621a      	str	r2, [r3, #32]
 8005fa2:	e008      	b.n	8005fb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	1c59      	adds	r1, r3, #1
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6211      	str	r1, [r2, #32]
 8005fae:	781a      	ldrb	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e000      	b.n	8005ff0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fee:	2302      	movs	r3, #2
  }
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr

08005ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fed2 	bl	8005dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b08c      	sub	sp, #48	; 0x30
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b22      	cmp	r3, #34	; 0x22
 800603c:	f040 80ae 	bne.w	800619c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006048:	d117      	bne.n	800607a <UART_Receive_IT+0x50>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d113      	bne.n	800607a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006068:	b29a      	uxth	r2, r3
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	1c9a      	adds	r2, r3, #2
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	629a      	str	r2, [r3, #40]	; 0x28
 8006078:	e026      	b.n	80060c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006080:	2300      	movs	r3, #0
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608c:	d007      	beq.n	800609e <UART_Receive_IT+0x74>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10a      	bne.n	80060ac <UART_Receive_IT+0x82>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e008      	b.n	80060be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	4619      	mov	r1, r3
 80060d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d15d      	bne.n	8006198 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0220 	bic.w	r2, r2, #32
 80060ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695a      	ldr	r2, [r3, #20]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	2b01      	cmp	r3, #1
 8006120:	d135      	bne.n	800618e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	613b      	str	r3, [r7, #16]
   return(result);
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f023 0310 	bic.w	r3, r3, #16
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006148:	623a      	str	r2, [r7, #32]
 800614a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	6a3a      	ldr	r2, [r7, #32]
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	61bb      	str	r3, [r7, #24]
   return(result);
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e5      	bne.n	8006128 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2b10      	cmp	r3, #16
 8006168:	d10a      	bne.n	8006180 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fe2e 	bl	8005de8 <HAL_UARTEx_RxEventCallback>
 800618c:	e002      	b.n	8006194 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fa fcf6 	bl	8000b80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	e002      	b.n	800619e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	e000      	b.n	800619e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800619c:	2302      	movs	r3, #2
  }
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3730      	adds	r7, #48	; 0x30
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80061e2:	f023 030c 	bic.w	r3, r3, #12
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	6812      	ldr	r2, [r2, #0]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	430b      	orrs	r3, r1
 80061ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a2c      	ldr	r2, [pc, #176]	; (80062bc <UART_SetConfig+0x114>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d103      	bne.n	8006218 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006210:	f7fe fa06 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	e002      	b.n	800621e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006218:	f7fe f9ee 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 800621c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	009a      	lsls	r2, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	4a22      	ldr	r2, [pc, #136]	; (80062c0 <UART_SetConfig+0x118>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	0119      	lsls	r1, r3, #4
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009a      	lsls	r2, r3, #2
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	fbb2 f2f3 	udiv	r2, r2, r3
 8006254:	4b1a      	ldr	r3, [pc, #104]	; (80062c0 <UART_SetConfig+0x118>)
 8006256:	fba3 0302 	umull	r0, r3, r3, r2
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	2064      	movs	r0, #100	; 0x64
 800625e:	fb00 f303 	mul.w	r3, r0, r3
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	3332      	adds	r3, #50	; 0x32
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <UART_SetConfig+0x118>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006274:	4419      	add	r1, r3
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009a      	lsls	r2, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	fbb2 f2f3 	udiv	r2, r2, r3
 800628c:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <UART_SetConfig+0x118>)
 800628e:	fba3 0302 	umull	r0, r3, r3, r2
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	2064      	movs	r0, #100	; 0x64
 8006296:	fb00 f303 	mul.w	r3, r0, r3
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	3332      	adds	r3, #50	; 0x32
 80062a0:	4a07      	ldr	r2, [pc, #28]	; (80062c0 <UART_SetConfig+0x118>)
 80062a2:	fba2 2303 	umull	r2, r3, r2, r3
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	f003 020f 	and.w	r2, r3, #15
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	440a      	add	r2, r1
 80062b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40013800 	.word	0x40013800
 80062c0:	51eb851f 	.word	0x51eb851f

080062c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80062c8:	4904      	ldr	r1, [pc, #16]	; (80062dc <MX_FATFS_Init+0x18>)
 80062ca:	4805      	ldr	r0, [pc, #20]	; (80062e0 <MX_FATFS_Init+0x1c>)
 80062cc:	f003 f980 	bl	80095d0 <FATFS_LinkDriver>
 80062d0:	4603      	mov	r3, r0
 80062d2:	461a      	mov	r2, r3
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <MX_FATFS_Init+0x20>)
 80062d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80062d8:	bf00      	nop
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	200012e0 	.word	0x200012e0
 80062e0:	2000000c 	.word	0x2000000c
 80062e4:	200012dc 	.word	0x200012dc

080062e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80062ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr
	...

080062f8 <MX_FATFS_DeInit>:

/* USER CODE BEGIN Application */
void MX_FATFS_DeInit(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
	retUSER = FATFS_UnLinkDriver(USERPath);
 80062fc:	4804      	ldr	r0, [pc, #16]	; (8006310 <MX_FATFS_DeInit+0x18>)
 80062fe:	f003 f9ad 	bl	800965c <FATFS_UnLinkDriver>
 8006302:	4603      	mov	r3, r0
 8006304:	461a      	mov	r2, r3
 8006306:	4b03      	ldr	r3, [pc, #12]	; (8006314 <MX_FATFS_DeInit+0x1c>)
 8006308:	701a      	strb	r2, [r3, #0]
}
 800630a:	bf00      	nop
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200012e0 	.word	0x200012e0
 8006314:	200012dc 	.word	0x200012dc

08006318 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	4618      	mov	r0, r3
 8006326:	f000 f9dd 	bl	80066e4 <USER_SPI_initialize>
 800632a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fabb 	bl	80068bc <USER_SPI_status>
 8006346:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
 800635a:	603b      	str	r3, [r7, #0]
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8006360:	7bf8      	ldrb	r0, [r7, #15]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	f000 fabc 	bl	80068e4 <USER_SPI_read>
 800636c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	4603      	mov	r3, r0
 8006384:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8006386:	7bf8      	ldrb	r0, [r7, #15]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	f000 fb0f 	bl	80069b0 <USER_SPI_write>
 8006392:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	603a      	str	r2, [r7, #0]
 80063a6:	71fb      	strb	r3, [r7, #7]
 80063a8:	460b      	mov	r3, r1
 80063aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80063ac:	79b9      	ldrb	r1, [r7, #6]
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fb78 	bl	8006aa8 <USER_SPI_ioctl>
 80063b8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80063cc:	f7fb f9ce 	bl	800176c <HAL_GetTick>
 80063d0:	4603      	mov	r3, r0
 80063d2:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <SPI_Timer_On+0x20>)
 80063d4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80063d6:	4a04      	ldr	r2, [pc, #16]	; (80063e8 <SPI_Timer_On+0x24>)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6013      	str	r3, [r2, #0]
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	200012e8 	.word	0x200012e8
 80063e8:	200012ec 	.word	0x200012ec

080063ec <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80063f0:	f7fb f9bc 	bl	800176c <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <SPI_Timer_Status+0x24>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	1ad2      	subs	r2, r2, r3
 80063fc:	4b05      	ldr	r3, [pc, #20]	; (8006414 <SPI_Timer_Status+0x28>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	bf34      	ite	cc
 8006404:	2301      	movcc	r3, #1
 8006406:	2300      	movcs	r3, #0
 8006408:	b2db      	uxtb	r3, r3
}
 800640a:	4618      	mov	r0, r3
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	200012e8 	.word	0x200012e8
 8006414:	200012ec 	.word	0x200012ec

08006418 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af02      	add	r7, sp, #8
 800641e:	4603      	mov	r3, r0
 8006420:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006422:	f107 020f 	add.w	r2, r7, #15
 8006426:	1df9      	adds	r1, r7, #7
 8006428:	2332      	movs	r3, #50	; 0x32
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	2301      	movs	r3, #1
 800642e:	4804      	ldr	r0, [pc, #16]	; (8006440 <xchg_spi+0x28>)
 8006430:	f7fe fb18 	bl	8004a64 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3710      	adds	r7, #16
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	2000015c 	.word	0x2000015c

08006444 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006444:	b590      	push	{r4, r7, lr}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e00a      	b.n	800646a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	18d4      	adds	r4, r2, r3
 800645a:	20ff      	movs	r0, #255	; 0xff
 800645c:	f7ff ffdc 	bl	8006418 <xchg_spi>
 8006460:	4603      	mov	r3, r0
 8006462:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d3f0      	bcc.n	8006454 <rcvr_spi_multi+0x10>
	}
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	bd90      	pop	{r4, r7, pc}

0800647c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	e009      	b.n	80064a0 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ffbf 	bl	8006418 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d3f1      	bcc.n	800648c <xmit_spi_multi+0x10>
	}
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b086      	sub	sp, #24
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80064ba:	f7fb f957 	bl	800176c <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80064c4:	20ff      	movs	r0, #255	; 0xff
 80064c6:	f7ff ffa7 	bl	8006418 <xchg_spi>
 80064ca:	4603      	mov	r3, r0
 80064cc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	2bff      	cmp	r3, #255	; 0xff
 80064d2:	d007      	beq.n	80064e4 <wait_ready+0x32>
 80064d4:	f7fb f94a 	bl	800176c <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d8ef      	bhi.n	80064c4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2bff      	cmp	r3, #255	; 0xff
 80064e8:	bf0c      	ite	eq
 80064ea:	2301      	moveq	r3, #1
 80064ec:	2300      	movne	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80064fc:	2201      	movs	r2, #1
 80064fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006502:	4804      	ldr	r0, [pc, #16]	; (8006514 <despiselect+0x1c>)
 8006504:	f7fc fc31 	bl	8002d6a <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006508:	20ff      	movs	r0, #255	; 0xff
 800650a:	f7ff ff85 	bl	8006418 <xchg_spi>

}
 800650e:	bf00      	nop
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40010c00 	.word	0x40010c00

08006518 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800651c:	2200      	movs	r2, #0
 800651e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006522:	480a      	ldr	r0, [pc, #40]	; (800654c <spiselect+0x34>)
 8006524:	f7fc fc21 	bl	8002d6a <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006528:	20ff      	movs	r0, #255	; 0xff
 800652a:	f7ff ff75 	bl	8006418 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800652e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006532:	f7ff ffbe 	bl	80064b2 <wait_ready>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <spiselect+0x28>
 800653c:	2301      	movs	r3, #1
 800653e:	e002      	b.n	8006546 <spiselect+0x2e>

	despiselect();
 8006540:	f7ff ffda 	bl	80064f8 <despiselect>
	return 0;	/* Timeout */
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40010c00 	.word	0x40010c00

08006550 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800655a:	20c8      	movs	r0, #200	; 0xc8
 800655c:	f7ff ff32 	bl	80063c4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006560:	20ff      	movs	r0, #255	; 0xff
 8006562:	f7ff ff59 	bl	8006418 <xchg_spi>
 8006566:	4603      	mov	r3, r0
 8006568:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	2bff      	cmp	r3, #255	; 0xff
 800656e:	d104      	bne.n	800657a <rcvr_datablock+0x2a>
 8006570:	f7ff ff3c 	bl	80063ec <SPI_Timer_Status>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f2      	bne.n	8006560 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2bfe      	cmp	r3, #254	; 0xfe
 800657e:	d001      	beq.n	8006584 <rcvr_datablock+0x34>
 8006580:	2300      	movs	r3, #0
 8006582:	e00a      	b.n	800659a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff ff5c 	bl	8006444 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800658c:	20ff      	movs	r0, #255	; 0xff
 800658e:	f7ff ff43 	bl	8006418 <xchg_spi>
 8006592:	20ff      	movs	r0, #255	; 0xff
 8006594:	f7ff ff40 	bl	8006418 <xchg_spi>

	return 1;						/* Function succeeded */
 8006598:	2301      	movs	r3, #1
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80065ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80065b2:	f7ff ff7e 	bl	80064b2 <wait_ready>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <xmit_datablock+0x1e>
 80065bc:	2300      	movs	r3, #0
 80065be:	e01e      	b.n	80065fe <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff ff28 	bl	8006418 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	2bfd      	cmp	r3, #253	; 0xfd
 80065cc:	d016      	beq.n	80065fc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80065ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff ff52 	bl	800647c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80065d8:	20ff      	movs	r0, #255	; 0xff
 80065da:	f7ff ff1d 	bl	8006418 <xchg_spi>
 80065de:	20ff      	movs	r0, #255	; 0xff
 80065e0:	f7ff ff1a 	bl	8006418 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80065e4:	20ff      	movs	r0, #255	; 0xff
 80065e6:	f7ff ff17 	bl	8006418 <xchg_spi>
 80065ea:	4603      	mov	r3, r0
 80065ec:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	f003 031f 	and.w	r3, r3, #31
 80065f4:	2b05      	cmp	r3, #5
 80065f6:	d001      	beq.n	80065fc <xmit_datablock+0x5a>
 80065f8:	2300      	movs	r3, #0
 80065fa:	e000      	b.n	80065fe <xmit_datablock+0x5c>
	}
	return 1;
 80065fc:	2301      	movs	r3, #1
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	4603      	mov	r3, r0
 800660e:	6039      	str	r1, [r7, #0]
 8006610:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006616:	2b00      	cmp	r3, #0
 8006618:	da0e      	bge.n	8006638 <send_cmd+0x32>
		cmd &= 0x7F;
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006620:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006622:	2100      	movs	r1, #0
 8006624:	2037      	movs	r0, #55	; 0x37
 8006626:	f7ff ffee 	bl	8006606 <send_cmd>
 800662a:	4603      	mov	r3, r0
 800662c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d901      	bls.n	8006638 <send_cmd+0x32>
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	e051      	b.n	80066dc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	2b0c      	cmp	r3, #12
 800663c:	d008      	beq.n	8006650 <send_cmd+0x4a>
		despiselect();
 800663e:	f7ff ff5b 	bl	80064f8 <despiselect>
		if (!spiselect()) return 0xFF;
 8006642:	f7ff ff69 	bl	8006518 <spiselect>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <send_cmd+0x4a>
 800664c:	23ff      	movs	r3, #255	; 0xff
 800664e:	e045      	b.n	80066dc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006656:	b2db      	uxtb	r3, r3
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff fedd 	bl	8006418 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	0e1b      	lsrs	r3, r3, #24
 8006662:	b2db      	uxtb	r3, r3
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff fed7 	bl	8006418 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	b2db      	uxtb	r3, r3
 8006670:	4618      	mov	r0, r3
 8006672:	f7ff fed1 	bl	8006418 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	0a1b      	lsrs	r3, r3, #8
 800667a:	b2db      	uxtb	r3, r3
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fecb 	bl	8006418 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	b2db      	uxtb	r3, r3
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fec6 	bl	8006418 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800668c:	2301      	movs	r3, #1
 800668e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <send_cmd+0x94>
 8006696:	2395      	movs	r3, #149	; 0x95
 8006698:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	2b08      	cmp	r3, #8
 800669e:	d101      	bne.n	80066a4 <send_cmd+0x9e>
 80066a0:	2387      	movs	r3, #135	; 0x87
 80066a2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff feb6 	bl	8006418 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80066ac:	79fb      	ldrb	r3, [r7, #7]
 80066ae:	2b0c      	cmp	r3, #12
 80066b0:	d102      	bne.n	80066b8 <send_cmd+0xb2>
 80066b2:	20ff      	movs	r0, #255	; 0xff
 80066b4:	f7ff feb0 	bl	8006418 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80066b8:	230a      	movs	r3, #10
 80066ba:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80066bc:	20ff      	movs	r0, #255	; 0xff
 80066be:	f7ff feab 	bl	8006418 <xchg_spi>
 80066c2:	4603      	mov	r3, r0
 80066c4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80066c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	da05      	bge.n	80066da <send_cmd+0xd4>
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1f0      	bne.n	80066bc <send_cmd+0xb6>

	return res;							/* Return received response */
 80066da:	7bbb      	ldrb	r3, [r7, #14]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80066e4:	b590      	push	{r4, r7, lr}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <USER_SPI_initialize+0x14>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e0d6      	b.n	80068a6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80066f8:	4b6d      	ldr	r3, [pc, #436]	; (80068b0 <USER_SPI_initialize+0x1cc>)
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <USER_SPI_initialize+0x2a>
 8006706:	4b6a      	ldr	r3, [pc, #424]	; (80068b0 <USER_SPI_initialize+0x1cc>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	e0cb      	b.n	80068a6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800670e:	4b69      	ldr	r3, [pc, #420]	; (80068b4 <USER_SPI_initialize+0x1d0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006718:	4b66      	ldr	r3, [pc, #408]	; (80068b4 <USER_SPI_initialize+0x1d0>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006720:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006722:	230a      	movs	r3, #10
 8006724:	73fb      	strb	r3, [r7, #15]
 8006726:	e005      	b.n	8006734 <USER_SPI_initialize+0x50>
 8006728:	20ff      	movs	r0, #255	; 0xff
 800672a:	f7ff fe75 	bl	8006418 <xchg_spi>
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	3b01      	subs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1f6      	bne.n	8006728 <USER_SPI_initialize+0x44>

	ty = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800673e:	2100      	movs	r1, #0
 8006740:	2000      	movs	r0, #0
 8006742:	f7ff ff60 	bl	8006606 <send_cmd>
 8006746:	4603      	mov	r3, r0
 8006748:	2b01      	cmp	r3, #1
 800674a:	f040 808b 	bne.w	8006864 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800674e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006752:	f7ff fe37 	bl	80063c4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006756:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800675a:	2008      	movs	r0, #8
 800675c:	f7ff ff53 	bl	8006606 <send_cmd>
 8006760:	4603      	mov	r3, r0
 8006762:	2b01      	cmp	r3, #1
 8006764:	d151      	bne.n	800680a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006766:	2300      	movs	r3, #0
 8006768:	73fb      	strb	r3, [r7, #15]
 800676a:	e00d      	b.n	8006788 <USER_SPI_initialize+0xa4>
 800676c:	7bfc      	ldrb	r4, [r7, #15]
 800676e:	20ff      	movs	r0, #255	; 0xff
 8006770:	f7ff fe52 	bl	8006418 <xchg_spi>
 8006774:	4603      	mov	r3, r0
 8006776:	461a      	mov	r2, r3
 8006778:	f104 0310 	add.w	r3, r4, #16
 800677c:	443b      	add	r3, r7
 800677e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006782:	7bfb      	ldrb	r3, [r7, #15]
 8006784:	3301      	adds	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
 8006788:	7bfb      	ldrb	r3, [r7, #15]
 800678a:	2b03      	cmp	r3, #3
 800678c:	d9ee      	bls.n	800676c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800678e:	7abb      	ldrb	r3, [r7, #10]
 8006790:	2b01      	cmp	r3, #1
 8006792:	d167      	bne.n	8006864 <USER_SPI_initialize+0x180>
 8006794:	7afb      	ldrb	r3, [r7, #11]
 8006796:	2baa      	cmp	r3, #170	; 0xaa
 8006798:	d164      	bne.n	8006864 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800679a:	bf00      	nop
 800679c:	f7ff fe26 	bl	80063ec <SPI_Timer_Status>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <USER_SPI_initialize+0xd2>
 80067a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80067aa:	20a9      	movs	r0, #169	; 0xa9
 80067ac:	f7ff ff2b 	bl	8006606 <send_cmd>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f2      	bne.n	800679c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80067b6:	f7ff fe19 	bl	80063ec <SPI_Timer_Status>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d051      	beq.n	8006864 <USER_SPI_initialize+0x180>
 80067c0:	2100      	movs	r1, #0
 80067c2:	203a      	movs	r0, #58	; 0x3a
 80067c4:	f7ff ff1f 	bl	8006606 <send_cmd>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d14a      	bne.n	8006864 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
 80067d2:	e00d      	b.n	80067f0 <USER_SPI_initialize+0x10c>
 80067d4:	7bfc      	ldrb	r4, [r7, #15]
 80067d6:	20ff      	movs	r0, #255	; 0xff
 80067d8:	f7ff fe1e 	bl	8006418 <xchg_spi>
 80067dc:	4603      	mov	r3, r0
 80067de:	461a      	mov	r2, r3
 80067e0:	f104 0310 	add.w	r3, r4, #16
 80067e4:	443b      	add	r3, r7
 80067e6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
 80067ec:	3301      	adds	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d9ee      	bls.n	80067d4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80067f6:	7a3b      	ldrb	r3, [r7, #8]
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <USER_SPI_initialize+0x120>
 8006800:	230c      	movs	r3, #12
 8006802:	e000      	b.n	8006806 <USER_SPI_initialize+0x122>
 8006804:	2304      	movs	r3, #4
 8006806:	737b      	strb	r3, [r7, #13]
 8006808:	e02c      	b.n	8006864 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800680a:	2100      	movs	r1, #0
 800680c:	20a9      	movs	r0, #169	; 0xa9
 800680e:	f7ff fefa 	bl	8006606 <send_cmd>
 8006812:	4603      	mov	r3, r0
 8006814:	2b01      	cmp	r3, #1
 8006816:	d804      	bhi.n	8006822 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006818:	2302      	movs	r3, #2
 800681a:	737b      	strb	r3, [r7, #13]
 800681c:	23a9      	movs	r3, #169	; 0xa9
 800681e:	73bb      	strb	r3, [r7, #14]
 8006820:	e003      	b.n	800682a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006822:	2301      	movs	r3, #1
 8006824:	737b      	strb	r3, [r7, #13]
 8006826:	2301      	movs	r3, #1
 8006828:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800682a:	bf00      	nop
 800682c:	f7ff fdde 	bl	80063ec <SPI_Timer_Status>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <USER_SPI_initialize+0x162>
 8006836:	7bbb      	ldrb	r3, [r7, #14]
 8006838:	2100      	movs	r1, #0
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff fee3 	bl	8006606 <send_cmd>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f2      	bne.n	800682c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006846:	f7ff fdd1 	bl	80063ec <SPI_Timer_Status>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <USER_SPI_initialize+0x17c>
 8006850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006854:	2010      	movs	r0, #16
 8006856:	f7ff fed6 	bl	8006606 <send_cmd>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <USER_SPI_initialize+0x180>
				ty = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006864:	4a14      	ldr	r2, [pc, #80]	; (80068b8 <USER_SPI_initialize+0x1d4>)
 8006866:	7b7b      	ldrb	r3, [r7, #13]
 8006868:	7013      	strb	r3, [r2, #0]
	despiselect();
 800686a:	f7ff fe45 	bl	80064f8 <despiselect>

	if (ty) {			/* OK */
 800686e:	7b7b      	ldrb	r3, [r7, #13]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d012      	beq.n	800689a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006874:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <USER_SPI_initialize+0x1d0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800687e:	4b0d      	ldr	r3, [pc, #52]	; (80068b4 <USER_SPI_initialize+0x1d0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0210 	orr.w	r2, r2, #16
 8006886:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006888:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <USER_SPI_initialize+0x1cc>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	b2da      	uxtb	r2, r3
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <USER_SPI_initialize+0x1cc>)
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	e002      	b.n	80068a0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800689a:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <USER_SPI_initialize+0x1cc>)
 800689c:	2201      	movs	r2, #1
 800689e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80068a0:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <USER_SPI_initialize+0x1cc>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b2db      	uxtb	r3, r3
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd90      	pop	{r4, r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20000020 	.word	0x20000020
 80068b4:	2000015c 	.word	0x2000015c
 80068b8:	200012e4 	.word	0x200012e4

080068bc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <USER_SPI_status+0x14>
 80068cc:	2301      	movs	r3, #1
 80068ce:	e002      	b.n	80068d6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80068d0:	4b03      	ldr	r3, [pc, #12]	; (80068e0 <USER_SPI_status+0x24>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b2db      	uxtb	r3, r3
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	bc80      	pop	{r7}
 80068de:	4770      	bx	lr
 80068e0:	20000020 	.word	0x20000020

080068e4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	607a      	str	r2, [r7, #4]
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	4603      	mov	r3, r0
 80068f2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d102      	bne.n	8006900 <USER_SPI_read+0x1c>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <USER_SPI_read+0x20>
 8006900:	2304      	movs	r3, #4
 8006902:	e04d      	b.n	80069a0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006904:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <USER_SPI_read+0xc4>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <USER_SPI_read+0x32>
 8006912:	2303      	movs	r3, #3
 8006914:	e044      	b.n	80069a0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006916:	4b25      	ldr	r3, [pc, #148]	; (80069ac <USER_SPI_read+0xc8>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <USER_SPI_read+0x44>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	025b      	lsls	r3, r3, #9
 8006926:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d111      	bne.n	8006952 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	2011      	movs	r0, #17
 8006932:	f7ff fe68 	bl	8006606 <send_cmd>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d129      	bne.n	8006990 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800693c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006940:	68b8      	ldr	r0, [r7, #8]
 8006942:	f7ff fe05 	bl	8006550 <rcvr_datablock>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d021      	beq.n	8006990 <USER_SPI_read+0xac>
			count = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	e01e      	b.n	8006990 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	2012      	movs	r0, #18
 8006956:	f7ff fe56 	bl	8006606 <send_cmd>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d117      	bne.n	8006990 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006964:	68b8      	ldr	r0, [r7, #8]
 8006966:	f7ff fdf3 	bl	8006550 <rcvr_datablock>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <USER_SPI_read+0xa2>
				buff += 512;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006976:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	3b01      	subs	r3, #1
 800697c:	603b      	str	r3, [r7, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1ed      	bne.n	8006960 <USER_SPI_read+0x7c>
 8006984:	e000      	b.n	8006988 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006986:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006988:	2100      	movs	r1, #0
 800698a:	200c      	movs	r0, #12
 800698c:	f7ff fe3b 	bl	8006606 <send_cmd>
		}
	}
	despiselect();
 8006990:	f7ff fdb2 	bl	80064f8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	bf14      	ite	ne
 800699a:	2301      	movne	r3, #1
 800699c:	2300      	moveq	r3, #0
 800699e:	b2db      	uxtb	r3, r3
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000020 	.word	0x20000020
 80069ac:	200012e4 	.word	0x200012e4

080069b0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d102      	bne.n	80069cc <USER_SPI_write+0x1c>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <USER_SPI_write+0x20>
 80069cc:	2304      	movs	r3, #4
 80069ce:	e063      	b.n	8006a98 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80069d0:	4b33      	ldr	r3, [pc, #204]	; (8006aa0 <USER_SPI_write+0xf0>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <USER_SPI_write+0x32>
 80069de:	2303      	movs	r3, #3
 80069e0:	e05a      	b.n	8006a98 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80069e2:	4b2f      	ldr	r3, [pc, #188]	; (8006aa0 <USER_SPI_write+0xf0>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <USER_SPI_write+0x44>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e051      	b.n	8006a98 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80069f4:	4b2b      	ldr	r3, [pc, #172]	; (8006aa4 <USER_SPI_write+0xf4>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <USER_SPI_write+0x56>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	025b      	lsls	r3, r3, #9
 8006a04:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d110      	bne.n	8006a2e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	2018      	movs	r0, #24
 8006a10:	f7ff fdf9 	bl	8006606 <send_cmd>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d136      	bne.n	8006a88 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006a1a:	21fe      	movs	r1, #254	; 0xfe
 8006a1c:	68b8      	ldr	r0, [r7, #8]
 8006a1e:	f7ff fdc0 	bl	80065a2 <xmit_datablock>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d02f      	beq.n	8006a88 <USER_SPI_write+0xd8>
			count = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	e02c      	b.n	8006a88 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006a2e:	4b1d      	ldr	r3, [pc, #116]	; (8006aa4 <USER_SPI_write+0xf4>)
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	f003 0306 	and.w	r3, r3, #6
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <USER_SPI_write+0x92>
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	2097      	movs	r0, #151	; 0x97
 8006a3e:	f7ff fde2 	bl	8006606 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	2019      	movs	r0, #25
 8006a46:	f7ff fdde 	bl	8006606 <send_cmd>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d11b      	bne.n	8006a88 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006a50:	21fc      	movs	r1, #252	; 0xfc
 8006a52:	68b8      	ldr	r0, [r7, #8]
 8006a54:	f7ff fda5 	bl	80065a2 <xmit_datablock>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <USER_SPI_write+0xc4>
				buff += 512;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006a64:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1ee      	bne.n	8006a50 <USER_SPI_write+0xa0>
 8006a72:	e000      	b.n	8006a76 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006a74:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006a76:	21fd      	movs	r1, #253	; 0xfd
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f7ff fd92 	bl	80065a2 <xmit_datablock>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <USER_SPI_write+0xd8>
 8006a84:	2301      	movs	r3, #1
 8006a86:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006a88:	f7ff fd36 	bl	80064f8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bf14      	ite	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	2300      	moveq	r3, #0
 8006a96:	b2db      	uxtb	r3, r3
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000020 	.word	0x20000020
 8006aa4:	200012e4 	.word	0x200012e4

08006aa8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08c      	sub	sp, #48	; 0x30
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	4603      	mov	r3, r0
 8006ab0:	603a      	str	r2, [r7, #0]
 8006ab2:	71fb      	strb	r3, [r7, #7]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <USER_SPI_ioctl+0x1a>
 8006abe:	2304      	movs	r3, #4
 8006ac0:	e15a      	b.n	8006d78 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006ac2:	4baf      	ldr	r3, [pc, #700]	; (8006d80 <USER_SPI_ioctl+0x2d8>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <USER_SPI_ioctl+0x2c>
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e151      	b.n	8006d78 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006ada:	79bb      	ldrb	r3, [r7, #6]
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	f200 8136 	bhi.w	8006d4e <USER_SPI_ioctl+0x2a6>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <USER_SPI_ioctl+0x40>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006afd 	.word	0x08006afd
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006d4f 	.word	0x08006d4f
 8006af4:	08006bbd 	.word	0x08006bbd
 8006af8:	08006cb3 	.word	0x08006cb3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006afc:	f7ff fd0c 	bl	8006518 <spiselect>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8127 	beq.w	8006d56 <USER_SPI_ioctl+0x2ae>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006b0e:	e122      	b.n	8006d56 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006b10:	2100      	movs	r1, #0
 8006b12:	2009      	movs	r0, #9
 8006b14:	f7ff fd77 	bl	8006606 <send_cmd>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 811d 	bne.w	8006d5a <USER_SPI_ioctl+0x2b2>
 8006b20:	f107 030c 	add.w	r3, r7, #12
 8006b24:	2110      	movs	r1, #16
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fd12 	bl	8006550 <rcvr_datablock>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8113 	beq.w	8006d5a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006b34:	7b3b      	ldrb	r3, [r7, #12]
 8006b36:	099b      	lsrs	r3, r3, #6
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d111      	bne.n	8006b62 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006b3e:	7d7b      	ldrb	r3, [r7, #21]
 8006b40:	461a      	mov	r2, r3
 8006b42:	7d3b      	ldrb	r3, [r7, #20]
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	4413      	add	r3, r2
 8006b48:	461a      	mov	r2, r3
 8006b4a:	7cfb      	ldrb	r3, [r7, #19]
 8006b4c:	041b      	lsls	r3, r3, #16
 8006b4e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006b52:	4413      	add	r3, r2
 8006b54:	3301      	adds	r3, #1
 8006b56:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	029a      	lsls	r2, r3, #10
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	e028      	b.n	8006bb4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006b62:	7c7b      	ldrb	r3, [r7, #17]
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	7dbb      	ldrb	r3, [r7, #22]
 8006b6c:	09db      	lsrs	r3, r3, #7
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	7d7b      	ldrb	r3, [r7, #21]
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	f003 0306 	and.w	r3, r3, #6
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	4413      	add	r3, r2
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	3302      	adds	r3, #2
 8006b86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006b8a:	7d3b      	ldrb	r3, [r7, #20]
 8006b8c:	099b      	lsrs	r3, r3, #6
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	461a      	mov	r2, r3
 8006b92:	7cfb      	ldrb	r3, [r7, #19]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	7cbb      	ldrb	r3, [r7, #18]
 8006b9a:	029b      	lsls	r3, r3, #10
 8006b9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006ba6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006baa:	3b09      	subs	r3, #9
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	409a      	lsls	r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006bba:	e0ce      	b.n	8006d5a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006bbc:	4b71      	ldr	r3, [pc, #452]	; (8006d84 <USER_SPI_ioctl+0x2dc>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d031      	beq.n	8006c2c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006bc8:	2100      	movs	r1, #0
 8006bca:	208d      	movs	r0, #141	; 0x8d
 8006bcc:	f7ff fd1b 	bl	8006606 <send_cmd>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 80c3 	bne.w	8006d5e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006bd8:	20ff      	movs	r0, #255	; 0xff
 8006bda:	f7ff fc1d 	bl	8006418 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006bde:	f107 030c 	add.w	r3, r7, #12
 8006be2:	2110      	movs	r1, #16
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff fcb3 	bl	8006550 <rcvr_datablock>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80b6 	beq.w	8006d5e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006bf2:	2330      	movs	r3, #48	; 0x30
 8006bf4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006bf8:	e007      	b.n	8006c0a <USER_SPI_ioctl+0x162>
 8006bfa:	20ff      	movs	r0, #255	; 0xff
 8006bfc:	f7ff fc0c 	bl	8006418 <xchg_spi>
 8006c00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006c04:	3b01      	subs	r3, #1
 8006c06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006c0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f3      	bne.n	8006bfa <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006c12:	7dbb      	ldrb	r3, [r7, #22]
 8006c14:	091b      	lsrs	r3, r3, #4
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	fa03 f202 	lsl.w	r2, r3, r2
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006c2a:	e098      	b.n	8006d5e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	2009      	movs	r0, #9
 8006c30:	f7ff fce9 	bl	8006606 <send_cmd>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f040 8091 	bne.w	8006d5e <USER_SPI_ioctl+0x2b6>
 8006c3c:	f107 030c 	add.w	r3, r7, #12
 8006c40:	2110      	movs	r1, #16
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff fc84 	bl	8006550 <rcvr_datablock>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 8087 	beq.w	8006d5e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006c50:	4b4c      	ldr	r3, [pc, #304]	; (8006d84 <USER_SPI_ioctl+0x2dc>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d012      	beq.n	8006c82 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006c5c:	7dbb      	ldrb	r3, [r7, #22]
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006c64:	7dfa      	ldrb	r2, [r7, #23]
 8006c66:	09d2      	lsrs	r2, r2, #7
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	7e7b      	ldrb	r3, [r7, #25]
 8006c70:	099b      	lsrs	r3, r3, #6
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	e013      	b.n	8006caa <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006c82:	7dbb      	ldrb	r3, [r7, #22]
 8006c84:	109b      	asrs	r3, r3, #2
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	7dfa      	ldrb	r2, [r7, #23]
 8006c90:	00d2      	lsls	r2, r2, #3
 8006c92:	f002 0218 	and.w	r2, r2, #24
 8006c96:	7df9      	ldrb	r1, [r7, #23]
 8006c98:	0949      	lsrs	r1, r1, #5
 8006c9a:	b2c9      	uxtb	r1, r1
 8006c9c:	440a      	add	r2, r1
 8006c9e:	3201      	adds	r2, #1
 8006ca0:	fb02 f303 	mul.w	r3, r2, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006cb0:	e055      	b.n	8006d5e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006cb2:	4b34      	ldr	r3, [pc, #208]	; (8006d84 <USER_SPI_ioctl+0x2dc>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	f003 0306 	and.w	r3, r3, #6
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d051      	beq.n	8006d62 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006cbe:	f107 020c 	add.w	r2, r7, #12
 8006cc2:	79fb      	ldrb	r3, [r7, #7]
 8006cc4:	210b      	movs	r1, #11
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff feee 	bl	8006aa8 <USER_SPI_ioctl>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d149      	bne.n	8006d66 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006cd2:	7b3b      	ldrb	r3, [r7, #12]
 8006cd4:	099b      	lsrs	r3, r3, #6
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <USER_SPI_ioctl+0x23e>
 8006cdc:	7dbb      	ldrb	r3, [r7, #22]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d041      	beq.n	8006d6a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	623b      	str	r3, [r7, #32]
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006cf6:	4b23      	ldr	r3, [pc, #140]	; (8006d84 <USER_SPI_ioctl+0x2dc>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d105      	bne.n	8006d0e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	025b      	lsls	r3, r3, #9
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	025b      	lsls	r3, r3, #9
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d10:	2020      	movs	r0, #32
 8006d12:	f7ff fc78 	bl	8006606 <send_cmd>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d128      	bne.n	8006d6e <USER_SPI_ioctl+0x2c6>
 8006d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d1e:	2021      	movs	r0, #33	; 0x21
 8006d20:	f7ff fc71 	bl	8006606 <send_cmd>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d121      	bne.n	8006d6e <USER_SPI_ioctl+0x2c6>
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	2026      	movs	r0, #38	; 0x26
 8006d2e:	f7ff fc6a 	bl	8006606 <send_cmd>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11a      	bne.n	8006d6e <USER_SPI_ioctl+0x2c6>
 8006d38:	f247 5030 	movw	r0, #30000	; 0x7530
 8006d3c:	f7ff fbb9 	bl	80064b2 <wait_ready>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d013      	beq.n	8006d6e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006d46:	2300      	movs	r3, #0
 8006d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006d4c:	e00f      	b.n	8006d6e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006d4e:	2304      	movs	r3, #4
 8006d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006d54:	e00c      	b.n	8006d70 <USER_SPI_ioctl+0x2c8>
		break;
 8006d56:	bf00      	nop
 8006d58:	e00a      	b.n	8006d70 <USER_SPI_ioctl+0x2c8>
		break;
 8006d5a:	bf00      	nop
 8006d5c:	e008      	b.n	8006d70 <USER_SPI_ioctl+0x2c8>
		break;
 8006d5e:	bf00      	nop
 8006d60:	e006      	b.n	8006d70 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006d62:	bf00      	nop
 8006d64:	e004      	b.n	8006d70 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006d66:	bf00      	nop
 8006d68:	e002      	b.n	8006d70 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006d6a:	bf00      	nop
 8006d6c:	e000      	b.n	8006d70 <USER_SPI_ioctl+0x2c8>
		break;
 8006d6e:	bf00      	nop
	}

	despiselect();
 8006d70:	f7ff fbc2 	bl	80064f8 <despiselect>

	return res;
 8006d74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3730      	adds	r7, #48	; 0x30
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000020 	.word	0x20000020
 8006d84:	200012e4 	.word	0x200012e4

08006d88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006d92:	79fb      	ldrb	r3, [r7, #7]
 8006d94:	4a08      	ldr	r2, [pc, #32]	; (8006db8 <disk_status+0x30>)
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	79fa      	ldrb	r2, [r7, #7]
 8006da0:	4905      	ldr	r1, [pc, #20]	; (8006db8 <disk_status+0x30>)
 8006da2:	440a      	add	r2, r1
 8006da4:	7a12      	ldrb	r2, [r2, #8]
 8006da6:	4610      	mov	r0, r2
 8006da8:	4798      	blx	r3
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20001310 	.word	0x20001310

08006dbc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	4a0d      	ldr	r2, [pc, #52]	; (8006e04 <disk_initialize+0x48>)
 8006dce:	5cd3      	ldrb	r3, [r2, r3]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d111      	bne.n	8006df8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	4a0b      	ldr	r2, [pc, #44]	; (8006e04 <disk_initialize+0x48>)
 8006dd8:	2101      	movs	r1, #1
 8006dda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	4a09      	ldr	r2, [pc, #36]	; (8006e04 <disk_initialize+0x48>)
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	79fa      	ldrb	r2, [r7, #7]
 8006dea:	4906      	ldr	r1, [pc, #24]	; (8006e04 <disk_initialize+0x48>)
 8006dec:	440a      	add	r2, r1
 8006dee:	7a12      	ldrb	r2, [r2, #8]
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	4603      	mov	r3, r0
 8006df6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20001310 	.word	0x20001310

08006e08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006e08:	b590      	push	{r4, r7, lr}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	607a      	str	r2, [r7, #4]
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	4a0a      	ldr	r2, [pc, #40]	; (8006e44 <disk_read+0x3c>)
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	689c      	ldr	r4, [r3, #8]
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	4a07      	ldr	r2, [pc, #28]	; (8006e44 <disk_read+0x3c>)
 8006e28:	4413      	add	r3, r2
 8006e2a:	7a18      	ldrb	r0, [r3, #8]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	47a0      	blx	r4
 8006e34:	4603      	mov	r3, r0
 8006e36:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd90      	pop	{r4, r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20001310 	.word	0x20001310

08006e48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006e48:	b590      	push	{r4, r7, lr}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	4a0a      	ldr	r2, [pc, #40]	; (8006e84 <disk_write+0x3c>)
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68dc      	ldr	r4, [r3, #12]
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	4a07      	ldr	r2, [pc, #28]	; (8006e84 <disk_write+0x3c>)
 8006e68:	4413      	add	r3, r2
 8006e6a:	7a18      	ldrb	r0, [r3, #8]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	68b9      	ldr	r1, [r7, #8]
 8006e72:	47a0      	blx	r4
 8006e74:	4603      	mov	r3, r0
 8006e76:	75fb      	strb	r3, [r7, #23]
  return res;
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd90      	pop	{r4, r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20001310 	.word	0x20001310

08006e88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	603a      	str	r2, [r7, #0]
 8006e92:	71fb      	strb	r3, [r7, #7]
 8006e94:	460b      	mov	r3, r1
 8006e96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <disk_ioctl+0x38>)
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	79fa      	ldrb	r2, [r7, #7]
 8006ea6:	4906      	ldr	r1, [pc, #24]	; (8006ec0 <disk_ioctl+0x38>)
 8006ea8:	440a      	add	r2, r1
 8006eaa:	7a10      	ldrb	r0, [r2, #8]
 8006eac:	79b9      	ldrb	r1, [r7, #6]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	4798      	blx	r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73fb      	strb	r3, [r7, #15]
  return res;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20001310 	.word	0x20001310

08006ec4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006ec4:	b480      	push	{r7}
 8006ec6:	b087      	sub	sp, #28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006ed8:	e007      	b.n	8006eea <mem_cpy+0x26>
		*d++ = *s++;
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	1c53      	adds	r3, r2, #1
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	1c59      	adds	r1, r3, #1
 8006ee4:	6179      	str	r1, [r7, #20]
 8006ee6:	7812      	ldrb	r2, [r2, #0]
 8006ee8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	1e5a      	subs	r2, r3, #1
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f2      	bne.n	8006eda <mem_cpy+0x16>
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr

08006f00 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006f10:	e005      	b.n	8006f1e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	617a      	str	r2, [r7, #20]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	1e5a      	subs	r2, r3, #1
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f4      	bne.n	8006f12 <mem_set+0x12>
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr

08006f34 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006f34:	b480      	push	{r7}
 8006f36:	b089      	sub	sp, #36	; 0x24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006f4c:	bf00      	nop
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	1e5a      	subs	r2, r3, #1
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00d      	beq.n	8006f74 <mem_cmp+0x40>
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	61fa      	str	r2, [r7, #28]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	4619      	mov	r1, r3
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	61ba      	str	r2, [r7, #24]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	1acb      	subs	r3, r1, r3
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0ec      	beq.n	8006f4e <mem_cmp+0x1a>
	return r;
 8006f74:	697b      	ldr	r3, [r7, #20]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3724      	adds	r7, #36	; 0x24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr

08006f80 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006f8a:	e002      	b.n	8006f92 <chk_chr+0x12>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <chk_chr+0x26>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d1f2      	bne.n	8006f8c <chk_chr+0xc>
	return *str;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bc80      	pop	{r7}
 8006fb2:	4770      	bx	lr

08006fb4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60bb      	str	r3, [r7, #8]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	e038      	b.n	800703a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8006fc8:	492f      	ldr	r1, [pc, #188]	; (8007088 <chk_lock+0xd4>)
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d029      	beq.n	8007030 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006fdc:	492a      	ldr	r1, [pc, #168]	; (8007088 <chk_lock+0xd4>)
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d11e      	bne.n	8007034 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8006ff6:	4924      	ldr	r1, [pc, #144]	; (8007088 <chk_lock+0xd4>)
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	3304      	adds	r3, #4
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800700e:	429a      	cmp	r2, r3
 8007010:	d110      	bne.n	8007034 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8007012:	491d      	ldr	r1, [pc, #116]	; (8007088 <chk_lock+0xd4>)
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4613      	mov	r3, r2
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	3308      	adds	r3, #8
 8007022:	881a      	ldrh	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800702a:	429a      	cmp	r2, r3
 800702c:	d102      	bne.n	8007034 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800702e:	e007      	b.n	8007040 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8007030:	2301      	movs	r3, #1
 8007032:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d9c3      	bls.n	8006fc8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d109      	bne.n	800705a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d102      	bne.n	8007052 <chk_lock+0x9e>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d101      	bne.n	8007056 <chk_lock+0xa2>
 8007052:	2300      	movs	r3, #0
 8007054:	e013      	b.n	800707e <chk_lock+0xca>
 8007056:	2312      	movs	r3, #18
 8007058:	e011      	b.n	800707e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10b      	bne.n	8007078 <chk_lock+0xc4>
 8007060:	4909      	ldr	r1, [pc, #36]	; (8007088 <chk_lock+0xd4>)
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4613      	mov	r3, r2
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	440b      	add	r3, r1
 800706e:	330a      	adds	r3, #10
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007076:	d101      	bne.n	800707c <chk_lock+0xc8>
 8007078:	2310      	movs	r3, #16
 800707a:	e000      	b.n	800707e <chk_lock+0xca>
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr
 8007088:	200012f8 	.word	0x200012f8

0800708c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007092:	2300      	movs	r3, #0
 8007094:	607b      	str	r3, [r7, #4]
 8007096:	e002      	b.n	800709e <enq_lock+0x12>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3301      	adds	r3, #1
 800709c:	607b      	str	r3, [r7, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d809      	bhi.n	80070b8 <enq_lock+0x2c>
 80070a4:	490a      	ldr	r1, [pc, #40]	; (80070d0 <enq_lock+0x44>)
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	4613      	mov	r3, r2
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	440b      	add	r3, r1
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1ef      	bne.n	8007098 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	bf14      	ite	ne
 80070be:	2301      	movne	r3, #1
 80070c0:	2300      	moveq	r3, #0
 80070c2:	b2db      	uxtb	r3, r3
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	200012f8 	.word	0x200012f8

080070d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e02b      	b.n	800713c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80070e4:	4955      	ldr	r1, [pc, #340]	; (800723c <inc_lock+0x168>)
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4613      	mov	r3, r2
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d11b      	bne.n	8007136 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80070fe:	494f      	ldr	r1, [pc, #316]	; (800723c <inc_lock+0x168>)
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4613      	mov	r3, r2
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	3304      	adds	r3, #4
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8007116:	429a      	cmp	r2, r3
 8007118:	d10d      	bne.n	8007136 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800711a:	4948      	ldr	r1, [pc, #288]	; (800723c <inc_lock+0x168>)
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4613      	mov	r3, r2
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	3308      	adds	r3, #8
 800712a:	881a      	ldrh	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8007132:	429a      	cmp	r2, r3
 8007134:	d006      	beq.n	8007144 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3301      	adds	r3, #1
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d9d0      	bls.n	80070e4 <inc_lock+0x10>
 8007142:	e000      	b.n	8007146 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8007144:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b02      	cmp	r3, #2
 800714a:	d145      	bne.n	80071d8 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e002      	b.n	8007158 <inc_lock+0x84>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3301      	adds	r3, #1
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d809      	bhi.n	8007172 <inc_lock+0x9e>
 800715e:	4937      	ldr	r1, [pc, #220]	; (800723c <inc_lock+0x168>)
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4613      	mov	r3, r2
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1ef      	bne.n	8007152 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d101      	bne.n	800717c <inc_lock+0xa8>
 8007178:	2300      	movs	r3, #0
 800717a:	e05a      	b.n	8007232 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8007182:	482e      	ldr	r0, [pc, #184]	; (800723c <inc_lock+0x168>)
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4613      	mov	r3, r2
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4403      	add	r3, r0
 8007190:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8007198:	4828      	ldr	r0, [pc, #160]	; (800723c <inc_lock+0x168>)
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4613      	mov	r3, r2
 800719e:	005b      	lsls	r3, r3, #1
 80071a0:	4413      	add	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4403      	add	r3, r0
 80071a6:	3304      	adds	r3, #4
 80071a8:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80071b0:	4922      	ldr	r1, [pc, #136]	; (800723c <inc_lock+0x168>)
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4613      	mov	r3, r2
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	4413      	add	r3, r2
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	440b      	add	r3, r1
 80071be:	3308      	adds	r3, #8
 80071c0:	4602      	mov	r2, r0
 80071c2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80071c4:	491d      	ldr	r1, [pc, #116]	; (800723c <inc_lock+0x168>)
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4613      	mov	r3, r2
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	330a      	adds	r3, #10
 80071d4:	2200      	movs	r2, #0
 80071d6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00c      	beq.n	80071f8 <inc_lock+0x124>
 80071de:	4917      	ldr	r1, [pc, #92]	; (800723c <inc_lock+0x168>)
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4613      	mov	r3, r2
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	440b      	add	r3, r1
 80071ec:	330a      	adds	r3, #10
 80071ee:	881b      	ldrh	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <inc_lock+0x124>
 80071f4:	2300      	movs	r3, #0
 80071f6:	e01c      	b.n	8007232 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10b      	bne.n	8007216 <inc_lock+0x142>
 80071fe:	490f      	ldr	r1, [pc, #60]	; (800723c <inc_lock+0x168>)
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4613      	mov	r3, r2
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	440b      	add	r3, r1
 800720c:	330a      	adds	r3, #10
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	b299      	uxth	r1, r3
 8007214:	e001      	b.n	800721a <inc_lock+0x146>
 8007216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800721a:	4808      	ldr	r0, [pc, #32]	; (800723c <inc_lock+0x168>)
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4613      	mov	r3, r2
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4403      	add	r3, r0
 8007228:	330a      	adds	r3, #10
 800722a:	460a      	mov	r2, r1
 800722c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3301      	adds	r3, #1
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr
 800723c:	200012f8 	.word	0x200012f8

08007240 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3b01      	subs	r3, #1
 800724c:	607b      	str	r3, [r7, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d82e      	bhi.n	80072b2 <dec_lock+0x72>
		n = Files[i].ctr;
 8007254:	491b      	ldr	r1, [pc, #108]	; (80072c4 <dec_lock+0x84>)
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	330a      	adds	r3, #10
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007268:	89fb      	ldrh	r3, [r7, #14]
 800726a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800726e:	d101      	bne.n	8007274 <dec_lock+0x34>
 8007270:	2300      	movs	r3, #0
 8007272:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8007274:	89fb      	ldrh	r3, [r7, #14]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <dec_lock+0x40>
 800727a:	89fb      	ldrh	r3, [r7, #14]
 800727c:	3b01      	subs	r3, #1
 800727e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007280:	4910      	ldr	r1, [pc, #64]	; (80072c4 <dec_lock+0x84>)
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4613      	mov	r3, r2
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	330a      	adds	r3, #10
 8007290:	89fa      	ldrh	r2, [r7, #14]
 8007292:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007294:	89fb      	ldrh	r3, [r7, #14]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d108      	bne.n	80072ac <dec_lock+0x6c>
 800729a:	490a      	ldr	r1, [pc, #40]	; (80072c4 <dec_lock+0x84>)
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	4613      	mov	r3, r2
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	440b      	add	r3, r1
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	737b      	strb	r3, [r7, #13]
 80072b0:	e001      	b.n	80072b6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80072b2:	2302      	movs	r3, #2
 80072b4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80072b6:	7b7b      	ldrb	r3, [r7, #13]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	200012f8 	.word	0x200012f8

080072c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	e016      	b.n	8007304 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80072d6:	4910      	ldr	r1, [pc, #64]	; (8007318 <clear_lock+0x50>)
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4613      	mov	r3, r2
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	440b      	add	r3, r1
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d108      	bne.n	80072fe <clear_lock+0x36>
 80072ec:	490a      	ldr	r1, [pc, #40]	; (8007318 <clear_lock+0x50>)
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4613      	mov	r3, r2
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	3301      	adds	r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d9e5      	bls.n	80072d6 <clear_lock+0xe>
	}
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	200012f8 	.word	0x200012f8

0800731c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800732e:	2b00      	cmp	r3, #0
 8007330:	d038      	beq.n	80073a4 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007338:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	2301      	movs	r3, #1
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	f7ff fd7f 	bl	8006e48 <disk_write>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8007350:	2301      	movs	r3, #1
 8007352:	73fb      	strb	r3, [r7, #15]
 8007354:	e026      	b.n	80073a4 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	1ad2      	subs	r2, r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800736e:	429a      	cmp	r2, r3
 8007370:	d218      	bcs.n	80073a4 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8007378:	613b      	str	r3, [r7, #16]
 800737a:	e010      	b.n	800739e <sync_window+0x82>
					wsect += fs->fsize;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	4413      	add	r3, r2
 8007386:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	2301      	movs	r3, #1
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	f7ff fd58 	bl	8006e48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	3b01      	subs	r3, #1
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d8eb      	bhi.n	800737c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d01b      	beq.n	8007400 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff ffa7 	bl	800731c <sync_window>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d113      	bne.n	8007400 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	2301      	movs	r3, #1
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	f7ff fd10 	bl	8006e08 <disk_read>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80073ee:	f04f 33ff 	mov.w	r3, #4294967295
 80073f2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff ff82 	bl	800731c <sync_window>
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f040 809b 	bne.w	800755a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800742a:	2b03      	cmp	r3, #3
 800742c:	f040 8088 	bne.w	8007540 <sync_fs+0x136>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007436:	2b01      	cmp	r3, #1
 8007438:	f040 8082 	bne.w	8007540 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007442:	2100      	movs	r1, #0
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fd5b 	bl	8006f00 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2255      	movs	r2, #85	; 0x55
 800744e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	22aa      	movs	r2, #170	; 0xaa
 8007456:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2252      	movs	r2, #82	; 0x52
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2252      	movs	r2, #82	; 0x52
 8007464:	705a      	strb	r2, [r3, #1]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2261      	movs	r2, #97	; 0x61
 800746a:	709a      	strb	r2, [r3, #2]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2241      	movs	r2, #65	; 0x41
 8007470:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2272      	movs	r2, #114	; 0x72
 8007476:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2272      	movs	r2, #114	; 0x72
 800747e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2241      	movs	r2, #65	; 0x41
 8007486:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2261      	movs	r2, #97	; 0x61
 800748e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007498:	b2da      	uxtb	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	0a1b      	lsrs	r3, r3, #8
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80074ba:	0c1b      	lsrs	r3, r3, #16
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80074ca:	0e1b      	lsrs	r3, r3, #24
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	0a1b      	lsrs	r3, r3, #8
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80074fc:	0c1b      	lsrs	r3, r3, #16
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800750c:	0e1b      	lsrs	r3, r3, #24
 800750e:	b2da      	uxtb	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007532:	2301      	movs	r3, #1
 8007534:	f7ff fc88 	bl	8006e48 <disk_write>
			fs->fsi_flag = 0;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	4618      	mov	r0, r3
 800754c:	f7ff fc9c 	bl	8006e88 <disk_ioctl>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <sync_fs+0x150>
			res = FR_DISK_ERR;
 8007556:	2301      	movs	r3, #1
 8007558:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800755a:	7bfb      	ldrb	r3, [r7, #15]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	3b02      	subs	r3, #2
 8007572:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800757a:	3b02      	subs	r3, #2
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d301      	bcc.n	8007586 <clust2sect+0x22>
 8007582:	2300      	movs	r3, #0
 8007584:	e00a      	b.n	800759c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800758c:	461a      	mov	r2, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	fb03 f202 	mul.w	r2, r3, r2
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800759a:	4413      	add	r3, r2
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr

080075a6 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b086      	sub	sp, #24
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d905      	bls.n	80075c2 <get_fat+0x1c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d302      	bcc.n	80075c8 <get_fat+0x22>
		val = 1;	/* Internal error */
 80075c2:	2301      	movs	r3, #1
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	e0a3      	b.n	8007710 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80075c8:	f04f 33ff 	mov.w	r3, #4294967295
 80075cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d068      	beq.n	80076aa <get_fat+0x104>
 80075d8:	2b03      	cmp	r3, #3
 80075da:	f300 808f 	bgt.w	80076fc <get_fat+0x156>
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d002      	beq.n	80075e8 <get_fat+0x42>
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d040      	beq.n	8007668 <get_fat+0xc2>
 80075e6:	e089      	b.n	80076fc <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	0a5b      	lsrs	r3, r3, #9
 8007600:	4413      	add	r3, r2
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fed2 	bl	80073ae <move_window>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d178      	bne.n	8007702 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	60fa      	str	r2, [r7, #12]
 8007616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	5cd3      	ldrb	r3, [r2, r3]
 800761e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	0a5b      	lsrs	r3, r3, #9
 800762a:	4413      	add	r3, r2
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff febd 	bl	80073ae <move_window>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d165      	bne.n	8007706 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	5cd3      	ldrb	r3, [r2, r3]
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	461a      	mov	r2, r3
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4313      	orrs	r3, r2
 800764c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <get_fat+0xb8>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	091b      	lsrs	r3, r3, #4
 800765c:	e002      	b.n	8007664 <get_fat+0xbe>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007664:	617b      	str	r3, [r7, #20]
			break;
 8007666:	e053      	b.n	8007710 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	0a1b      	lsrs	r3, r3, #8
 8007672:	4413      	add	r3, r2
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff fe99 	bl	80073ae <move_window>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d143      	bne.n	800770a <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	4413      	add	r3, r2
 800768e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	3301      	adds	r3, #1
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	b21a      	sxth	r2, r3
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	b21b      	sxth	r3, r3
 80076a0:	4313      	orrs	r3, r2
 80076a2:	b21b      	sxth	r3, r3
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	617b      	str	r3, [r7, #20]
			break;
 80076a8:	e032      	b.n	8007710 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	09db      	lsrs	r3, r3, #7
 80076b4:	4413      	add	r3, r2
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff fe78 	bl	80073ae <move_window>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d124      	bne.n	800770e <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	4413      	add	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	3303      	adds	r3, #3
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	061a      	lsls	r2, r3, #24
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	3302      	adds	r3, #2
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	041b      	lsls	r3, r3, #16
 80076e2:	4313      	orrs	r3, r2
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	3201      	adds	r2, #1
 80076e8:	7812      	ldrb	r2, [r2, #0]
 80076ea:	0212      	lsls	r2, r2, #8
 80076ec:	4313      	orrs	r3, r2
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	7812      	ldrb	r2, [r2, #0]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076f8:	617b      	str	r3, [r7, #20]
			break;
 80076fa:	e009      	b.n	8007710 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 80076fc:	2301      	movs	r3, #1
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e006      	b.n	8007710 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007702:	bf00      	nop
 8007704:	e004      	b.n	8007710 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007706:	bf00      	nop
 8007708:	e002      	b.n	8007710 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800770a:	bf00      	nop
 800770c:	e000      	b.n	8007710 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800770e:	bf00      	nop
		}
	}

	return val;
 8007710:	697b      	ldr	r3, [r7, #20]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b088      	sub	sp, #32
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	60b9      	str	r1, [r7, #8]
 8007724:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d905      	bls.n	8007738 <put_fat+0x1e>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	429a      	cmp	r2, r3
 8007736:	d302      	bcc.n	800773e <put_fat+0x24>
		res = FR_INT_ERR;
 8007738:	2302      	movs	r3, #2
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e0f6      	b.n	800792c <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007744:	2b03      	cmp	r3, #3
 8007746:	f000 809e 	beq.w	8007886 <put_fat+0x16c>
 800774a:	2b03      	cmp	r3, #3
 800774c:	f300 80e4 	bgt.w	8007918 <put_fat+0x1fe>
 8007750:	2b01      	cmp	r3, #1
 8007752:	d002      	beq.n	800775a <put_fat+0x40>
 8007754:	2b02      	cmp	r3, #2
 8007756:	d06f      	beq.n	8007838 <put_fat+0x11e>
 8007758:	e0de      	b.n	8007918 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	085b      	lsrs	r3, r3, #1
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	4413      	add	r3, r2
 8007766:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	0a5b      	lsrs	r3, r3, #9
 8007772:	4413      	add	r3, r2
 8007774:	4619      	mov	r1, r3
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f7ff fe19 	bl	80073ae <move_window>
 800777c:	4603      	mov	r3, r0
 800777e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007780:	7ffb      	ldrb	r3, [r7, #31]
 8007782:	2b00      	cmp	r3, #0
 8007784:	f040 80cb 	bne.w	800791e <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	617a      	str	r2, [r7, #20]
 800778e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4413      	add	r3, r2
 8007796:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00d      	beq.n	80077be <put_fat+0xa4>
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	b25b      	sxtb	r3, r3
 80077a8:	f003 030f 	and.w	r3, r3, #15
 80077ac:	b25a      	sxtb	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	011b      	lsls	r3, r3, #4
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	4313      	orrs	r3, r2
 80077b8:	b25b      	sxtb	r3, r3
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	e001      	b.n	80077c2 <put_fat+0xa8>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	0a5b      	lsrs	r3, r3, #9
 80077d8:	4413      	add	r3, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f7ff fde6 	bl	80073ae <move_window>
 80077e2:	4603      	mov	r3, r0
 80077e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077e6:	7ffb      	ldrb	r3, [r7, #31]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f040 809a 	bne.w	8007922 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <put_fat+0xf2>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	b2db      	uxtb	r3, r3
 800780a:	e00e      	b.n	800782a <put_fat+0x110>
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	b25b      	sxtb	r3, r3
 8007812:	f023 030f 	bic.w	r3, r3, #15
 8007816:	b25a      	sxtb	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	0a1b      	lsrs	r3, r3, #8
 800781c:	b25b      	sxtb	r3, r3
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	b25b      	sxtb	r3, r3
 8007824:	4313      	orrs	r3, r2
 8007826:	b25b      	sxtb	r3, r3
 8007828:	b2db      	uxtb	r3, r3
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007836:	e079      	b.n	800792c <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	0a1b      	lsrs	r3, r3, #8
 8007842:	4413      	add	r3, r2
 8007844:	4619      	mov	r1, r3
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f7ff fdb1 	bl	80073ae <move_window>
 800784c:	4603      	mov	r3, r0
 800784e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007850:	7ffb      	ldrb	r3, [r7, #31]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d167      	bne.n	8007926 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	4413      	add	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	b2da      	uxtb	r2, r3
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	701a      	strb	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	b29b      	uxth	r3, r3
 8007870:	0a1b      	lsrs	r3, r3, #8
 8007872:	b29a      	uxth	r2, r3
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	3301      	adds	r3, #1
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007884:	e052      	b.n	800792c <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	09db      	lsrs	r3, r3, #7
 8007890:	4413      	add	r3, r2
 8007892:	4619      	mov	r1, r3
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff fd8a 	bl	80073ae <move_window>
 800789a:	4603      	mov	r3, r0
 800789c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800789e:	7ffb      	ldrb	r3, [r7, #31]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d142      	bne.n	800792a <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4413      	add	r3, r2
 80078b0:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	3303      	adds	r3, #3
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	061a      	lsls	r2, r3, #24
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	3302      	adds	r3, #2
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	041b      	lsls	r3, r3, #16
 80078c2:	4313      	orrs	r3, r2
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	3201      	adds	r2, #1
 80078c8:	7812      	ldrb	r2, [r2, #0]
 80078ca:	0212      	lsls	r2, r2, #8
 80078cc:	4313      	orrs	r3, r2
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	7812      	ldrb	r2, [r2, #0]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	4313      	orrs	r3, r2
 80078dc:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	0a1b      	lsrs	r3, r3, #8
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	3301      	adds	r3, #1
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	0c1a      	lsrs	r2, r3, #16
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	3302      	adds	r3, #2
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	0e1a      	lsrs	r2, r3, #24
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	3303      	adds	r3, #3
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007916:	e009      	b.n	800792c <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8007918:	2302      	movs	r3, #2
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e006      	b.n	800792c <put_fat+0x212>
			if (res != FR_OK) break;
 800791e:	bf00      	nop
 8007920:	e004      	b.n	800792c <put_fat+0x212>
			if (res != FR_OK) break;
 8007922:	bf00      	nop
 8007924:	e002      	b.n	800792c <put_fat+0x212>
			if (res != FR_OK) break;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <put_fat+0x212>
			if (res != FR_OK) break;
 800792a:	bf00      	nop
		}
	}

	return res;
 800792c:	7ffb      	ldrb	r3, [r7, #31]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3720      	adds	r7, #32
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d905      	bls.n	8007952 <remove_chain+0x1c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d302      	bcc.n	8007958 <remove_chain+0x22>
		res = FR_INT_ERR;
 8007952:	2302      	movs	r3, #2
 8007954:	73fb      	strb	r3, [r7, #15]
 8007956:	e043      	b.n	80079e0 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800795c:	e036      	b.n	80079cc <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff fe20 	bl	80075a6 <get_fat>
 8007966:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d035      	beq.n	80079da <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d102      	bne.n	800797a <remove_chain+0x44>
 8007974:	2302      	movs	r3, #2
 8007976:	73fb      	strb	r3, [r7, #15]
 8007978:	e032      	b.n	80079e0 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d102      	bne.n	8007988 <remove_chain+0x52>
 8007982:	2301      	movs	r3, #1
 8007984:	73fb      	strb	r3, [r7, #15]
 8007986:	e02b      	b.n	80079e0 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007988:	2200      	movs	r2, #0
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fec4 	bl	800771a <put_fat>
 8007992:	4603      	mov	r3, r0
 8007994:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d120      	bne.n	80079de <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a6:	d00f      	beq.n	80079c8 <remove_chain+0x92>
				fs->free_clust++;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80079bc:	f043 0301 	orr.w	r3, r3, #1
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d3c2      	bcc.n	800795e <remove_chain+0x28>
 80079d8:	e002      	b.n	80079e0 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80079da:	bf00      	nop
 80079dc:	e000      	b.n	80079e0 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80079de:	bf00      	nop
		}
	}

	return res;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b086      	sub	sp, #24
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10f      	bne.n	8007a1a <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007a00:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <create_chain+0x2a>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d31c      	bcc.n	8007a4e <create_chain+0x64>
 8007a14:	2301      	movs	r3, #1
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	e019      	b.n	8007a4e <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff fdc2 	bl	80075a6 <get_fat>
 8007a22:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d801      	bhi.n	8007a2e <create_chain+0x44>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e076      	b.n	8007b1c <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d101      	bne.n	8007a3a <create_chain+0x50>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	e070      	b.n	8007b1c <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d201      	bcs.n	8007a4a <create_chain+0x60>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	e068      	b.n	8007b1c <create_chain+0x132>
		scl = clst;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	3301      	adds	r3, #1
 8007a56:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d307      	bcc.n	8007a74 <create_chain+0x8a>
			ncl = 2;
 8007a64:	2302      	movs	r3, #2
 8007a66:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007a68:	697a      	ldr	r2, [r7, #20]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d901      	bls.n	8007a74 <create_chain+0x8a>
 8007a70:	2300      	movs	r3, #0
 8007a72:	e053      	b.n	8007b1c <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007a74:	6979      	ldr	r1, [r7, #20]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff fd95 	bl	80075a6 <get_fat>
 8007a7c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00e      	beq.n	8007aa2 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8a:	d002      	beq.n	8007a92 <create_chain+0xa8>
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d101      	bne.n	8007a96 <create_chain+0xac>
			return cs;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	e042      	b.n	8007b1c <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d1d9      	bne.n	8007a52 <create_chain+0x68>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e03c      	b.n	8007b1c <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8007aa2:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007aa4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007aa8:	6979      	ldr	r1, [r7, #20]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff fe35 	bl	800771a <put_fat>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <create_chain+0xe4>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d006      	beq.n	8007ace <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f7ff fe28 	bl	800771a <put_fat>
 8007aca:	4603      	mov	r3, r0
 8007acc:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d11a      	bne.n	8007b0a <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d018      	beq.n	8007b1a <create_chain+0x130>
			fs->free_clust--;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007aee:	1e5a      	subs	r2, r3, #1
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007afc:	f043 0301 	orr.w	r3, r3, #1
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8007b08:	e007      	b.n	8007b1a <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d102      	bne.n	8007b16 <create_chain+0x12c>
 8007b10:	f04f 33ff 	mov.w	r3, #4294967295
 8007b14:	e000      	b.n	8007b18 <create_chain+0x12e>
 8007b16:	2301      	movs	r3, #1
 8007b18:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007b1a:	697b      	ldr	r3, [r7, #20]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007b34:	3304      	adds	r3, #4
 8007b36:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	0a5b      	lsrs	r3, r3, #9
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007b42:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	1d1a      	adds	r2, r3, #4
 8007b50:	613a      	str	r2, [r7, #16]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <clmt_clust+0x3c>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e010      	b.n	8007b82 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d307      	bcc.n	8007b78 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	3304      	adds	r3, #4
 8007b74:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b76:	e7e9      	b.n	8007b4c <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8007b78:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	4413      	add	r3, r2
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	371c      	adds	r7, #28
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr

08007b8c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007ba6:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d007      	beq.n	8007bbe <dir_sdi+0x32>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d301      	bcc.n	8007bc2 <dir_sdi+0x36>
		return FR_INT_ERR;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e074      	b.n	8007cac <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10c      	bne.n	8007be2 <dir_sdi+0x56>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d105      	bne.n	8007be2 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bdc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007be0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d111      	bne.n	8007c0c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bee:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d301      	bcc.n	8007bfe <dir_sdi+0x72>
			return FR_INT_ERR;
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e056      	b.n	8007cac <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c04:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	e032      	b.n	8007c72 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c12:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007c1a:	e01e      	b.n	8007c5a <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c22:	6979      	ldr	r1, [r7, #20]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7ff fcbe 	bl	80075a6 <get_fat>
 8007c2a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d101      	bne.n	8007c38 <dir_sdi+0xac>
 8007c34:	2301      	movs	r3, #1
 8007c36:	e039      	b.n	8007cac <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d907      	bls.n	8007c4e <dir_sdi+0xc2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d301      	bcc.n	8007c52 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	e02c      	b.n	8007cac <dir_sdi+0x120>
			idx -= ic;
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d2dc      	bcs.n	8007c1c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c68:	6979      	ldr	r1, [r7, #20]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fc7a 	bl	8007564 <clust2sect>
 8007c70:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <dir_sdi+0xf8>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e013      	b.n	8007cac <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	091a      	lsrs	r2, r3, #4
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	441a      	add	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c98:	461a      	mov	r2, r3
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	015b      	lsls	r3, r3, #5
 8007ca2:	441a      	add	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d004      	beq.n	8007cda <dir_next+0x26>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <dir_next+0x2a>
		return FR_NO_FILE;
 8007cda:	2304      	movs	r3, #4
 8007cdc:	e0dd      	b.n	8007e9a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f003 030f 	and.w	r3, r3, #15
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f040 80c6 	bne.w	8007e76 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10b      	bne.n	8007d1a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d08:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4293      	cmp	r3, r2
 8007d12:	f0c0 80b0 	bcc.w	8007e76 <dir_next+0x1c2>
				return FR_NO_FILE;
 8007d16:	2304      	movs	r3, #4
 8007d18:	e0bf      	b.n	8007e9a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	091b      	lsrs	r3, r3, #4
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007d24:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007d28:	3a01      	subs	r2, #1
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f040 80a2 	bne.w	8007e76 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7ff fc30 	bl	80075a6 <get_fat>
 8007d46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d801      	bhi.n	8007d52 <dir_next+0x9e>
 8007d4e:	2302      	movs	r3, #2
 8007d50:	e0a3      	b.n	8007e9a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d58:	d101      	bne.n	8007d5e <dir_next+0xaa>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e09d      	b.n	8007e9a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d374      	bcc.n	8007e58 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <dir_next+0xc4>
 8007d74:	2304      	movs	r3, #4
 8007d76:	e090      	b.n	8007e9a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f7ff fe2f 	bl	80079ea <create_chain>
 8007d8c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <dir_next+0xe4>
 8007d94:	2307      	movs	r3, #7
 8007d96:	e080      	b.n	8007e9a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <dir_next+0xee>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e07b      	b.n	8007e9a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da8:	d101      	bne.n	8007dae <dir_next+0xfa>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e075      	b.n	8007e9a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff fab1 	bl	800731c <sync_window>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <dir_next+0x110>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e06a      	b.n	8007e9a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dce:	2100      	movs	r1, #0
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff f895 	bl	8006f00 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8007de2:	6979      	ldr	r1, [r7, #20]
 8007de4:	4610      	mov	r0, r2
 8007de6:	f7ff fbbd 	bl	8007564 <clust2sect>
 8007dea:	4603      	mov	r3, r0
 8007dec:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007df0:	2300      	movs	r3, #0
 8007df2:	613b      	str	r3, [r7, #16]
 8007df4:	e01b      	b.n	8007e2e <dir_next+0x17a>
						dp->fs->wflag = 1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7ff fa87 	bl	800731c <sync_window>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <dir_next+0x164>
 8007e14:	2301      	movs	r3, #1
 8007e16:	e040      	b.n	8007e9a <dir_next+0x1e6>
						dp->fs->winsect++;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e1e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007e22:	3201      	adds	r2, #1
 8007e24:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e34:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007e38:	461a      	mov	r2, r3
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d3da      	bcc.n	8007df6 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e46:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	1a8a      	subs	r2, r1, r2
 8007e54:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e66:	6979      	ldr	r1, [r7, #20]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff fb7b 	bl	8007564 <clust2sect>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e86:	461a      	mov	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f003 030f 	and.w	r3, r3, #15
 8007e8e:	015b      	lsls	r3, r3, #5
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd90      	pop	{r4, r7, pc}

08007ea2 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007eac:	2100      	movs	r1, #0
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fe6c 	bl	8007b8c <dir_sdi>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d131      	bne.n	8007f22 <dir_alloc+0x80>
		n = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	f7ff fa6c 	bl	80073ae <move_window>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d11f      	bne.n	8007f20 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2be5      	cmp	r3, #229	; 0xe5
 8007eea:	d005      	beq.n	8007ef8 <dir_alloc+0x56>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d107      	bne.n	8007f08 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	3301      	adds	r3, #1
 8007efc:	60bb      	str	r3, [r7, #8]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d102      	bne.n	8007f0c <dir_alloc+0x6a>
 8007f06:	e00c      	b.n	8007f22 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff fed0 	bl	8007cb4 <dir_next>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0d1      	beq.n	8007ec2 <dir_alloc+0x20>
 8007f1e:	e000      	b.n	8007f22 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8007f20:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d101      	bne.n	8007f2c <dir_alloc+0x8a>
 8007f28:	2307      	movs	r3, #7
 8007f2a:	73fb      	strb	r3, [r7, #15]
	return res;
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b085      	sub	sp, #20
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	331b      	adds	r3, #27
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	b21a      	sxth	r2, r3
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	331a      	adds	r3, #26
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	b21b      	sxth	r3, r3
 8007f52:	4313      	orrs	r3, r2
 8007f54:	b21b      	sxth	r3, r3
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d10f      	bne.n	8007f84 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	3315      	adds	r3, #21
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	b21a      	sxth	r2, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	3314      	adds	r3, #20
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	b21b      	sxth	r3, r3
 8007f76:	4313      	orrs	r3, r2
 8007f78:	b21b      	sxth	r3, r3
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	041b      	lsls	r3, r3, #16
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]

	return cl;
 8007f84:	68fb      	ldr	r3, [r7, #12]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bc80      	pop	{r7}
 8007f8e:	4770      	bx	lr

08007f90 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	331a      	adds	r3, #26
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	b2d2      	uxtb	r2, r2
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	0a1b      	lsrs	r3, r3, #8
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	331b      	adds	r3, #27
 8007fb0:	b2d2      	uxtb	r2, r2
 8007fb2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	0c1a      	lsrs	r2, r3, #16
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3314      	adds	r3, #20
 8007fbc:	b2d2      	uxtb	r2, r2
 8007fbe:	701a      	strb	r2, [r3, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	0c1b      	lsrs	r3, r3, #16
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	0a1b      	lsrs	r3, r3, #8
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3315      	adds	r3, #21
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr

08007fdc <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007fe4:	2100      	movs	r1, #0
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff fdd0 	bl	8007b8c <dir_sdi>
 8007fec:	4603      	mov	r3, r0
 8007fee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <dir_find+0x1e>
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	e03b      	b.n	8008072 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008006:	4619      	mov	r1, r3
 8008008:	4610      	mov	r0, r2
 800800a:	f7ff f9d0 	bl	80073ae <move_window>
 800800e:	4603      	mov	r3, r0
 8008010:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d128      	bne.n	800806a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800801e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <dir_find+0x56>
 800802c:	2304      	movs	r3, #4
 800802e:	75fb      	strb	r3, [r7, #23]
 8008030:	e01e      	b.n	8008070 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	330b      	adds	r3, #11
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10a      	bne.n	8008056 <dir_find+0x7a>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008046:	220b      	movs	r2, #11
 8008048:	4619      	mov	r1, r3
 800804a:	6938      	ldr	r0, [r7, #16]
 800804c:	f7fe ff72 	bl	8006f34 <mem_cmp>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8008056:	2100      	movs	r1, #0
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7ff fe2b 	bl	8007cb4 <dir_next>
 800805e:	4603      	mov	r3, r0
 8008060:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d0c8      	beq.n	8007ffa <dir_find+0x1e>
 8008068:	e002      	b.n	8008070 <dir_find+0x94>
		if (res != FR_OK) break;
 800806a:	bf00      	nop
 800806c:	e000      	b.n	8008070 <dir_find+0x94>
			break;
 800806e:	bf00      	nop

	return res;
 8008070:	7dfb      	ldrb	r3, [r7, #23]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008082:	2101      	movs	r1, #1
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff ff0c 	bl	8007ea2 <dir_alloc>
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d126      	bne.n	80080e2 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7ff f983 	bl	80073ae <move_window>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d117      	bne.n	80080e2 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080b8:	2220      	movs	r2, #32
 80080ba:	2100      	movs	r1, #0
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fe ff1f 	bl	8006f00 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80080ce:	220b      	movs	r2, #11
 80080d0:	4619      	mov	r1, r3
 80080d2:	f7fe fef7 	bl	8006ec4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
 80080fc:	e002      	b.n	8008104 <create_name+0x18>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	2b2f      	cmp	r3, #47	; 0x2f
 800810a:	d0f8      	beq.n	80080fe <create_name+0x12>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b5c      	cmp	r3, #92	; 0x5c
 8008112:	d0f4      	beq.n	80080fe <create_name+0x12>
	sfn = dp->fn;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800811a:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800811c:	220b      	movs	r2, #11
 800811e:	2120      	movs	r1, #32
 8008120:	68b8      	ldr	r0, [r7, #8]
 8008122:	f7fe feed 	bl	8006f00 <mem_set>
	si = i = b = 0; ni = 8;
 8008126:	2300      	movs	r3, #0
 8008128:	77fb      	strb	r3, [r7, #31]
 800812a:	2300      	movs	r3, #0
 800812c:	613b      	str	r3, [r7, #16]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	2308      	movs	r3, #8
 8008134:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	617a      	str	r2, [r7, #20]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8008144:	7fbb      	ldrb	r3, [r7, #30]
 8008146:	2b20      	cmp	r3, #32
 8008148:	d953      	bls.n	80081f2 <create_name+0x106>
 800814a:	7fbb      	ldrb	r3, [r7, #30]
 800814c:	2b2f      	cmp	r3, #47	; 0x2f
 800814e:	d050      	beq.n	80081f2 <create_name+0x106>
 8008150:	7fbb      	ldrb	r3, [r7, #30]
 8008152:	2b5c      	cmp	r3, #92	; 0x5c
 8008154:	d04d      	beq.n	80081f2 <create_name+0x106>
		if (c == '.' || i >= ni) {
 8008156:	7fbb      	ldrb	r3, [r7, #30]
 8008158:	2b2e      	cmp	r3, #46	; 0x2e
 800815a:	d003      	beq.n	8008164 <create_name+0x78>
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	429a      	cmp	r2, r3
 8008162:	d30f      	bcc.n	8008184 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	2b08      	cmp	r3, #8
 8008168:	d102      	bne.n	8008170 <create_name+0x84>
 800816a:	7fbb      	ldrb	r3, [r7, #30]
 800816c:	2b2e      	cmp	r3, #46	; 0x2e
 800816e:	d001      	beq.n	8008174 <create_name+0x88>
 8008170:	2306      	movs	r3, #6
 8008172:	e073      	b.n	800825c <create_name+0x170>
			i = 8; ni = 11;
 8008174:	2308      	movs	r3, #8
 8008176:	613b      	str	r3, [r7, #16]
 8008178:	230b      	movs	r3, #11
 800817a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800817c:	7ffb      	ldrb	r3, [r7, #31]
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	77fb      	strb	r3, [r7, #31]
 8008182:	e035      	b.n	80081f0 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008184:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008188:	2b00      	cmp	r3, #0
 800818a:	da08      	bge.n	800819e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800818c:	7ffb      	ldrb	r3, [r7, #31]
 800818e:	f043 0303 	orr.w	r3, r3, #3
 8008192:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008194:	7fbb      	ldrb	r3, [r7, #30]
 8008196:	3b80      	subs	r3, #128	; 0x80
 8008198:	4a32      	ldr	r2, [pc, #200]	; (8008264 <create_name+0x178>)
 800819a:	5cd3      	ldrb	r3, [r2, r3]
 800819c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800819e:	7fbb      	ldrb	r3, [r7, #30]
 80081a0:	4619      	mov	r1, r3
 80081a2:	4831      	ldr	r0, [pc, #196]	; (8008268 <create_name+0x17c>)
 80081a4:	f7fe feec 	bl	8006f80 <chk_chr>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <create_name+0xc6>
				return FR_INVALID_NAME;
 80081ae:	2306      	movs	r3, #6
 80081b0:	e054      	b.n	800825c <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80081b2:	7fbb      	ldrb	r3, [r7, #30]
 80081b4:	2b40      	cmp	r3, #64	; 0x40
 80081b6:	d907      	bls.n	80081c8 <create_name+0xdc>
 80081b8:	7fbb      	ldrb	r3, [r7, #30]
 80081ba:	2b5a      	cmp	r3, #90	; 0x5a
 80081bc:	d804      	bhi.n	80081c8 <create_name+0xdc>
				b |= 2;
 80081be:	7ffb      	ldrb	r3, [r7, #31]
 80081c0:	f043 0302 	orr.w	r3, r3, #2
 80081c4:	77fb      	strb	r3, [r7, #31]
 80081c6:	e00c      	b.n	80081e2 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80081c8:	7fbb      	ldrb	r3, [r7, #30]
 80081ca:	2b60      	cmp	r3, #96	; 0x60
 80081cc:	d909      	bls.n	80081e2 <create_name+0xf6>
 80081ce:	7fbb      	ldrb	r3, [r7, #30]
 80081d0:	2b7a      	cmp	r3, #122	; 0x7a
 80081d2:	d806      	bhi.n	80081e2 <create_name+0xf6>
					b |= 1; c -= 0x20;
 80081d4:	7ffb      	ldrb	r3, [r7, #31]
 80081d6:	f043 0301 	orr.w	r3, r3, #1
 80081da:	77fb      	strb	r3, [r7, #31]
 80081dc:	7fbb      	ldrb	r3, [r7, #30]
 80081de:	3b20      	subs	r3, #32
 80081e0:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	613a      	str	r2, [r7, #16]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	4413      	add	r3, r2
 80081ec:	7fba      	ldrb	r2, [r7, #30]
 80081ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80081f0:	e7a1      	b.n	8008136 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	441a      	add	r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80081fc:	7fbb      	ldrb	r3, [r7, #30]
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d801      	bhi.n	8008206 <create_name+0x11a>
 8008202:	2304      	movs	r3, #4
 8008204:	e000      	b.n	8008208 <create_name+0x11c>
 8008206:	2300      	movs	r3, #0
 8008208:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <create_name+0x128>
 8008210:	2306      	movs	r3, #6
 8008212:	e023      	b.n	800825c <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	2be5      	cmp	r3, #229	; 0xe5
 800821a:	d102      	bne.n	8008222 <create_name+0x136>
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2205      	movs	r2, #5
 8008220:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	2b08      	cmp	r3, #8
 8008226:	d102      	bne.n	800822e <create_name+0x142>
 8008228:	7ffb      	ldrb	r3, [r7, #31]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800822e:	7ffb      	ldrb	r3, [r7, #31]
 8008230:	f003 0303 	and.w	r3, r3, #3
 8008234:	2b01      	cmp	r3, #1
 8008236:	d103      	bne.n	8008240 <create_name+0x154>
 8008238:	7fbb      	ldrb	r3, [r7, #30]
 800823a:	f043 0310 	orr.w	r3, r3, #16
 800823e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8008240:	7ffb      	ldrb	r3, [r7, #31]
 8008242:	f003 030c 	and.w	r3, r3, #12
 8008246:	2b04      	cmp	r3, #4
 8008248:	d103      	bne.n	8008252 <create_name+0x166>
 800824a:	7fbb      	ldrb	r3, [r7, #30]
 800824c:	f043 0308 	orr.w	r3, r3, #8
 8008250:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	330b      	adds	r3, #11
 8008256:	7fba      	ldrb	r2, [r7, #30]
 8008258:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800825a:	2300      	movs	r3, #0
#endif
}
 800825c:	4618      	mov	r0, r3
 800825e:	3720      	adds	r7, #32
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	0800ab50 	.word	0x0800ab50
 8008268:	0800aac0 	.word	0x0800aac0

0800826c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b2f      	cmp	r3, #47	; 0x2f
 800827c:	d003      	beq.n	8008286 <follow_path+0x1a>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b5c      	cmp	r3, #92	; 0x5c
 8008284:	d102      	bne.n	800828c <follow_path+0x20>
		path++;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b1f      	cmp	r3, #31
 800829a:	d80a      	bhi.n	80082b2 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800829c:	2100      	movs	r1, #0
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7ff fc74 	bl	8007b8c <dir_sdi>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80082b0:	e045      	b.n	800833e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80082b2:	463b      	mov	r3, r7
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff ff18 	bl	80080ec <create_name>
 80082bc:	4603      	mov	r3, r0
 80082be:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d136      	bne.n	8008334 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff fe88 	bl	8007fdc <dir_find>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80082d6:	7adb      	ldrb	r3, [r3, #11]
 80082d8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80082da:	7bfb      	ldrb	r3, [r7, #15]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00a      	beq.n	80082f6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b04      	cmp	r3, #4
 80082e4:	d128      	bne.n	8008338 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d123      	bne.n	8008338 <follow_path+0xcc>
 80082f0:	2305      	movs	r3, #5
 80082f2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80082f4:	e020      	b.n	8008338 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80082f6:	7bbb      	ldrb	r3, [r7, #14]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d11d      	bne.n	800833c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008306:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	330b      	adds	r3, #11
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	f003 0310 	and.w	r3, r3, #16
 8008312:	2b00      	cmp	r3, #0
 8008314:	d102      	bne.n	800831c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8008316:	2305      	movs	r3, #5
 8008318:	73fb      	strb	r3, [r7, #15]
 800831a:	e010      	b.n	800833e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008322:	68b9      	ldr	r1, [r7, #8]
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fe06 	bl	8007f36 <ld_clust>
 800832a:	4602      	mov	r2, r0
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008332:	e7be      	b.n	80082b2 <follow_path+0x46>
			if (res != FR_OK) break;
 8008334:	bf00      	nop
 8008336:	e002      	b.n	800833e <follow_path+0xd2>
				break;
 8008338:	bf00      	nop
 800833a:	e000      	b.n	800833e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800833c:	bf00      	nop
		}
	}

	return res;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008350:	f04f 33ff 	mov.w	r3, #4294967295
 8008354:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d031      	beq.n	80083c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	e002      	b.n	800836c <get_ldnumber+0x24>
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	3301      	adds	r3, #1
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b20      	cmp	r3, #32
 8008372:	d903      	bls.n	800837c <get_ldnumber+0x34>
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b3a      	cmp	r3, #58	; 0x3a
 800837a:	d1f4      	bne.n	8008366 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b3a      	cmp	r3, #58	; 0x3a
 8008382:	d11c      	bne.n	80083be <get_ldnumber+0x76>
			tp = *path;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	60fa      	str	r2, [r7, #12]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	3b30      	subs	r3, #48	; 0x30
 8008394:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b09      	cmp	r3, #9
 800839a:	d80e      	bhi.n	80083ba <get_ldnumber+0x72>
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d10a      	bne.n	80083ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d107      	bne.n	80083ba <get_ldnumber+0x72>
					vol = (int)i;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	3301      	adds	r3, #1
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	e002      	b.n	80083c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80083be:	2300      	movs	r3, #0
 80083c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80083c2:	693b      	ldr	r3, [r7, #16]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr
	...

080083d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f04f 32ff 	mov.w	r2, #4294967295
 80083e8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fe ffdd 	bl	80073ae <move_window>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <check_fs+0x2e>
		return 3;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e04a      	b.n	8008494 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008404:	3301      	adds	r3, #1
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	b21a      	sxth	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008412:	b21b      	sxth	r3, r3
 8008414:	4313      	orrs	r3, r2
 8008416:	b21b      	sxth	r3, r3
 8008418:	4a20      	ldr	r2, [pc, #128]	; (800849c <check_fs+0xcc>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d001      	beq.n	8008422 <check_fs+0x52>
		return 2;
 800841e:	2302      	movs	r3, #2
 8008420:	e038      	b.n	8008494 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3336      	adds	r3, #54	; 0x36
 8008426:	3303      	adds	r3, #3
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	061a      	lsls	r2, r3, #24
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3336      	adds	r3, #54	; 0x36
 8008430:	3302      	adds	r3, #2
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	041b      	lsls	r3, r3, #16
 8008436:	4313      	orrs	r3, r2
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	3236      	adds	r2, #54	; 0x36
 800843c:	3201      	adds	r2, #1
 800843e:	7812      	ldrb	r2, [r2, #0]
 8008440:	0212      	lsls	r2, r2, #8
 8008442:	4313      	orrs	r3, r2
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800844a:	4313      	orrs	r3, r2
 800844c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008450:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <check_fs+0xd0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d101      	bne.n	800845a <check_fs+0x8a>
		return 0;
 8008456:	2300      	movs	r3, #0
 8008458:	e01c      	b.n	8008494 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3352      	adds	r3, #82	; 0x52
 800845e:	3303      	adds	r3, #3
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	061a      	lsls	r2, r3, #24
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3352      	adds	r3, #82	; 0x52
 8008468:	3302      	adds	r3, #2
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	041b      	lsls	r3, r3, #16
 800846e:	4313      	orrs	r3, r2
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	3252      	adds	r2, #82	; 0x52
 8008474:	3201      	adds	r2, #1
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	0212      	lsls	r2, r2, #8
 800847a:	4313      	orrs	r3, r2
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008482:	4313      	orrs	r3, r2
 8008484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008488:	4a05      	ldr	r2, [pc, #20]	; (80084a0 <check_fs+0xd0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d101      	bne.n	8008492 <check_fs+0xc2>
		return 0;
 800848e:	2300      	movs	r3, #0
 8008490:	e000      	b.n	8008494 <check_fs+0xc4>

	return 1;
 8008492:	2301      	movs	r3, #1
}
 8008494:	4618      	mov	r0, r3
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	ffffaa55 	.word	0xffffaa55
 80084a0:	00544146 	.word	0x00544146

080084a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b096      	sub	sp, #88	; 0x58
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	4613      	mov	r3, r2
 80084b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80084b8:	68b8      	ldr	r0, [r7, #8]
 80084ba:	f7ff ff45 	bl	8008348 <get_ldnumber>
 80084be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80084c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da01      	bge.n	80084ca <find_volume+0x26>
 80084c6:	230b      	movs	r3, #11
 80084c8:	e2a8      	b.n	8008a1c <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80084ca:	4a9d      	ldr	r2, [pc, #628]	; (8008740 <find_volume+0x29c>)
 80084cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <find_volume+0x3a>
 80084da:	230c      	movs	r3, #12
 80084dc:	e29e      	b.n	8008a1c <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084e2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d01b      	beq.n	8008526 <find_volume+0x82>
		stat = disk_status(fs->drv);
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fc47 	bl	8006d88 <disk_status>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008500:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10c      	bne.n	8008526 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d007      	beq.n	8008522 <find_volume+0x7e>
 8008512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800851e:	230a      	movs	r3, #10
 8008520:	e27c      	b.n	8008a1c <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8008522:	2300      	movs	r3, #0
 8008524:	e27a      	b.n	8008a1c <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800852e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008530:	b2da      	uxtb	r2, r3
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800853e:	4618      	mov	r0, r3
 8008540:	f7fe fc3c 	bl	8006dbc <disk_initialize>
 8008544:	4603      	mov	r3, r0
 8008546:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800854a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008556:	2303      	movs	r3, #3
 8008558:	e260      	b.n	8008a1c <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800855a:	79fb      	ldrb	r3, [r7, #7]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d007      	beq.n	8008570 <find_volume+0xcc>
 8008560:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800856c:	230a      	movs	r3, #10
 800856e:	e255      	b.n	8008a1c <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008574:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008576:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008578:	f7ff ff2a 	bl	80083d0 <check_fs>
 800857c:	4603      	mov	r3, r0
 800857e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008582:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008586:	2b01      	cmp	r3, #1
 8008588:	d153      	bne.n	8008632 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800858a:	2300      	movs	r3, #0
 800858c:	643b      	str	r3, [r7, #64]	; 0x40
 800858e:	e028      	b.n	80085e2 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800859a:	4413      	add	r3, r2
 800859c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	3304      	adds	r3, #4
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d012      	beq.n	80085ce <find_volume+0x12a>
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	330b      	adds	r3, #11
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	061a      	lsls	r2, r3, #24
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	330a      	adds	r3, #10
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	4313      	orrs	r3, r2
 80085ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085bc:	3209      	adds	r2, #9
 80085be:	7812      	ldrb	r2, [r2, #0]
 80085c0:	0212      	lsls	r2, r2, #8
 80085c2:	4313      	orrs	r3, r2
 80085c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c6:	3208      	adds	r2, #8
 80085c8:	7812      	ldrb	r2, [r2, #0]
 80085ca:	431a      	orrs	r2, r3
 80085cc:	e000      	b.n	80085d0 <find_volume+0x12c>
 80085ce:	2200      	movs	r2, #0
 80085d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	3358      	adds	r3, #88	; 0x58
 80085d6:	443b      	add	r3, r7
 80085d8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80085dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085de:	3301      	adds	r3, #1
 80085e0:	643b      	str	r3, [r7, #64]	; 0x40
 80085e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d9d3      	bls.n	8008590 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80085e8:	2300      	movs	r3, #0
 80085ea:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80085ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d002      	beq.n	80085f8 <find_volume+0x154>
 80085f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f4:	3b01      	subs	r3, #1
 80085f6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80085f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	3358      	adds	r3, #88	; 0x58
 80085fe:	443b      	add	r3, r7
 8008600:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008604:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <find_volume+0x174>
 800860c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800860e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008610:	f7ff fede 	bl	80083d0 <check_fs>
 8008614:	4603      	mov	r3, r0
 8008616:	e000      	b.n	800861a <find_volume+0x176>
 8008618:	2302      	movs	r3, #2
 800861a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800861e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008622:	2b00      	cmp	r3, #0
 8008624:	d005      	beq.n	8008632 <find_volume+0x18e>
 8008626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008628:	3301      	adds	r3, #1
 800862a:	643b      	str	r3, [r7, #64]	; 0x40
 800862c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800862e:	2b03      	cmp	r3, #3
 8008630:	d9e2      	bls.n	80085f8 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008632:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008636:	2b03      	cmp	r3, #3
 8008638:	d101      	bne.n	800863e <find_volume+0x19a>
 800863a:	2301      	movs	r3, #1
 800863c:	e1ee      	b.n	8008a1c <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800863e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <find_volume+0x1a6>
 8008646:	230d      	movs	r3, #13
 8008648:	e1e8      	b.n	8008a1c <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	7b1b      	ldrb	r3, [r3, #12]
 800864e:	021b      	lsls	r3, r3, #8
 8008650:	b21a      	sxth	r2, r3
 8008652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008654:	7adb      	ldrb	r3, [r3, #11]
 8008656:	b21b      	sxth	r3, r3
 8008658:	4313      	orrs	r3, r2
 800865a:	b21b      	sxth	r3, r3
 800865c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008660:	d001      	beq.n	8008666 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8008662:	230d      	movs	r3, #13
 8008664:	e1da      	b.n	8008a1c <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	7ddb      	ldrb	r3, [r3, #23]
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	b21a      	sxth	r2, r3
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	7d9b      	ldrb	r3, [r3, #22]
 8008672:	b21b      	sxth	r3, r3
 8008674:	4313      	orrs	r3, r2
 8008676:	b21b      	sxth	r3, r3
 8008678:	b29b      	uxth	r3, r3
 800867a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800867c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d112      	bne.n	80086a8 <find_volume+0x204>
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008688:	061a      	lsls	r2, r3, #24
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008690:	041b      	lsls	r3, r3, #16
 8008692:	4313      	orrs	r3, r2
 8008694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008696:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800869a:	0212      	lsls	r2, r2, #8
 800869c:	4313      	orrs	r3, r2
 800869e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086a0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80086a4:	4313      	orrs	r3, r2
 80086a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80086a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	7c1a      	ldrb	r2, [r3, #16]
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d006      	beq.n	80086d2 <find_volume+0x22e>
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	d001      	beq.n	80086d2 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 80086ce:	230d      	movs	r3, #13
 80086d0:	e1a4      	b.n	8008a1c <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80086d8:	461a      	mov	r2, r3
 80086da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086dc:	fb02 f303 	mul.w	r3, r2, r3
 80086e0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	7b5a      	ldrb	r2, [r3, #13]
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <find_volume+0x268>
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80086fc:	461a      	mov	r2, r3
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008704:	3b01      	subs	r3, #1
 8008706:	4013      	ands	r3, r2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 800870c:	230d      	movs	r3, #13
 800870e:	e185      	b.n	8008a1c <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008712:	7c9b      	ldrb	r3, [r3, #18]
 8008714:	021b      	lsls	r3, r3, #8
 8008716:	b21a      	sxth	r2, r3
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	7c5b      	ldrb	r3, [r3, #17]
 800871c:	b21b      	sxth	r3, r3
 800871e:	4313      	orrs	r3, r2
 8008720:	b21b      	sxth	r3, r3
 8008722:	b29a      	uxth	r2, r3
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008730:	f003 030f 	and.w	r3, r3, #15
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d004      	beq.n	8008744 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800873a:	230d      	movs	r3, #13
 800873c:	e16e      	b.n	8008a1c <find_volume+0x578>
 800873e:	bf00      	nop
 8008740:	200012f0 	.word	0x200012f0

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008746:	7d1b      	ldrb	r3, [r3, #20]
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	b21a      	sxth	r2, r3
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	7cdb      	ldrb	r3, [r3, #19]
 8008750:	b21b      	sxth	r3, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	b21b      	sxth	r3, r3
 8008756:	b29b      	uxth	r3, r3
 8008758:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800875a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800875c:	2b00      	cmp	r3, #0
 800875e:	d112      	bne.n	8008786 <find_volume+0x2e2>
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008766:	061a      	lsls	r2, r3, #24
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800876e:	041b      	lsls	r3, r3, #16
 8008770:	4313      	orrs	r3, r2
 8008772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008774:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008778:	0212      	lsls	r2, r2, #8
 800877a:	4313      	orrs	r3, r2
 800877c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800877e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008782:	4313      	orrs	r3, r2
 8008784:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	7bdb      	ldrb	r3, [r3, #15]
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	b21a      	sxth	r2, r3
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	7b9b      	ldrb	r3, [r3, #14]
 8008792:	b21b      	sxth	r3, r3
 8008794:	4313      	orrs	r3, r2
 8008796:	b21b      	sxth	r3, r3
 8008798:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800879a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <find_volume+0x300>
 80087a0:	230d      	movs	r3, #13
 80087a2:	e13b      	b.n	8008a1c <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80087a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80087a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a8:	4413      	add	r3, r2
 80087aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ac:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80087b0:	0912      	lsrs	r2, r2, #4
 80087b2:	b292      	uxth	r2, r2
 80087b4:	4413      	add	r3, r2
 80087b6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80087b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	429a      	cmp	r2, r3
 80087be:	d201      	bcs.n	80087c4 <find_volume+0x320>
 80087c0:	230d      	movs	r3, #13
 80087c2:	e12b      	b.n	8008a1c <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80087c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087cc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80087d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <find_volume+0x33c>
 80087dc:	230d      	movs	r3, #13
 80087de:	e11d      	b.n	8008a1c <find_volume+0x578>
	fmt = FS_FAT12;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d902      	bls.n	80087f6 <find_volume+0x352>
 80087f0:	2302      	movs	r3, #2
 80087f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d902      	bls.n	8008806 <find_volume+0x362>
 8008800:	2303      	movs	r3, #3
 8008802:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	1c9a      	adds	r2, r3, #2
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8008810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008812:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008814:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008818:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800881a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881c:	441a      	add	r2, r3
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8008824:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008828:	441a      	add	r2, r3
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8008830:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008834:	2b03      	cmp	r3, #3
 8008836:	d121      	bne.n	800887c <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <find_volume+0x3a2>
 8008842:	230d      	movs	r3, #13
 8008844:	e0ea      	b.n	8008a1c <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800884c:	061a      	lsls	r2, r3, #24
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008854:	041b      	lsls	r3, r3, #16
 8008856:	4313      	orrs	r3, r2
 8008858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800885a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800885e:	0212      	lsls	r2, r2, #8
 8008860:	4313      	orrs	r3, r2
 8008862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008864:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008868:	431a      	orrs	r2, r3
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008872:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	647b      	str	r3, [r7, #68]	; 0x44
 800887a:	e025      	b.n	80088c8 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <find_volume+0x3e6>
 8008886:	230d      	movs	r3, #13
 8008888:	e0c8      	b.n	8008a1c <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008892:	441a      	add	r2, r3
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800889a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d104      	bne.n	80088ac <find_volume+0x408>
 80088a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	e00c      	b.n	80088c6 <find_volume+0x422>
 80088ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80088b2:	4613      	mov	r3, r2
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4413      	add	r3, r2
 80088b8:	085a      	lsrs	r2, r3, #1
 80088ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80088c6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80088ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80088d4:	0a5b      	lsrs	r3, r3, #9
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d201      	bcs.n	80088de <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 80088da:	230d      	movs	r3, #13
 80088dc:	e09e      	b.n	8008a1c <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	f04f 32ff 	mov.w	r2, #4294967295
 80088e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80088e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	2280      	movs	r2, #128	; 0x80
 80088f8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80088fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008900:	2b03      	cmp	r3, #3
 8008902:	d177      	bne.n	80089f4 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	b21a      	sxth	r2, r3
 800890e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008914:	b21b      	sxth	r3, r3
 8008916:	4313      	orrs	r3, r2
 8008918:	b21b      	sxth	r3, r3
 800891a:	2b01      	cmp	r3, #1
 800891c:	d16a      	bne.n	80089f4 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800891e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008920:	3301      	adds	r3, #1
 8008922:	4619      	mov	r1, r3
 8008924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008926:	f7fe fd42 	bl	80073ae <move_window>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d161      	bne.n	80089f4 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	b21a      	sxth	r2, r3
 8008942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008944:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008948:	b21b      	sxth	r3, r3
 800894a:	4313      	orrs	r3, r2
 800894c:	b21b      	sxth	r3, r3
 800894e:	4a35      	ldr	r2, [pc, #212]	; (8008a24 <find_volume+0x580>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d14f      	bne.n	80089f4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	78db      	ldrb	r3, [r3, #3]
 8008958:	061a      	lsls	r2, r3, #24
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	789b      	ldrb	r3, [r3, #2]
 800895e:	041b      	lsls	r3, r3, #16
 8008960:	4313      	orrs	r3, r2
 8008962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008964:	7852      	ldrb	r2, [r2, #1]
 8008966:	0212      	lsls	r2, r2, #8
 8008968:	4313      	orrs	r3, r2
 800896a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800896c:	7812      	ldrb	r2, [r2, #0]
 800896e:	4313      	orrs	r3, r2
 8008970:	4a2d      	ldr	r2, [pc, #180]	; (8008a28 <find_volume+0x584>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d13e      	bne.n	80089f4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008978:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800897c:	061a      	lsls	r2, r3, #24
 800897e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008980:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	4313      	orrs	r3, r2
 8008988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800898a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800898e:	0212      	lsls	r2, r2, #8
 8008990:	4313      	orrs	r3, r2
 8008992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008994:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008998:	4313      	orrs	r3, r2
 800899a:	4a24      	ldr	r2, [pc, #144]	; (8008a2c <find_volume+0x588>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d129      	bne.n	80089f4 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80089a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a2:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80089a6:	061a      	lsls	r2, r3, #24
 80089a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089aa:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80089ae:	041b      	lsls	r3, r3, #16
 80089b0:	4313      	orrs	r3, r2
 80089b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089b4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80089b8:	0212      	lsls	r2, r2, #8
 80089ba:	4313      	orrs	r3, r2
 80089bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089be:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80089c2:	431a      	orrs	r2, r3
 80089c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80089d0:	061a      	lsls	r2, r3, #24
 80089d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d4:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80089d8:	041b      	lsls	r3, r3, #16
 80089da:	4313      	orrs	r3, r2
 80089dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089de:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80089e2:	0212      	lsls	r2, r2, #8
 80089e4:	4313      	orrs	r3, r2
 80089e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089e8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80089ec:	431a      	orrs	r2, r3
 80089ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80089fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80089fe:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <find_volume+0x58c>)
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	3301      	adds	r3, #1
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <find_volume+0x58c>)
 8008a08:	801a      	strh	r2, [r3, #0]
 8008a0a:	4b09      	ldr	r3, [pc, #36]	; (8008a30 <find_volume+0x58c>)
 8008a0c:	881a      	ldrh	r2, [r3, #0]
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008a14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a16:	f7fe fc57 	bl	80072c8 <clear_lock>
#endif

	return FR_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3758      	adds	r7, #88	; 0x58
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	ffffaa55 	.word	0xffffaa55
 8008a28:	41615252 	.word	0x41615252
 8008a2c:	61417272 	.word	0x61417272
 8008a30:	200012f4 	.word	0x200012f4

08008a34 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d022      	beq.n	8008a8c <validate+0x58>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01d      	beq.n	8008a8c <validate+0x58>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d016      	beq.n	8008a8c <validate+0x58>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a64:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d10c      	bne.n	8008a8c <validate+0x58>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a78:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fe f983 	bl	8006d88 <disk_status>
 8008a82:	4603      	mov	r3, r0
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8008a8c:	2309      	movs	r3, #9
 8008a8e:	e000      	b.n	8008a92 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b088      	sub	sp, #32
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008aae:	f107 0310 	add.w	r3, r7, #16
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7ff fc48 	bl	8008348 <get_ldnumber>
 8008ab8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	da01      	bge.n	8008ac4 <f_mount+0x28>
 8008ac0:	230b      	movs	r3, #11
 8008ac2:	e02d      	b.n	8008b20 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008ac4:	4a18      	ldr	r2, [pc, #96]	; (8008b28 <f_mount+0x8c>)
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008acc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d006      	beq.n	8008ae2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8008ad4:	69b8      	ldr	r0, [r7, #24]
 8008ad6:	f7fe fbf7 	bl	80072c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	490d      	ldr	r1, [pc, #52]	; (8008b28 <f_mount+0x8c>)
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <f_mount+0x6a>
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d001      	beq.n	8008b0a <f_mount+0x6e>
 8008b06:	2300      	movs	r3, #0
 8008b08:	e00a      	b.n	8008b20 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008b0a:	f107 0108 	add.w	r1, r7, #8
 8008b0e:	f107 030c 	add.w	r3, r7, #12
 8008b12:	2200      	movs	r2, #0
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff fcc5 	bl	80084a4 <find_volume>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3720      	adds	r7, #32
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	200012f0 	.word	0x200012f0

08008b2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b38:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008b3c:	6018      	str	r0, [r3, #0]
 8008b3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b42:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8008b46:	6019      	str	r1, [r3, #0]
 8008b48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b4c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008b50:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008b52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b56:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <f_open+0x38>
 8008b60:	2309      	movs	r3, #9
 8008b62:	e257      	b.n	8009014 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8008b64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b68:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b78:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008b7c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008b80:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8008b84:	7812      	ldrb	r2, [r2, #0]
 8008b86:	f002 021f 	and.w	r2, r2, #31
 8008b8a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b90:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	f023 0301 	bic.w	r3, r3, #1
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	f107 0108 	add.w	r1, r7, #8
 8008ba0:	f107 0320 	add.w	r3, r7, #32
 8008ba4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff fc7b 	bl	80084a4 <find_volume>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008bb4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f040 8229 	bne.w	8009010 <f_open+0x4e4>
		INIT_BUF(dj);
 8008bbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008bc6:	f107 0214 	add.w	r2, r7, #20
 8008bca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8008bce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	f107 0320 	add.w	r3, r7, #32
 8008bdc:	4611      	mov	r1, r2
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff fb44 	bl	800826c <follow_path>
 8008be4:	4603      	mov	r3, r0
 8008be6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8008bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bee:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008bf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bf6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008bfa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d11d      	bne.n	8008c3e <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8008c02:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <f_open+0xe6>
				res = FR_INVALID_NAME;
 8008c0a:	2306      	movs	r3, #6
 8008c0c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008c10:	e015      	b.n	8008c3e <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008c12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c16:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	f023 0301 	bic.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bf14      	ite	ne
 8008c24:	2301      	movne	r3, #1
 8008c26:	2300      	moveq	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f107 0320 	add.w	r3, r7, #32
 8008c30:	4611      	mov	r1, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe f9be 	bl	8006fb4 <chk_lock>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c42:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	f003 031c 	and.w	r3, r3, #28
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 80e6 	beq.w	8008e1e <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8008c52:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d027      	beq.n	8008caa <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008c5a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	d10e      	bne.n	8008c80 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008c62:	f7fe fa13 	bl	800708c <enq_lock>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d006      	beq.n	8008c7a <f_open+0x14e>
 8008c6c:	f107 0320 	add.w	r3, r7, #32
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff fa02 	bl	800807a <dir_register>
 8008c76:	4603      	mov	r3, r0
 8008c78:	e000      	b.n	8008c7c <f_open+0x150>
 8008c7a:	2312      	movs	r3, #18
 8008c7c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c84:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008c88:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008c8c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8008c90:	7812      	ldrb	r2, [r2, #0]
 8008c92:	f042 0208 	orr.w	r2, r2, #8
 8008c96:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8008c98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c9c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008ca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ca4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008ca8:	e017      	b.n	8008cda <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008caa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008cae:	330b      	adds	r3, #11
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	f003 0311 	and.w	r3, r3, #17
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d003      	beq.n	8008cc2 <f_open+0x196>
					res = FR_DENIED;
 8008cba:	2307      	movs	r3, #7
 8008cbc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008cc0:	e00b      	b.n	8008cda <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008cc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <f_open+0x1ae>
						res = FR_EXIST;
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008cda:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f040 80c1 	bne.w	8008e66 <f_open+0x33a>
 8008ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	f003 0308 	and.w	r3, r3, #8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 80b7 	beq.w	8008e66 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8008cf8:	f7fd faf6 	bl	80062e8 <get_fattime>
 8008cfc:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008d00:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d04:	330e      	adds	r3, #14
 8008d06:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008d0a:	b2d2      	uxtb	r2, r2
 8008d0c:	701a      	strb	r2, [r3, #0]
 8008d0e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	0a1b      	lsrs	r3, r3, #8
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d1c:	330f      	adds	r3, #15
 8008d1e:	b2d2      	uxtb	r2, r2
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008d26:	0c1a      	lsrs	r2, r3, #16
 8008d28:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d2c:	3310      	adds	r3, #16
 8008d2e:	b2d2      	uxtb	r2, r2
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008d36:	0e1a      	lsrs	r2, r3, #24
 8008d38:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d3c:	3311      	adds	r3, #17
 8008d3e:	b2d2      	uxtb	r2, r2
 8008d40:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008d42:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d46:	330b      	adds	r3, #11
 8008d48:	2200      	movs	r2, #0
 8008d4a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008d4c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d50:	331c      	adds	r3, #28
 8008d52:	2200      	movs	r2, #0
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d5a:	331d      	adds	r3, #29
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	701a      	strb	r2, [r3, #0]
 8008d60:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d64:	331e      	adds	r3, #30
 8008d66:	2200      	movs	r2, #0
 8008d68:	701a      	strb	r2, [r3, #0]
 8008d6a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d6e:	331f      	adds	r3, #31
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d78:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d80:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff f8d6 	bl	8007f36 <ld_clust>
 8008d8a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8008d8e:	2100      	movs	r1, #0
 8008d90:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8008d94:	f7ff f8fc 	bl	8007f90 <st_clust>
				dj.fs->wflag = 1;
 8008d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d9c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008da0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8008daa:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d059      	beq.n	8008e66 <f_open+0x33a>
					dw = dj.fs->winsect;
 8008db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008dba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008dbe:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8008dc2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8008dc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dca:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008dce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008dd2:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fdad 	bl	8007936 <remove_chain>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8008de2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d13d      	bne.n	8008e66 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008dea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dee:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008df6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8008dfa:	3a01      	subs	r2, #1
 8008dfc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8008e00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e04:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008e08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008e0c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe facc 	bl	80073ae <move_window>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008e1c:	e023      	b.n	8008e66 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008e1e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d11f      	bne.n	8008e66 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008e26:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008e2a:	330b      	adds	r3, #11
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	f003 0310 	and.w	r3, r3, #16
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <f_open+0x312>
					res = FR_NO_FILE;
 8008e36:	2304      	movs	r3, #4
 8008e38:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008e3c:	e013      	b.n	8008e66 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008e3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e42:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00a      	beq.n	8008e66 <f_open+0x33a>
 8008e50:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008e54:	330b      	adds	r3, #11
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <f_open+0x33a>
						res = FR_DENIED;
 8008e60:	2307      	movs	r3, #7
 8008e62:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8008e66:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d153      	bne.n	8008f16 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008e6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e72:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 0308 	and.w	r3, r3, #8
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00b      	beq.n	8008e98 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8008e80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e84:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008e88:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008e8c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8008e90:	7812      	ldrb	r2, [r2, #0]
 8008e92:	f042 0220 	orr.w	r2, r2, #32
 8008e96:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008e98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e9c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ea4:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8008ea8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eac:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8008eb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008ec4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ecc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	f023 0301 	bic.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	bf14      	ite	ne
 8008eda:	2301      	movne	r3, #1
 8008edc:	2300      	moveq	r3, #0
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f107 0320 	add.w	r3, r7, #32
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe f8f3 	bl	80070d4 <inc_lock>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8008efe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f02:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <f_open+0x3ea>
 8008f10:	2302      	movs	r3, #2
 8008f12:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008f16:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d178      	bne.n	8009010 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8008f1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f22:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008f2c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8008f30:	7812      	ldrb	r2, [r2, #0]
 8008f32:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8008f36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f3a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008f46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f4a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f52:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe ffed 	bl	8007f36 <ld_clust>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f62:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008f6c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008f70:	331f      	adds	r3, #31
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	061a      	lsls	r2, r3, #24
 8008f76:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008f7a:	331e      	adds	r3, #30
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	041b      	lsls	r3, r3, #16
 8008f80:	4313      	orrs	r3, r2
 8008f82:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008f86:	321d      	adds	r2, #29
 8008f88:	7812      	ldrb	r2, [r2, #0]
 8008f8a:	0212      	lsls	r2, r2, #8
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008f92:	321c      	adds	r2, #28
 8008f94:	7812      	ldrb	r2, [r2, #0]
 8008f96:	431a      	orrs	r2, r3
 8008f98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f9c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8008fa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008faa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8008fb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008fc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fda:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008fde:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008fe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8008ff0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ffe:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8009002:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009006:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8009010:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8009014:	4618      	mov	r0, r3
 8009016:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b08a      	sub	sp, #40	; 0x28
 8009022:	af00      	add	r7, sp, #0
 8009024:	60f8      	str	r0, [r7, #12]
 8009026:	60b9      	str	r1, [r7, #8]
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f7ff fcfc 	bl	8008a34 <validate>
 800903c:	4603      	mov	r3, r0
 800903e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009040:	7dfb      	ldrb	r3, [r7, #23]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <f_write+0x2c>
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	e192      	b.n	8009370 <f_write+0x352>
	if (fp->err)							/* Check error */
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009050:	2b00      	cmp	r3, #0
 8009052:	d003      	beq.n	800905c <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800905a:	e189      	b.n	8009370 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800906a:	2307      	movs	r3, #7
 800906c:	e180      	b.n	8009370 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	441a      	add	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800907e:	429a      	cmp	r2, r3
 8009080:	f080 8158 	bcs.w	8009334 <f_write+0x316>
 8009084:	2300      	movs	r3, #0
 8009086:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8009088:	e154      	b.n	8009334 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009094:	2b00      	cmp	r3, #0
 8009096:	f040 8114 	bne.w	80092c2 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80090a0:	0a5b      	lsrs	r3, r3, #9
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80090aa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	4013      	ands	r3, r2
 80090b4:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80090b6:	7dbb      	ldrb	r3, [r7, #22]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d151      	bne.n	8009160 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10f      	bne.n	80090e6 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d121      	bne.n	8009118 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80090da:	2100      	movs	r1, #0
 80090dc:	4618      	mov	r0, r3
 80090de:	f7fe fc84 	bl	80079ea <create_chain>
 80090e2:	6278      	str	r0, [r7, #36]	; 0x24
 80090e4:	e018      	b.n	8009118 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d008      	beq.n	8009102 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80090f6:	4619      	mov	r1, r3
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f7fe fd13 	bl	8007b24 <clmt_clust>
 80090fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009100:	e00a      	b.n	8009118 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800910e:	4619      	mov	r1, r3
 8009110:	4610      	mov	r0, r2
 8009112:	f7fe fc6a 	bl	80079ea <create_chain>
 8009116:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 810f 	beq.w	800933e <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	2b01      	cmp	r3, #1
 8009124:	d105      	bne.n	8009132 <f_write+0x114>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2202      	movs	r2, #2
 800912a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800912e:	2302      	movs	r3, #2
 8009130:	e11e      	b.n	8009370 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009138:	d105      	bne.n	8009146 <f_write+0x128>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2201      	movs	r2, #1
 800913e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009142:	2301      	movs	r3, #1
 8009144:	e114      	b.n	8009370 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009154:	2b00      	cmp	r3, #0
 8009156:	d103      	bne.n	8009160 <f_write+0x142>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d01d      	beq.n	80091aa <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009174:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009178:	68f9      	ldr	r1, [r7, #12]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009180:	2301      	movs	r3, #1
 8009182:	f7fd fe61 	bl	8006e48 <disk_write>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009194:	2301      	movs	r3, #1
 8009196:	e0eb      	b.n	8009370 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800919e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091a2:	b2da      	uxtb	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091b6:	4619      	mov	r1, r3
 80091b8:	4610      	mov	r0, r2
 80091ba:	f7fe f9d3 	bl	8007564 <clust2sect>
 80091be:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d105      	bne.n	80091d2 <f_write+0x1b4>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2202      	movs	r2, #2
 80091ca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80091ce:	2302      	movs	r3, #2
 80091d0:	e0ce      	b.n	8009370 <f_write+0x352>
			sect += csect;
 80091d2:	7dbb      	ldrb	r3, [r7, #22]
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	4413      	add	r3, r2
 80091d8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	0a5b      	lsrs	r3, r3, #9
 80091de:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d048      	beq.n	8009278 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80091e6:	7dba      	ldrb	r2, [r7, #22]
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	4413      	add	r3, r2
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80091f2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d908      	bls.n	800920c <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009200:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009204:	461a      	mov	r2, r3
 8009206:	7dbb      	ldrb	r3, [r7, #22]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009212:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	69b9      	ldr	r1, [r7, #24]
 800921c:	f7fd fe14 	bl	8006e48 <disk_write>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d005      	beq.n	8009232 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800922e:	2301      	movs	r3, #1
 8009230:	e09e      	b.n	8009370 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	69fa      	ldr	r2, [r7, #28]
 800923e:	429a      	cmp	r2, r3
 8009240:	d916      	bls.n	8009270 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	025b      	lsls	r3, r3, #9
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	4413      	add	r3, r2
 8009254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009258:	4619      	mov	r1, r3
 800925a:	f7fd fe33 	bl	8006ec4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009268:	b2da      	uxtb	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	025b      	lsls	r3, r3, #9
 8009274:	623b      	str	r3, [r7, #32]
				continue;
 8009276:	e047      	b.n	8009308 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	429a      	cmp	r2, r3
 8009282:	d01a      	beq.n	80092ba <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009290:	429a      	cmp	r2, r3
 8009292:	d212      	bcs.n	80092ba <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800929a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	2301      	movs	r3, #1
 80092a2:	693a      	ldr	r2, [r7, #16]
 80092a4:	f7fd fdb0 	bl	8006e08 <disk_read>
 80092a8:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80092b6:	2301      	movs	r3, #1
 80092b8:	e05a      	b.n	8009370 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80092c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80092d0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80092d2:	6a3a      	ldr	r2, [r7, #32]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d901      	bls.n	80092de <f_write+0x2c0>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80092e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	4413      	add	r3, r2
 80092ec:	6a3a      	ldr	r2, [r7, #32]
 80092ee:	69b9      	ldr	r1, [r7, #24]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fd fde7 	bl	8006ec4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80092fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009300:	b2da      	uxtb	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	4413      	add	r3, r2
 800930e:	61bb      	str	r3, [r7, #24]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	441a      	add	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	441a      	add	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f47f aea7 	bne.w	800908a <f_write+0x6c>
 800933c:	e000      	b.n	8009340 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800933e:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800934c:	429a      	cmp	r2, r3
 800934e:	d905      	bls.n	800935c <f_write+0x33e>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009362:	f043 0320 	orr.w	r3, r3, #32
 8009366:	b2da      	uxtb	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3728      	adds	r7, #40	; 0x28
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff fb57 	bl	8008a34 <validate>
 8009386:	4603      	mov	r3, r0
 8009388:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f040 80a8 	bne.w	80094e2 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009398:	f003 0320 	and.w	r3, r3, #32
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 80a0 	beq.w	80094e2 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80093a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d019      	beq.n	80093e4 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80093b6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80093c2:	2301      	movs	r3, #1
 80093c4:	f7fd fd40 	bl	8006e48 <disk_write>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80093ce:	2301      	movs	r3, #1
 80093d0:	e088      	b.n	80094e4 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80093d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80093f0:	4619      	mov	r1, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	f7fd ffdb 	bl	80073ae <move_window>
 80093f8:	4603      	mov	r3, r0
 80093fa:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80093fc:	7dfb      	ldrb	r3, [r7, #23]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d16f      	bne.n	80094e2 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009408:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	330b      	adds	r3, #11
 800940e:	781a      	ldrb	r2, [r3, #0]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	330b      	adds	r3, #11
 8009414:	f042 0220 	orr.w	r2, r2, #32
 8009418:	b2d2      	uxtb	r2, r2
 800941a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	331c      	adds	r3, #28
 8009426:	b2d2      	uxtb	r2, r2
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009430:	b29b      	uxth	r3, r3
 8009432:	0a1b      	lsrs	r3, r3, #8
 8009434:	b29a      	uxth	r2, r3
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	331d      	adds	r3, #29
 800943a:	b2d2      	uxtb	r2, r2
 800943c:	701a      	strb	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009444:	0c1a      	lsrs	r2, r3, #16
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	331e      	adds	r3, #30
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	701a      	strb	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009454:	0e1a      	lsrs	r2, r3, #24
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	331f      	adds	r3, #31
 800945a:	b2d2      	uxtb	r2, r2
 800945c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009464:	4619      	mov	r1, r3
 8009466:	6938      	ldr	r0, [r7, #16]
 8009468:	f7fe fd92 	bl	8007f90 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800946c:	f7fc ff3c 	bl	80062e8 <get_fattime>
 8009470:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	3316      	adds	r3, #22
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	b2d2      	uxtb	r2, r2
 800947a:	701a      	strb	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	b29b      	uxth	r3, r3
 8009480:	0a1b      	lsrs	r3, r3, #8
 8009482:	b29a      	uxth	r2, r3
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	3317      	adds	r3, #23
 8009488:	b2d2      	uxtb	r2, r2
 800948a:	701a      	strb	r2, [r3, #0]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	0c1a      	lsrs	r2, r3, #16
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	3318      	adds	r3, #24
 8009494:	b2d2      	uxtb	r2, r2
 8009496:	701a      	strb	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	0e1a      	lsrs	r2, r3, #24
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	3319      	adds	r3, #25
 80094a0:	b2d2      	uxtb	r2, r2
 80094a2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	3312      	adds	r3, #18
 80094a8:	2200      	movs	r2, #0
 80094aa:	701a      	strb	r2, [r3, #0]
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	3313      	adds	r3, #19
 80094b0:	2200      	movs	r2, #0
 80094b2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80094ba:	f023 0320 	bic.w	r3, r3, #32
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fd ff96 	bl	800740a <sync_fs>
 80094de:	4603      	mov	r3, r0
 80094e0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff ff3f 	bl	8009378 <f_sync>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d116      	bne.n	8009532 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff fa95 	bl	8008a34 <validate>
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10e      	bne.n	8009532 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800951a:	4618      	mov	r0, r3
 800951c:	f7fd fe90 	bl	8007240 <dec_lock>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d103      	bne.n	8009532 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009532:	7bfb      	ldrb	r3, [r7, #15]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800954a:	2301      	movs	r3, #1
 800954c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009552:	4b1e      	ldr	r3, [pc, #120]	; (80095cc <FATFS_LinkDriverEx+0x90>)
 8009554:	7a5b      	ldrb	r3, [r3, #9]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b01      	cmp	r3, #1
 800955a:	d831      	bhi.n	80095c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800955c:	4b1b      	ldr	r3, [pc, #108]	; (80095cc <FATFS_LinkDriverEx+0x90>)
 800955e:	7a5b      	ldrb	r3, [r3, #9]
 8009560:	b2db      	uxtb	r3, r3
 8009562:	461a      	mov	r2, r3
 8009564:	4b19      	ldr	r3, [pc, #100]	; (80095cc <FATFS_LinkDriverEx+0x90>)
 8009566:	2100      	movs	r1, #0
 8009568:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800956a:	4b18      	ldr	r3, [pc, #96]	; (80095cc <FATFS_LinkDriverEx+0x90>)
 800956c:	7a5b      	ldrb	r3, [r3, #9]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	4a16      	ldr	r2, [pc, #88]	; (80095cc <FATFS_LinkDriverEx+0x90>)
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800957a:	4b14      	ldr	r3, [pc, #80]	; (80095cc <FATFS_LinkDriverEx+0x90>)
 800957c:	7a5b      	ldrb	r3, [r3, #9]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	461a      	mov	r2, r3
 8009582:	4b12      	ldr	r3, [pc, #72]	; (80095cc <FATFS_LinkDriverEx+0x90>)
 8009584:	4413      	add	r3, r2
 8009586:	79fa      	ldrb	r2, [r7, #7]
 8009588:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800958a:	4b10      	ldr	r3, [pc, #64]	; (80095cc <FATFS_LinkDriverEx+0x90>)
 800958c:	7a5b      	ldrb	r3, [r3, #9]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	b2d1      	uxtb	r1, r2
 8009594:	4a0d      	ldr	r2, [pc, #52]	; (80095cc <FATFS_LinkDriverEx+0x90>)
 8009596:	7251      	strb	r1, [r2, #9]
 8009598:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800959a:	7dbb      	ldrb	r3, [r7, #22]
 800959c:	3330      	adds	r3, #48	; 0x30
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	3301      	adds	r3, #1
 80095a8:	223a      	movs	r2, #58	; 0x3a
 80095aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	3302      	adds	r3, #2
 80095b0:	222f      	movs	r2, #47	; 0x2f
 80095b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	3303      	adds	r3, #3
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bc80      	pop	{r7}
 80095ca:	4770      	bx	lr
 80095cc:	20001310 	.word	0x20001310

080095d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80095da:	2200      	movs	r2, #0
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7ff ffac 	bl	800953c <FATFS_LinkDriverEx>
 80095e4:	4603      	mov	r3, r0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path  
  * @param  lun : not used   
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{ 
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 8009600:	2301      	movs	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]
  
  if(disk.nbr >= 1)
 8009604:	4b14      	ldr	r3, [pc, #80]	; (8009658 <FATFS_UnLinkDriverEx+0x68>)
 8009606:	7a5b      	ldrb	r3, [r3, #9]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d01e      	beq.n	800964c <FATFS_UnLinkDriverEx+0x5c>
  {    
    DiskNum = path[0] - '0';
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	3b30      	subs	r3, #48	; 0x30
 8009614:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	4a0f      	ldr	r2, [pc, #60]	; (8009658 <FATFS_UnLinkDriverEx+0x68>)
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d013      	beq.n	800964c <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	4a0c      	ldr	r2, [pc, #48]	; (8009658 <FATFS_UnLinkDriverEx+0x68>)
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	2200      	movs	r2, #0
 800962e:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 8009630:	7bbb      	ldrb	r3, [r7, #14]
 8009632:	4a09      	ldr	r2, [pc, #36]	; (8009658 <FATFS_UnLinkDriverEx+0x68>)
 8009634:	4413      	add	r3, r2
 8009636:	2200      	movs	r2, #0
 8009638:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800963a:	4b07      	ldr	r3, [pc, #28]	; (8009658 <FATFS_UnLinkDriverEx+0x68>)
 800963c:	7a5b      	ldrb	r3, [r3, #9]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	3b01      	subs	r3, #1
 8009642:	b2da      	uxtb	r2, r3
 8009644:	4b04      	ldr	r3, [pc, #16]	; (8009658 <FATFS_UnLinkDriverEx+0x68>)
 8009646:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8009648:	2300      	movs	r3, #0
 800964a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  return ret;
 800964c:	7bfb      	ldrb	r3, [r7, #15]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	bc80      	pop	{r7}
 8009656:	4770      	bx	lr
 8009658:	20001310 	.word	0x20001310

0800965c <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path  
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{ 
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8009664:	2100      	movs	r1, #0
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff ffc2 	bl	80095f0 <FATFS_UnLinkDriverEx>
 800966c:	4603      	mov	r3, r0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
	...

08009678 <malloc>:
 8009678:	4b02      	ldr	r3, [pc, #8]	; (8009684 <malloc+0xc>)
 800967a:	4601      	mov	r1, r0
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	f000 b82b 	b.w	80096d8 <_malloc_r>
 8009682:	bf00      	nop
 8009684:	20000070 	.word	0x20000070

08009688 <free>:
 8009688:	4b02      	ldr	r3, [pc, #8]	; (8009694 <free+0xc>)
 800968a:	4601      	mov	r1, r0
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	f000 b94d 	b.w	800992c <_free_r>
 8009692:	bf00      	nop
 8009694:	20000070 	.word	0x20000070

08009698 <sbrk_aligned>:
 8009698:	b570      	push	{r4, r5, r6, lr}
 800969a:	4e0e      	ldr	r6, [pc, #56]	; (80096d4 <sbrk_aligned+0x3c>)
 800969c:	460c      	mov	r4, r1
 800969e:	6831      	ldr	r1, [r6, #0]
 80096a0:	4605      	mov	r5, r0
 80096a2:	b911      	cbnz	r1, 80096aa <sbrk_aligned+0x12>
 80096a4:	f000 f8f8 	bl	8009898 <_sbrk_r>
 80096a8:	6030      	str	r0, [r6, #0]
 80096aa:	4621      	mov	r1, r4
 80096ac:	4628      	mov	r0, r5
 80096ae:	f000 f8f3 	bl	8009898 <_sbrk_r>
 80096b2:	1c43      	adds	r3, r0, #1
 80096b4:	d00a      	beq.n	80096cc <sbrk_aligned+0x34>
 80096b6:	1cc4      	adds	r4, r0, #3
 80096b8:	f024 0403 	bic.w	r4, r4, #3
 80096bc:	42a0      	cmp	r0, r4
 80096be:	d007      	beq.n	80096d0 <sbrk_aligned+0x38>
 80096c0:	1a21      	subs	r1, r4, r0
 80096c2:	4628      	mov	r0, r5
 80096c4:	f000 f8e8 	bl	8009898 <_sbrk_r>
 80096c8:	3001      	adds	r0, #1
 80096ca:	d101      	bne.n	80096d0 <sbrk_aligned+0x38>
 80096cc:	f04f 34ff 	mov.w	r4, #4294967295
 80096d0:	4620      	mov	r0, r4
 80096d2:	bd70      	pop	{r4, r5, r6, pc}
 80096d4:	20001320 	.word	0x20001320

080096d8 <_malloc_r>:
 80096d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096dc:	1ccd      	adds	r5, r1, #3
 80096de:	f025 0503 	bic.w	r5, r5, #3
 80096e2:	3508      	adds	r5, #8
 80096e4:	2d0c      	cmp	r5, #12
 80096e6:	bf38      	it	cc
 80096e8:	250c      	movcc	r5, #12
 80096ea:	2d00      	cmp	r5, #0
 80096ec:	4607      	mov	r7, r0
 80096ee:	db01      	blt.n	80096f4 <_malloc_r+0x1c>
 80096f0:	42a9      	cmp	r1, r5
 80096f2:	d905      	bls.n	8009700 <_malloc_r+0x28>
 80096f4:	230c      	movs	r3, #12
 80096f6:	2600      	movs	r6, #0
 80096f8:	603b      	str	r3, [r7, #0]
 80096fa:	4630      	mov	r0, r6
 80096fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009700:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80097d4 <_malloc_r+0xfc>
 8009704:	f000 f868 	bl	80097d8 <__malloc_lock>
 8009708:	f8d8 3000 	ldr.w	r3, [r8]
 800970c:	461c      	mov	r4, r3
 800970e:	bb5c      	cbnz	r4, 8009768 <_malloc_r+0x90>
 8009710:	4629      	mov	r1, r5
 8009712:	4638      	mov	r0, r7
 8009714:	f7ff ffc0 	bl	8009698 <sbrk_aligned>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	4604      	mov	r4, r0
 800971c:	d155      	bne.n	80097ca <_malloc_r+0xf2>
 800971e:	f8d8 4000 	ldr.w	r4, [r8]
 8009722:	4626      	mov	r6, r4
 8009724:	2e00      	cmp	r6, #0
 8009726:	d145      	bne.n	80097b4 <_malloc_r+0xdc>
 8009728:	2c00      	cmp	r4, #0
 800972a:	d048      	beq.n	80097be <_malloc_r+0xe6>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	4631      	mov	r1, r6
 8009730:	4638      	mov	r0, r7
 8009732:	eb04 0903 	add.w	r9, r4, r3
 8009736:	f000 f8af 	bl	8009898 <_sbrk_r>
 800973a:	4581      	cmp	r9, r0
 800973c:	d13f      	bne.n	80097be <_malloc_r+0xe6>
 800973e:	6821      	ldr	r1, [r4, #0]
 8009740:	4638      	mov	r0, r7
 8009742:	1a6d      	subs	r5, r5, r1
 8009744:	4629      	mov	r1, r5
 8009746:	f7ff ffa7 	bl	8009698 <sbrk_aligned>
 800974a:	3001      	adds	r0, #1
 800974c:	d037      	beq.n	80097be <_malloc_r+0xe6>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	442b      	add	r3, r5
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	f8d8 3000 	ldr.w	r3, [r8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d038      	beq.n	80097ce <_malloc_r+0xf6>
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	42a2      	cmp	r2, r4
 8009760:	d12b      	bne.n	80097ba <_malloc_r+0xe2>
 8009762:	2200      	movs	r2, #0
 8009764:	605a      	str	r2, [r3, #4]
 8009766:	e00f      	b.n	8009788 <_malloc_r+0xb0>
 8009768:	6822      	ldr	r2, [r4, #0]
 800976a:	1b52      	subs	r2, r2, r5
 800976c:	d41f      	bmi.n	80097ae <_malloc_r+0xd6>
 800976e:	2a0b      	cmp	r2, #11
 8009770:	d917      	bls.n	80097a2 <_malloc_r+0xca>
 8009772:	1961      	adds	r1, r4, r5
 8009774:	42a3      	cmp	r3, r4
 8009776:	6025      	str	r5, [r4, #0]
 8009778:	bf18      	it	ne
 800977a:	6059      	strne	r1, [r3, #4]
 800977c:	6863      	ldr	r3, [r4, #4]
 800977e:	bf08      	it	eq
 8009780:	f8c8 1000 	streq.w	r1, [r8]
 8009784:	5162      	str	r2, [r4, r5]
 8009786:	604b      	str	r3, [r1, #4]
 8009788:	4638      	mov	r0, r7
 800978a:	f104 060b 	add.w	r6, r4, #11
 800978e:	f000 f829 	bl	80097e4 <__malloc_unlock>
 8009792:	f026 0607 	bic.w	r6, r6, #7
 8009796:	1d23      	adds	r3, r4, #4
 8009798:	1af2      	subs	r2, r6, r3
 800979a:	d0ae      	beq.n	80096fa <_malloc_r+0x22>
 800979c:	1b9b      	subs	r3, r3, r6
 800979e:	50a3      	str	r3, [r4, r2]
 80097a0:	e7ab      	b.n	80096fa <_malloc_r+0x22>
 80097a2:	42a3      	cmp	r3, r4
 80097a4:	6862      	ldr	r2, [r4, #4]
 80097a6:	d1dd      	bne.n	8009764 <_malloc_r+0x8c>
 80097a8:	f8c8 2000 	str.w	r2, [r8]
 80097ac:	e7ec      	b.n	8009788 <_malloc_r+0xb0>
 80097ae:	4623      	mov	r3, r4
 80097b0:	6864      	ldr	r4, [r4, #4]
 80097b2:	e7ac      	b.n	800970e <_malloc_r+0x36>
 80097b4:	4634      	mov	r4, r6
 80097b6:	6876      	ldr	r6, [r6, #4]
 80097b8:	e7b4      	b.n	8009724 <_malloc_r+0x4c>
 80097ba:	4613      	mov	r3, r2
 80097bc:	e7cc      	b.n	8009758 <_malloc_r+0x80>
 80097be:	230c      	movs	r3, #12
 80097c0:	4638      	mov	r0, r7
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	f000 f80e 	bl	80097e4 <__malloc_unlock>
 80097c8:	e797      	b.n	80096fa <_malloc_r+0x22>
 80097ca:	6025      	str	r5, [r4, #0]
 80097cc:	e7dc      	b.n	8009788 <_malloc_r+0xb0>
 80097ce:	605b      	str	r3, [r3, #4]
 80097d0:	deff      	udf	#255	; 0xff
 80097d2:	bf00      	nop
 80097d4:	2000131c 	.word	0x2000131c

080097d8 <__malloc_lock>:
 80097d8:	4801      	ldr	r0, [pc, #4]	; (80097e0 <__malloc_lock+0x8>)
 80097da:	f000 b897 	b.w	800990c <__retarget_lock_acquire_recursive>
 80097de:	bf00      	nop
 80097e0:	20001460 	.word	0x20001460

080097e4 <__malloc_unlock>:
 80097e4:	4801      	ldr	r0, [pc, #4]	; (80097ec <__malloc_unlock+0x8>)
 80097e6:	f000 b892 	b.w	800990e <__retarget_lock_release_recursive>
 80097ea:	bf00      	nop
 80097ec:	20001460 	.word	0x20001460

080097f0 <siprintf>:
 80097f0:	b40e      	push	{r1, r2, r3}
 80097f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097f6:	b500      	push	{lr}
 80097f8:	b09c      	sub	sp, #112	; 0x70
 80097fa:	ab1d      	add	r3, sp, #116	; 0x74
 80097fc:	9002      	str	r0, [sp, #8]
 80097fe:	9006      	str	r0, [sp, #24]
 8009800:	9107      	str	r1, [sp, #28]
 8009802:	9104      	str	r1, [sp, #16]
 8009804:	4808      	ldr	r0, [pc, #32]	; (8009828 <siprintf+0x38>)
 8009806:	4909      	ldr	r1, [pc, #36]	; (800982c <siprintf+0x3c>)
 8009808:	f853 2b04 	ldr.w	r2, [r3], #4
 800980c:	9105      	str	r1, [sp, #20]
 800980e:	6800      	ldr	r0, [r0, #0]
 8009810:	a902      	add	r1, sp, #8
 8009812:	9301      	str	r3, [sp, #4]
 8009814:	f000 f92c 	bl	8009a70 <_svfiprintf_r>
 8009818:	2200      	movs	r2, #0
 800981a:	9b02      	ldr	r3, [sp, #8]
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	b01c      	add	sp, #112	; 0x70
 8009820:	f85d eb04 	ldr.w	lr, [sp], #4
 8009824:	b003      	add	sp, #12
 8009826:	4770      	bx	lr
 8009828:	20000070 	.word	0x20000070
 800982c:	ffff0208 	.word	0xffff0208

08009830 <siscanf>:
 8009830:	b40e      	push	{r1, r2, r3}
 8009832:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009836:	b530      	push	{r4, r5, lr}
 8009838:	b09c      	sub	sp, #112	; 0x70
 800983a:	ac1f      	add	r4, sp, #124	; 0x7c
 800983c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009840:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009844:	9002      	str	r0, [sp, #8]
 8009846:	9006      	str	r0, [sp, #24]
 8009848:	f7f6 fc8a 	bl	8000160 <strlen>
 800984c:	4b0b      	ldr	r3, [pc, #44]	; (800987c <siscanf+0x4c>)
 800984e:	9003      	str	r0, [sp, #12]
 8009850:	930b      	str	r3, [sp, #44]	; 0x2c
 8009852:	2300      	movs	r3, #0
 8009854:	930f      	str	r3, [sp, #60]	; 0x3c
 8009856:	9314      	str	r3, [sp, #80]	; 0x50
 8009858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800985c:	9007      	str	r0, [sp, #28]
 800985e:	4808      	ldr	r0, [pc, #32]	; (8009880 <siscanf+0x50>)
 8009860:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009864:	462a      	mov	r2, r5
 8009866:	4623      	mov	r3, r4
 8009868:	a902      	add	r1, sp, #8
 800986a:	6800      	ldr	r0, [r0, #0]
 800986c:	9401      	str	r4, [sp, #4]
 800986e:	f000 fa57 	bl	8009d20 <__ssvfiscanf_r>
 8009872:	b01c      	add	sp, #112	; 0x70
 8009874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009878:	b003      	add	sp, #12
 800987a:	4770      	bx	lr
 800987c:	08009885 	.word	0x08009885
 8009880:	20000070 	.word	0x20000070

08009884 <__seofread>:
 8009884:	2000      	movs	r0, #0
 8009886:	4770      	bx	lr

08009888 <memset>:
 8009888:	4603      	mov	r3, r0
 800988a:	4402      	add	r2, r0
 800988c:	4293      	cmp	r3, r2
 800988e:	d100      	bne.n	8009892 <memset+0xa>
 8009890:	4770      	bx	lr
 8009892:	f803 1b01 	strb.w	r1, [r3], #1
 8009896:	e7f9      	b.n	800988c <memset+0x4>

08009898 <_sbrk_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	2300      	movs	r3, #0
 800989c:	4d05      	ldr	r5, [pc, #20]	; (80098b4 <_sbrk_r+0x1c>)
 800989e:	4604      	mov	r4, r0
 80098a0:	4608      	mov	r0, r1
 80098a2:	602b      	str	r3, [r5, #0]
 80098a4:	f7f7 fea8 	bl	80015f8 <_sbrk>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_sbrk_r+0x1a>
 80098ac:	682b      	ldr	r3, [r5, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_sbrk_r+0x1a>
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	2000145c 	.word	0x2000145c

080098b8 <__errno>:
 80098b8:	4b01      	ldr	r3, [pc, #4]	; (80098c0 <__errno+0x8>)
 80098ba:	6818      	ldr	r0, [r3, #0]
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	20000070 	.word	0x20000070

080098c4 <__libc_init_array>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	2600      	movs	r6, #0
 80098c8:	4d0c      	ldr	r5, [pc, #48]	; (80098fc <__libc_init_array+0x38>)
 80098ca:	4c0d      	ldr	r4, [pc, #52]	; (8009900 <__libc_init_array+0x3c>)
 80098cc:	1b64      	subs	r4, r4, r5
 80098ce:	10a4      	asrs	r4, r4, #2
 80098d0:	42a6      	cmp	r6, r4
 80098d2:	d109      	bne.n	80098e8 <__libc_init_array+0x24>
 80098d4:	f001 f840 	bl	800a958 <_init>
 80098d8:	2600      	movs	r6, #0
 80098da:	4d0a      	ldr	r5, [pc, #40]	; (8009904 <__libc_init_array+0x40>)
 80098dc:	4c0a      	ldr	r4, [pc, #40]	; (8009908 <__libc_init_array+0x44>)
 80098de:	1b64      	subs	r4, r4, r5
 80098e0:	10a4      	asrs	r4, r4, #2
 80098e2:	42a6      	cmp	r6, r4
 80098e4:	d105      	bne.n	80098f2 <__libc_init_array+0x2e>
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ec:	4798      	blx	r3
 80098ee:	3601      	adds	r6, #1
 80098f0:	e7ee      	b.n	80098d0 <__libc_init_array+0xc>
 80098f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f6:	4798      	blx	r3
 80098f8:	3601      	adds	r6, #1
 80098fa:	e7f2      	b.n	80098e2 <__libc_init_array+0x1e>
 80098fc:	0800ad20 	.word	0x0800ad20
 8009900:	0800ad20 	.word	0x0800ad20
 8009904:	0800ad20 	.word	0x0800ad20
 8009908:	0800ad24 	.word	0x0800ad24

0800990c <__retarget_lock_acquire_recursive>:
 800990c:	4770      	bx	lr

0800990e <__retarget_lock_release_recursive>:
 800990e:	4770      	bx	lr

08009910 <memcpy>:
 8009910:	440a      	add	r2, r1
 8009912:	4291      	cmp	r1, r2
 8009914:	f100 33ff 	add.w	r3, r0, #4294967295
 8009918:	d100      	bne.n	800991c <memcpy+0xc>
 800991a:	4770      	bx	lr
 800991c:	b510      	push	{r4, lr}
 800991e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009922:	4291      	cmp	r1, r2
 8009924:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009928:	d1f9      	bne.n	800991e <memcpy+0xe>
 800992a:	bd10      	pop	{r4, pc}

0800992c <_free_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4605      	mov	r5, r0
 8009930:	2900      	cmp	r1, #0
 8009932:	d040      	beq.n	80099b6 <_free_r+0x8a>
 8009934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009938:	1f0c      	subs	r4, r1, #4
 800993a:	2b00      	cmp	r3, #0
 800993c:	bfb8      	it	lt
 800993e:	18e4      	addlt	r4, r4, r3
 8009940:	f7ff ff4a 	bl	80097d8 <__malloc_lock>
 8009944:	4a1c      	ldr	r2, [pc, #112]	; (80099b8 <_free_r+0x8c>)
 8009946:	6813      	ldr	r3, [r2, #0]
 8009948:	b933      	cbnz	r3, 8009958 <_free_r+0x2c>
 800994a:	6063      	str	r3, [r4, #4]
 800994c:	6014      	str	r4, [r2, #0]
 800994e:	4628      	mov	r0, r5
 8009950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009954:	f7ff bf46 	b.w	80097e4 <__malloc_unlock>
 8009958:	42a3      	cmp	r3, r4
 800995a:	d908      	bls.n	800996e <_free_r+0x42>
 800995c:	6820      	ldr	r0, [r4, #0]
 800995e:	1821      	adds	r1, r4, r0
 8009960:	428b      	cmp	r3, r1
 8009962:	bf01      	itttt	eq
 8009964:	6819      	ldreq	r1, [r3, #0]
 8009966:	685b      	ldreq	r3, [r3, #4]
 8009968:	1809      	addeq	r1, r1, r0
 800996a:	6021      	streq	r1, [r4, #0]
 800996c:	e7ed      	b.n	800994a <_free_r+0x1e>
 800996e:	461a      	mov	r2, r3
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	b10b      	cbz	r3, 8009978 <_free_r+0x4c>
 8009974:	42a3      	cmp	r3, r4
 8009976:	d9fa      	bls.n	800996e <_free_r+0x42>
 8009978:	6811      	ldr	r1, [r2, #0]
 800997a:	1850      	adds	r0, r2, r1
 800997c:	42a0      	cmp	r0, r4
 800997e:	d10b      	bne.n	8009998 <_free_r+0x6c>
 8009980:	6820      	ldr	r0, [r4, #0]
 8009982:	4401      	add	r1, r0
 8009984:	1850      	adds	r0, r2, r1
 8009986:	4283      	cmp	r3, r0
 8009988:	6011      	str	r1, [r2, #0]
 800998a:	d1e0      	bne.n	800994e <_free_r+0x22>
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	4408      	add	r0, r1
 8009992:	6010      	str	r0, [r2, #0]
 8009994:	6053      	str	r3, [r2, #4]
 8009996:	e7da      	b.n	800994e <_free_r+0x22>
 8009998:	d902      	bls.n	80099a0 <_free_r+0x74>
 800999a:	230c      	movs	r3, #12
 800999c:	602b      	str	r3, [r5, #0]
 800999e:	e7d6      	b.n	800994e <_free_r+0x22>
 80099a0:	6820      	ldr	r0, [r4, #0]
 80099a2:	1821      	adds	r1, r4, r0
 80099a4:	428b      	cmp	r3, r1
 80099a6:	bf01      	itttt	eq
 80099a8:	6819      	ldreq	r1, [r3, #0]
 80099aa:	685b      	ldreq	r3, [r3, #4]
 80099ac:	1809      	addeq	r1, r1, r0
 80099ae:	6021      	streq	r1, [r4, #0]
 80099b0:	6063      	str	r3, [r4, #4]
 80099b2:	6054      	str	r4, [r2, #4]
 80099b4:	e7cb      	b.n	800994e <_free_r+0x22>
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	2000131c 	.word	0x2000131c

080099bc <__ssputs_r>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	461f      	mov	r7, r3
 80099c2:	688e      	ldr	r6, [r1, #8]
 80099c4:	4682      	mov	sl, r0
 80099c6:	42be      	cmp	r6, r7
 80099c8:	460c      	mov	r4, r1
 80099ca:	4690      	mov	r8, r2
 80099cc:	680b      	ldr	r3, [r1, #0]
 80099ce:	d82c      	bhi.n	8009a2a <__ssputs_r+0x6e>
 80099d0:	898a      	ldrh	r2, [r1, #12]
 80099d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099d6:	d026      	beq.n	8009a26 <__ssputs_r+0x6a>
 80099d8:	6965      	ldr	r5, [r4, #20]
 80099da:	6909      	ldr	r1, [r1, #16]
 80099dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099e0:	eba3 0901 	sub.w	r9, r3, r1
 80099e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099e8:	1c7b      	adds	r3, r7, #1
 80099ea:	444b      	add	r3, r9
 80099ec:	106d      	asrs	r5, r5, #1
 80099ee:	429d      	cmp	r5, r3
 80099f0:	bf38      	it	cc
 80099f2:	461d      	movcc	r5, r3
 80099f4:	0553      	lsls	r3, r2, #21
 80099f6:	d527      	bpl.n	8009a48 <__ssputs_r+0x8c>
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7ff fe6d 	bl	80096d8 <_malloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	b360      	cbz	r0, 8009a5c <__ssputs_r+0xa0>
 8009a02:	464a      	mov	r2, r9
 8009a04:	6921      	ldr	r1, [r4, #16]
 8009a06:	f7ff ff83 	bl	8009910 <memcpy>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	6126      	str	r6, [r4, #16]
 8009a18:	444e      	add	r6, r9
 8009a1a:	6026      	str	r6, [r4, #0]
 8009a1c:	463e      	mov	r6, r7
 8009a1e:	6165      	str	r5, [r4, #20]
 8009a20:	eba5 0509 	sub.w	r5, r5, r9
 8009a24:	60a5      	str	r5, [r4, #8]
 8009a26:	42be      	cmp	r6, r7
 8009a28:	d900      	bls.n	8009a2c <__ssputs_r+0x70>
 8009a2a:	463e      	mov	r6, r7
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	4641      	mov	r1, r8
 8009a30:	6820      	ldr	r0, [r4, #0]
 8009a32:	f000 fe3e 	bl	800a6b2 <memmove>
 8009a36:	2000      	movs	r0, #0
 8009a38:	68a3      	ldr	r3, [r4, #8]
 8009a3a:	1b9b      	subs	r3, r3, r6
 8009a3c:	60a3      	str	r3, [r4, #8]
 8009a3e:	6823      	ldr	r3, [r4, #0]
 8009a40:	4433      	add	r3, r6
 8009a42:	6023      	str	r3, [r4, #0]
 8009a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a48:	462a      	mov	r2, r5
 8009a4a:	f000 fe5a 	bl	800a702 <_realloc_r>
 8009a4e:	4606      	mov	r6, r0
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d1e0      	bne.n	8009a16 <__ssputs_r+0x5a>
 8009a54:	4650      	mov	r0, sl
 8009a56:	6921      	ldr	r1, [r4, #16]
 8009a58:	f7ff ff68 	bl	800992c <_free_r>
 8009a5c:	230c      	movs	r3, #12
 8009a5e:	f8ca 3000 	str.w	r3, [sl]
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	e7e9      	b.n	8009a44 <__ssputs_r+0x88>

08009a70 <_svfiprintf_r>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	4698      	mov	r8, r3
 8009a76:	898b      	ldrh	r3, [r1, #12]
 8009a78:	4607      	mov	r7, r0
 8009a7a:	061b      	lsls	r3, r3, #24
 8009a7c:	460d      	mov	r5, r1
 8009a7e:	4614      	mov	r4, r2
 8009a80:	b09d      	sub	sp, #116	; 0x74
 8009a82:	d50e      	bpl.n	8009aa2 <_svfiprintf_r+0x32>
 8009a84:	690b      	ldr	r3, [r1, #16]
 8009a86:	b963      	cbnz	r3, 8009aa2 <_svfiprintf_r+0x32>
 8009a88:	2140      	movs	r1, #64	; 0x40
 8009a8a:	f7ff fe25 	bl	80096d8 <_malloc_r>
 8009a8e:	6028      	str	r0, [r5, #0]
 8009a90:	6128      	str	r0, [r5, #16]
 8009a92:	b920      	cbnz	r0, 8009a9e <_svfiprintf_r+0x2e>
 8009a94:	230c      	movs	r3, #12
 8009a96:	603b      	str	r3, [r7, #0]
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	e0d0      	b.n	8009c40 <_svfiprintf_r+0x1d0>
 8009a9e:	2340      	movs	r3, #64	; 0x40
 8009aa0:	616b      	str	r3, [r5, #20]
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa6:	2320      	movs	r3, #32
 8009aa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aac:	2330      	movs	r3, #48	; 0x30
 8009aae:	f04f 0901 	mov.w	r9, #1
 8009ab2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009c58 <_svfiprintf_r+0x1e8>
 8009aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009abe:	4623      	mov	r3, r4
 8009ac0:	469a      	mov	sl, r3
 8009ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ac6:	b10a      	cbz	r2, 8009acc <_svfiprintf_r+0x5c>
 8009ac8:	2a25      	cmp	r2, #37	; 0x25
 8009aca:	d1f9      	bne.n	8009ac0 <_svfiprintf_r+0x50>
 8009acc:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad0:	d00b      	beq.n	8009aea <_svfiprintf_r+0x7a>
 8009ad2:	465b      	mov	r3, fp
 8009ad4:	4622      	mov	r2, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	4638      	mov	r0, r7
 8009ada:	f7ff ff6f 	bl	80099bc <__ssputs_r>
 8009ade:	3001      	adds	r0, #1
 8009ae0:	f000 80a9 	beq.w	8009c36 <_svfiprintf_r+0x1c6>
 8009ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae6:	445a      	add	r2, fp
 8009ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8009aea:	f89a 3000 	ldrb.w	r3, [sl]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f000 80a1 	beq.w	8009c36 <_svfiprintf_r+0x1c6>
 8009af4:	2300      	movs	r3, #0
 8009af6:	f04f 32ff 	mov.w	r2, #4294967295
 8009afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009afe:	f10a 0a01 	add.w	sl, sl, #1
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	9307      	str	r3, [sp, #28]
 8009b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b0c:	4654      	mov	r4, sl
 8009b0e:	2205      	movs	r2, #5
 8009b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b14:	4850      	ldr	r0, [pc, #320]	; (8009c58 <_svfiprintf_r+0x1e8>)
 8009b16:	f000 fde6 	bl	800a6e6 <memchr>
 8009b1a:	9a04      	ldr	r2, [sp, #16]
 8009b1c:	b9d8      	cbnz	r0, 8009b56 <_svfiprintf_r+0xe6>
 8009b1e:	06d0      	lsls	r0, r2, #27
 8009b20:	bf44      	itt	mi
 8009b22:	2320      	movmi	r3, #32
 8009b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b28:	0711      	lsls	r1, r2, #28
 8009b2a:	bf44      	itt	mi
 8009b2c:	232b      	movmi	r3, #43	; 0x2b
 8009b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b32:	f89a 3000 	ldrb.w	r3, [sl]
 8009b36:	2b2a      	cmp	r3, #42	; 0x2a
 8009b38:	d015      	beq.n	8009b66 <_svfiprintf_r+0xf6>
 8009b3a:	4654      	mov	r4, sl
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	f04f 0c0a 	mov.w	ip, #10
 8009b42:	9a07      	ldr	r2, [sp, #28]
 8009b44:	4621      	mov	r1, r4
 8009b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b4a:	3b30      	subs	r3, #48	; 0x30
 8009b4c:	2b09      	cmp	r3, #9
 8009b4e:	d94d      	bls.n	8009bec <_svfiprintf_r+0x17c>
 8009b50:	b1b0      	cbz	r0, 8009b80 <_svfiprintf_r+0x110>
 8009b52:	9207      	str	r2, [sp, #28]
 8009b54:	e014      	b.n	8009b80 <_svfiprintf_r+0x110>
 8009b56:	eba0 0308 	sub.w	r3, r0, r8
 8009b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	46a2      	mov	sl, r4
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	e7d2      	b.n	8009b0c <_svfiprintf_r+0x9c>
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	1d19      	adds	r1, r3, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	9103      	str	r1, [sp, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	bfbb      	ittet	lt
 8009b72:	425b      	neglt	r3, r3
 8009b74:	f042 0202 	orrlt.w	r2, r2, #2
 8009b78:	9307      	strge	r3, [sp, #28]
 8009b7a:	9307      	strlt	r3, [sp, #28]
 8009b7c:	bfb8      	it	lt
 8009b7e:	9204      	strlt	r2, [sp, #16]
 8009b80:	7823      	ldrb	r3, [r4, #0]
 8009b82:	2b2e      	cmp	r3, #46	; 0x2e
 8009b84:	d10c      	bne.n	8009ba0 <_svfiprintf_r+0x130>
 8009b86:	7863      	ldrb	r3, [r4, #1]
 8009b88:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8a:	d134      	bne.n	8009bf6 <_svfiprintf_r+0x186>
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	3402      	adds	r4, #2
 8009b90:	1d1a      	adds	r2, r3, #4
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	9203      	str	r2, [sp, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	bfb8      	it	lt
 8009b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b9e:	9305      	str	r3, [sp, #20]
 8009ba0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009c5c <_svfiprintf_r+0x1ec>
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	7821      	ldrb	r1, [r4, #0]
 8009baa:	f000 fd9c 	bl	800a6e6 <memchr>
 8009bae:	b138      	cbz	r0, 8009bc0 <_svfiprintf_r+0x150>
 8009bb0:	2240      	movs	r2, #64	; 0x40
 8009bb2:	9b04      	ldr	r3, [sp, #16]
 8009bb4:	eba0 000a 	sub.w	r0, r0, sl
 8009bb8:	4082      	lsls	r2, r0
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	3401      	adds	r4, #1
 8009bbe:	9304      	str	r3, [sp, #16]
 8009bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc4:	2206      	movs	r2, #6
 8009bc6:	4826      	ldr	r0, [pc, #152]	; (8009c60 <_svfiprintf_r+0x1f0>)
 8009bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bcc:	f000 fd8b 	bl	800a6e6 <memchr>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d038      	beq.n	8009c46 <_svfiprintf_r+0x1d6>
 8009bd4:	4b23      	ldr	r3, [pc, #140]	; (8009c64 <_svfiprintf_r+0x1f4>)
 8009bd6:	bb1b      	cbnz	r3, 8009c20 <_svfiprintf_r+0x1b0>
 8009bd8:	9b03      	ldr	r3, [sp, #12]
 8009bda:	3307      	adds	r3, #7
 8009bdc:	f023 0307 	bic.w	r3, r3, #7
 8009be0:	3308      	adds	r3, #8
 8009be2:	9303      	str	r3, [sp, #12]
 8009be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be6:	4433      	add	r3, r6
 8009be8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bea:	e768      	b.n	8009abe <_svfiprintf_r+0x4e>
 8009bec:	460c      	mov	r4, r1
 8009bee:	2001      	movs	r0, #1
 8009bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf4:	e7a6      	b.n	8009b44 <_svfiprintf_r+0xd4>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f04f 0c0a 	mov.w	ip, #10
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	3401      	adds	r4, #1
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	4620      	mov	r0, r4
 8009c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c08:	3a30      	subs	r2, #48	; 0x30
 8009c0a:	2a09      	cmp	r2, #9
 8009c0c:	d903      	bls.n	8009c16 <_svfiprintf_r+0x1a6>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0c6      	beq.n	8009ba0 <_svfiprintf_r+0x130>
 8009c12:	9105      	str	r1, [sp, #20]
 8009c14:	e7c4      	b.n	8009ba0 <_svfiprintf_r+0x130>
 8009c16:	4604      	mov	r4, r0
 8009c18:	2301      	movs	r3, #1
 8009c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c1e:	e7f0      	b.n	8009c02 <_svfiprintf_r+0x192>
 8009c20:	ab03      	add	r3, sp, #12
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	462a      	mov	r2, r5
 8009c26:	4638      	mov	r0, r7
 8009c28:	4b0f      	ldr	r3, [pc, #60]	; (8009c68 <_svfiprintf_r+0x1f8>)
 8009c2a:	a904      	add	r1, sp, #16
 8009c2c:	f3af 8000 	nop.w
 8009c30:	1c42      	adds	r2, r0, #1
 8009c32:	4606      	mov	r6, r0
 8009c34:	d1d6      	bne.n	8009be4 <_svfiprintf_r+0x174>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	065b      	lsls	r3, r3, #25
 8009c3a:	f53f af2d 	bmi.w	8009a98 <_svfiprintf_r+0x28>
 8009c3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c40:	b01d      	add	sp, #116	; 0x74
 8009c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c46:	ab03      	add	r3, sp, #12
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	462a      	mov	r2, r5
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <_svfiprintf_r+0x1f8>)
 8009c50:	a904      	add	r1, sp, #16
 8009c52:	f000 fa4f 	bl	800a0f4 <_printf_i>
 8009c56:	e7eb      	b.n	8009c30 <_svfiprintf_r+0x1c0>
 8009c58:	0800abd0 	.word	0x0800abd0
 8009c5c:	0800abd6 	.word	0x0800abd6
 8009c60:	0800abda 	.word	0x0800abda
 8009c64:	00000000 	.word	0x00000000
 8009c68:	080099bd 	.word	0x080099bd

08009c6c <_sungetc_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	1c4b      	adds	r3, r1, #1
 8009c70:	4614      	mov	r4, r2
 8009c72:	d103      	bne.n	8009c7c <_sungetc_r+0x10>
 8009c74:	f04f 35ff 	mov.w	r5, #4294967295
 8009c78:	4628      	mov	r0, r5
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	8993      	ldrh	r3, [r2, #12]
 8009c7e:	b2cd      	uxtb	r5, r1
 8009c80:	f023 0320 	bic.w	r3, r3, #32
 8009c84:	8193      	strh	r3, [r2, #12]
 8009c86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c88:	6852      	ldr	r2, [r2, #4]
 8009c8a:	b18b      	cbz	r3, 8009cb0 <_sungetc_r+0x44>
 8009c8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	dd08      	ble.n	8009ca4 <_sungetc_r+0x38>
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	1e5a      	subs	r2, r3, #1
 8009c96:	6022      	str	r2, [r4, #0]
 8009c98:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009c9c:	6863      	ldr	r3, [r4, #4]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	6063      	str	r3, [r4, #4]
 8009ca2:	e7e9      	b.n	8009c78 <_sungetc_r+0xc>
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	f000 fccc 	bl	800a642 <__submore>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	d0f1      	beq.n	8009c92 <_sungetc_r+0x26>
 8009cae:	e7e1      	b.n	8009c74 <_sungetc_r+0x8>
 8009cb0:	6921      	ldr	r1, [r4, #16]
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	b151      	cbz	r1, 8009ccc <_sungetc_r+0x60>
 8009cb6:	4299      	cmp	r1, r3
 8009cb8:	d208      	bcs.n	8009ccc <_sungetc_r+0x60>
 8009cba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009cbe:	42a9      	cmp	r1, r5
 8009cc0:	d104      	bne.n	8009ccc <_sungetc_r+0x60>
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	3201      	adds	r2, #1
 8009cc6:	6023      	str	r3, [r4, #0]
 8009cc8:	6062      	str	r2, [r4, #4]
 8009cca:	e7d5      	b.n	8009c78 <_sungetc_r+0xc>
 8009ccc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009cd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	63a3      	str	r3, [r4, #56]	; 0x38
 8009cda:	4623      	mov	r3, r4
 8009cdc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e7dc      	b.n	8009ca0 <_sungetc_r+0x34>

08009ce6 <__ssrefill_r>:
 8009ce6:	b510      	push	{r4, lr}
 8009ce8:	460c      	mov	r4, r1
 8009cea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009cec:	b169      	cbz	r1, 8009d0a <__ssrefill_r+0x24>
 8009cee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cf2:	4299      	cmp	r1, r3
 8009cf4:	d001      	beq.n	8009cfa <__ssrefill_r+0x14>
 8009cf6:	f7ff fe19 	bl	800992c <_free_r>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cfe:	6360      	str	r0, [r4, #52]	; 0x34
 8009d00:	6063      	str	r3, [r4, #4]
 8009d02:	b113      	cbz	r3, 8009d0a <__ssrefill_r+0x24>
 8009d04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	bd10      	pop	{r4, pc}
 8009d0a:	6923      	ldr	r3, [r4, #16]
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	2300      	movs	r3, #0
 8009d14:	6063      	str	r3, [r4, #4]
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	f043 0320 	orr.w	r3, r3, #32
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	e7f3      	b.n	8009d08 <__ssrefill_r+0x22>

08009d20 <__ssvfiscanf_r>:
 8009d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d24:	460c      	mov	r4, r1
 8009d26:	2100      	movs	r1, #0
 8009d28:	4606      	mov	r6, r0
 8009d2a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009d2e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009d32:	49a6      	ldr	r1, [pc, #664]	; (8009fcc <__ssvfiscanf_r+0x2ac>)
 8009d34:	f10d 0804 	add.w	r8, sp, #4
 8009d38:	91a0      	str	r1, [sp, #640]	; 0x280
 8009d3a:	49a5      	ldr	r1, [pc, #660]	; (8009fd0 <__ssvfiscanf_r+0x2b0>)
 8009d3c:	4fa5      	ldr	r7, [pc, #660]	; (8009fd4 <__ssvfiscanf_r+0x2b4>)
 8009d3e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009fd8 <__ssvfiscanf_r+0x2b8>
 8009d42:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009d46:	91a1      	str	r1, [sp, #644]	; 0x284
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	7813      	ldrb	r3, [r2, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 815a 	beq.w	800a006 <__ssvfiscanf_r+0x2e6>
 8009d52:	5cf9      	ldrb	r1, [r7, r3]
 8009d54:	1c55      	adds	r5, r2, #1
 8009d56:	f011 0108 	ands.w	r1, r1, #8
 8009d5a:	d019      	beq.n	8009d90 <__ssvfiscanf_r+0x70>
 8009d5c:	6863      	ldr	r3, [r4, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	dd0f      	ble.n	8009d82 <__ssvfiscanf_r+0x62>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	781a      	ldrb	r2, [r3, #0]
 8009d66:	5cba      	ldrb	r2, [r7, r2]
 8009d68:	0712      	lsls	r2, r2, #28
 8009d6a:	d401      	bmi.n	8009d70 <__ssvfiscanf_r+0x50>
 8009d6c:	462a      	mov	r2, r5
 8009d6e:	e7ec      	b.n	8009d4a <__ssvfiscanf_r+0x2a>
 8009d70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009d72:	3301      	adds	r3, #1
 8009d74:	3201      	adds	r2, #1
 8009d76:	9245      	str	r2, [sp, #276]	; 0x114
 8009d78:	6862      	ldr	r2, [r4, #4]
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	3a01      	subs	r2, #1
 8009d7e:	6062      	str	r2, [r4, #4]
 8009d80:	e7ec      	b.n	8009d5c <__ssvfiscanf_r+0x3c>
 8009d82:	4621      	mov	r1, r4
 8009d84:	4630      	mov	r0, r6
 8009d86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009d88:	4798      	blx	r3
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d0e9      	beq.n	8009d62 <__ssvfiscanf_r+0x42>
 8009d8e:	e7ed      	b.n	8009d6c <__ssvfiscanf_r+0x4c>
 8009d90:	2b25      	cmp	r3, #37	; 0x25
 8009d92:	d012      	beq.n	8009dba <__ssvfiscanf_r+0x9a>
 8009d94:	469a      	mov	sl, r3
 8009d96:	6863      	ldr	r3, [r4, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f340 8092 	ble.w	8009ec2 <__ssvfiscanf_r+0x1a2>
 8009d9e:	6822      	ldr	r2, [r4, #0]
 8009da0:	7813      	ldrb	r3, [r2, #0]
 8009da2:	4553      	cmp	r3, sl
 8009da4:	f040 812f 	bne.w	800a006 <__ssvfiscanf_r+0x2e6>
 8009da8:	6863      	ldr	r3, [r4, #4]
 8009daa:	3201      	adds	r2, #1
 8009dac:	3b01      	subs	r3, #1
 8009dae:	6063      	str	r3, [r4, #4]
 8009db0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009db2:	6022      	str	r2, [r4, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	9345      	str	r3, [sp, #276]	; 0x114
 8009db8:	e7d8      	b.n	8009d6c <__ssvfiscanf_r+0x4c>
 8009dba:	9141      	str	r1, [sp, #260]	; 0x104
 8009dbc:	9143      	str	r1, [sp, #268]	; 0x10c
 8009dbe:	7853      	ldrb	r3, [r2, #1]
 8009dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc2:	bf04      	itt	eq
 8009dc4:	2310      	moveq	r3, #16
 8009dc6:	1c95      	addeq	r5, r2, #2
 8009dc8:	f04f 020a 	mov.w	r2, #10
 8009dcc:	bf08      	it	eq
 8009dce:	9341      	streq	r3, [sp, #260]	; 0x104
 8009dd0:	46aa      	mov	sl, r5
 8009dd2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009dd6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009dda:	2b09      	cmp	r3, #9
 8009ddc:	d91c      	bls.n	8009e18 <__ssvfiscanf_r+0xf8>
 8009dde:	2203      	movs	r2, #3
 8009de0:	487d      	ldr	r0, [pc, #500]	; (8009fd8 <__ssvfiscanf_r+0x2b8>)
 8009de2:	f000 fc80 	bl	800a6e6 <memchr>
 8009de6:	b138      	cbz	r0, 8009df8 <__ssvfiscanf_r+0xd8>
 8009de8:	2301      	movs	r3, #1
 8009dea:	4655      	mov	r5, sl
 8009dec:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009dee:	eba0 0009 	sub.w	r0, r0, r9
 8009df2:	4083      	lsls	r3, r0
 8009df4:	4313      	orrs	r3, r2
 8009df6:	9341      	str	r3, [sp, #260]	; 0x104
 8009df8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009dfc:	2b78      	cmp	r3, #120	; 0x78
 8009dfe:	d806      	bhi.n	8009e0e <__ssvfiscanf_r+0xee>
 8009e00:	2b57      	cmp	r3, #87	; 0x57
 8009e02:	d810      	bhi.n	8009e26 <__ssvfiscanf_r+0x106>
 8009e04:	2b25      	cmp	r3, #37	; 0x25
 8009e06:	d0c5      	beq.n	8009d94 <__ssvfiscanf_r+0x74>
 8009e08:	d856      	bhi.n	8009eb8 <__ssvfiscanf_r+0x198>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d064      	beq.n	8009ed8 <__ssvfiscanf_r+0x1b8>
 8009e0e:	2303      	movs	r3, #3
 8009e10:	9347      	str	r3, [sp, #284]	; 0x11c
 8009e12:	230a      	movs	r3, #10
 8009e14:	9342      	str	r3, [sp, #264]	; 0x108
 8009e16:	e075      	b.n	8009f04 <__ssvfiscanf_r+0x1e4>
 8009e18:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009e1a:	4655      	mov	r5, sl
 8009e1c:	fb02 1103 	mla	r1, r2, r3, r1
 8009e20:	3930      	subs	r1, #48	; 0x30
 8009e22:	9143      	str	r1, [sp, #268]	; 0x10c
 8009e24:	e7d4      	b.n	8009dd0 <__ssvfiscanf_r+0xb0>
 8009e26:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009e2a:	2a20      	cmp	r2, #32
 8009e2c:	d8ef      	bhi.n	8009e0e <__ssvfiscanf_r+0xee>
 8009e2e:	a101      	add	r1, pc, #4	; (adr r1, 8009e34 <__ssvfiscanf_r+0x114>)
 8009e30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e34:	08009ee7 	.word	0x08009ee7
 8009e38:	08009e0f 	.word	0x08009e0f
 8009e3c:	08009e0f 	.word	0x08009e0f
 8009e40:	08009f45 	.word	0x08009f45
 8009e44:	08009e0f 	.word	0x08009e0f
 8009e48:	08009e0f 	.word	0x08009e0f
 8009e4c:	08009e0f 	.word	0x08009e0f
 8009e50:	08009e0f 	.word	0x08009e0f
 8009e54:	08009e0f 	.word	0x08009e0f
 8009e58:	08009e0f 	.word	0x08009e0f
 8009e5c:	08009e0f 	.word	0x08009e0f
 8009e60:	08009f5b 	.word	0x08009f5b
 8009e64:	08009f41 	.word	0x08009f41
 8009e68:	08009ebf 	.word	0x08009ebf
 8009e6c:	08009ebf 	.word	0x08009ebf
 8009e70:	08009ebf 	.word	0x08009ebf
 8009e74:	08009e0f 	.word	0x08009e0f
 8009e78:	08009efd 	.word	0x08009efd
 8009e7c:	08009e0f 	.word	0x08009e0f
 8009e80:	08009e0f 	.word	0x08009e0f
 8009e84:	08009e0f 	.word	0x08009e0f
 8009e88:	08009e0f 	.word	0x08009e0f
 8009e8c:	08009f6b 	.word	0x08009f6b
 8009e90:	08009f39 	.word	0x08009f39
 8009e94:	08009edf 	.word	0x08009edf
 8009e98:	08009e0f 	.word	0x08009e0f
 8009e9c:	08009e0f 	.word	0x08009e0f
 8009ea0:	08009f67 	.word	0x08009f67
 8009ea4:	08009e0f 	.word	0x08009e0f
 8009ea8:	08009f41 	.word	0x08009f41
 8009eac:	08009e0f 	.word	0x08009e0f
 8009eb0:	08009e0f 	.word	0x08009e0f
 8009eb4:	08009ee7 	.word	0x08009ee7
 8009eb8:	3b45      	subs	r3, #69	; 0x45
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d8a7      	bhi.n	8009e0e <__ssvfiscanf_r+0xee>
 8009ebe:	2305      	movs	r3, #5
 8009ec0:	e01f      	b.n	8009f02 <__ssvfiscanf_r+0x1e2>
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ec8:	4798      	blx	r3
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f43f af67 	beq.w	8009d9e <__ssvfiscanf_r+0x7e>
 8009ed0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f040 808d 	bne.w	8009ff2 <__ssvfiscanf_r+0x2d2>
 8009ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8009edc:	e08f      	b.n	8009ffe <__ssvfiscanf_r+0x2de>
 8009ede:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009ee0:	f042 0220 	orr.w	r2, r2, #32
 8009ee4:	9241      	str	r2, [sp, #260]	; 0x104
 8009ee6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eec:	9241      	str	r2, [sp, #260]	; 0x104
 8009eee:	2210      	movs	r2, #16
 8009ef0:	2b6f      	cmp	r3, #111	; 0x6f
 8009ef2:	bf34      	ite	cc
 8009ef4:	2303      	movcc	r3, #3
 8009ef6:	2304      	movcs	r3, #4
 8009ef8:	9242      	str	r2, [sp, #264]	; 0x108
 8009efa:	e002      	b.n	8009f02 <__ssvfiscanf_r+0x1e2>
 8009efc:	2300      	movs	r3, #0
 8009efe:	9342      	str	r3, [sp, #264]	; 0x108
 8009f00:	2303      	movs	r3, #3
 8009f02:	9347      	str	r3, [sp, #284]	; 0x11c
 8009f04:	6863      	ldr	r3, [r4, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	dd3d      	ble.n	8009f86 <__ssvfiscanf_r+0x266>
 8009f0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f0c:	0659      	lsls	r1, r3, #25
 8009f0e:	d404      	bmi.n	8009f1a <__ssvfiscanf_r+0x1fa>
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	781a      	ldrb	r2, [r3, #0]
 8009f14:	5cba      	ldrb	r2, [r7, r2]
 8009f16:	0712      	lsls	r2, r2, #28
 8009f18:	d43c      	bmi.n	8009f94 <__ssvfiscanf_r+0x274>
 8009f1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	dc4b      	bgt.n	8009fb8 <__ssvfiscanf_r+0x298>
 8009f20:	466b      	mov	r3, sp
 8009f22:	4622      	mov	r2, r4
 8009f24:	4630      	mov	r0, r6
 8009f26:	a941      	add	r1, sp, #260	; 0x104
 8009f28:	f000 fa06 	bl	800a338 <_scanf_chars>
 8009f2c:	2801      	cmp	r0, #1
 8009f2e:	d06a      	beq.n	800a006 <__ssvfiscanf_r+0x2e6>
 8009f30:	2802      	cmp	r0, #2
 8009f32:	f47f af1b 	bne.w	8009d6c <__ssvfiscanf_r+0x4c>
 8009f36:	e7cb      	b.n	8009ed0 <__ssvfiscanf_r+0x1b0>
 8009f38:	2308      	movs	r3, #8
 8009f3a:	9342      	str	r3, [sp, #264]	; 0x108
 8009f3c:	2304      	movs	r3, #4
 8009f3e:	e7e0      	b.n	8009f02 <__ssvfiscanf_r+0x1e2>
 8009f40:	220a      	movs	r2, #10
 8009f42:	e7d5      	b.n	8009ef0 <__ssvfiscanf_r+0x1d0>
 8009f44:	4629      	mov	r1, r5
 8009f46:	4640      	mov	r0, r8
 8009f48:	f000 fb42 	bl	800a5d0 <__sccl>
 8009f4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f4e:	4605      	mov	r5, r0
 8009f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f54:	9341      	str	r3, [sp, #260]	; 0x104
 8009f56:	2301      	movs	r3, #1
 8009f58:	e7d3      	b.n	8009f02 <__ssvfiscanf_r+0x1e2>
 8009f5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f60:	9341      	str	r3, [sp, #260]	; 0x104
 8009f62:	2300      	movs	r3, #0
 8009f64:	e7cd      	b.n	8009f02 <__ssvfiscanf_r+0x1e2>
 8009f66:	2302      	movs	r3, #2
 8009f68:	e7cb      	b.n	8009f02 <__ssvfiscanf_r+0x1e2>
 8009f6a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009f6c:	06c3      	lsls	r3, r0, #27
 8009f6e:	f53f aefd 	bmi.w	8009d6c <__ssvfiscanf_r+0x4c>
 8009f72:	9b00      	ldr	r3, [sp, #0]
 8009f74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009f76:	1d19      	adds	r1, r3, #4
 8009f78:	9100      	str	r1, [sp, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	07c0      	lsls	r0, r0, #31
 8009f7e:	bf4c      	ite	mi
 8009f80:	801a      	strhmi	r2, [r3, #0]
 8009f82:	601a      	strpl	r2, [r3, #0]
 8009f84:	e6f2      	b.n	8009d6c <__ssvfiscanf_r+0x4c>
 8009f86:	4621      	mov	r1, r4
 8009f88:	4630      	mov	r0, r6
 8009f8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f8c:	4798      	blx	r3
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d0bb      	beq.n	8009f0a <__ssvfiscanf_r+0x1ea>
 8009f92:	e79d      	b.n	8009ed0 <__ssvfiscanf_r+0x1b0>
 8009f94:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009f96:	3201      	adds	r2, #1
 8009f98:	9245      	str	r2, [sp, #276]	; 0x114
 8009f9a:	6862      	ldr	r2, [r4, #4]
 8009f9c:	3a01      	subs	r2, #1
 8009f9e:	2a00      	cmp	r2, #0
 8009fa0:	6062      	str	r2, [r4, #4]
 8009fa2:	dd02      	ble.n	8009faa <__ssvfiscanf_r+0x28a>
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	e7b2      	b.n	8009f10 <__ssvfiscanf_r+0x1f0>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4630      	mov	r0, r6
 8009fae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009fb0:	4798      	blx	r3
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d0ac      	beq.n	8009f10 <__ssvfiscanf_r+0x1f0>
 8009fb6:	e78b      	b.n	8009ed0 <__ssvfiscanf_r+0x1b0>
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	dc0f      	bgt.n	8009fdc <__ssvfiscanf_r+0x2bc>
 8009fbc:	466b      	mov	r3, sp
 8009fbe:	4622      	mov	r2, r4
 8009fc0:	4630      	mov	r0, r6
 8009fc2:	a941      	add	r1, sp, #260	; 0x104
 8009fc4:	f000 fa12 	bl	800a3ec <_scanf_i>
 8009fc8:	e7b0      	b.n	8009f2c <__ssvfiscanf_r+0x20c>
 8009fca:	bf00      	nop
 8009fcc:	08009c6d 	.word	0x08009c6d
 8009fd0:	08009ce7 	.word	0x08009ce7
 8009fd4:	0800ac1f 	.word	0x0800ac1f
 8009fd8:	0800abd6 	.word	0x0800abd6
 8009fdc:	4b0b      	ldr	r3, [pc, #44]	; (800a00c <__ssvfiscanf_r+0x2ec>)
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f43f aec4 	beq.w	8009d6c <__ssvfiscanf_r+0x4c>
 8009fe4:	466b      	mov	r3, sp
 8009fe6:	4622      	mov	r2, r4
 8009fe8:	4630      	mov	r0, r6
 8009fea:	a941      	add	r1, sp, #260	; 0x104
 8009fec:	f3af 8000 	nop.w
 8009ff0:	e79c      	b.n	8009f2c <__ssvfiscanf_r+0x20c>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ff8:	bf18      	it	ne
 8009ffa:	f04f 30ff 	movne.w	r0, #4294967295
 8009ffe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a006:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a008:	e7f9      	b.n	8009ffe <__ssvfiscanf_r+0x2de>
 800a00a:	bf00      	nop
 800a00c:	00000000 	.word	0x00000000

0800a010 <_printf_common>:
 800a010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a014:	4616      	mov	r6, r2
 800a016:	4699      	mov	r9, r3
 800a018:	688a      	ldr	r2, [r1, #8]
 800a01a:	690b      	ldr	r3, [r1, #16]
 800a01c:	4607      	mov	r7, r0
 800a01e:	4293      	cmp	r3, r2
 800a020:	bfb8      	it	lt
 800a022:	4613      	movlt	r3, r2
 800a024:	6033      	str	r3, [r6, #0]
 800a026:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a02a:	460c      	mov	r4, r1
 800a02c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a030:	b10a      	cbz	r2, 800a036 <_printf_common+0x26>
 800a032:	3301      	adds	r3, #1
 800a034:	6033      	str	r3, [r6, #0]
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	0699      	lsls	r1, r3, #26
 800a03a:	bf42      	ittt	mi
 800a03c:	6833      	ldrmi	r3, [r6, #0]
 800a03e:	3302      	addmi	r3, #2
 800a040:	6033      	strmi	r3, [r6, #0]
 800a042:	6825      	ldr	r5, [r4, #0]
 800a044:	f015 0506 	ands.w	r5, r5, #6
 800a048:	d106      	bne.n	800a058 <_printf_common+0x48>
 800a04a:	f104 0a19 	add.w	sl, r4, #25
 800a04e:	68e3      	ldr	r3, [r4, #12]
 800a050:	6832      	ldr	r2, [r6, #0]
 800a052:	1a9b      	subs	r3, r3, r2
 800a054:	42ab      	cmp	r3, r5
 800a056:	dc2b      	bgt.n	800a0b0 <_printf_common+0xa0>
 800a058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a05c:	1e13      	subs	r3, r2, #0
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	bf18      	it	ne
 800a062:	2301      	movne	r3, #1
 800a064:	0692      	lsls	r2, r2, #26
 800a066:	d430      	bmi.n	800a0ca <_printf_common+0xba>
 800a068:	4649      	mov	r1, r9
 800a06a:	4638      	mov	r0, r7
 800a06c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a070:	47c0      	blx	r8
 800a072:	3001      	adds	r0, #1
 800a074:	d023      	beq.n	800a0be <_printf_common+0xae>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	6922      	ldr	r2, [r4, #16]
 800a07a:	f003 0306 	and.w	r3, r3, #6
 800a07e:	2b04      	cmp	r3, #4
 800a080:	bf14      	ite	ne
 800a082:	2500      	movne	r5, #0
 800a084:	6833      	ldreq	r3, [r6, #0]
 800a086:	f04f 0600 	mov.w	r6, #0
 800a08a:	bf08      	it	eq
 800a08c:	68e5      	ldreq	r5, [r4, #12]
 800a08e:	f104 041a 	add.w	r4, r4, #26
 800a092:	bf08      	it	eq
 800a094:	1aed      	subeq	r5, r5, r3
 800a096:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a09a:	bf08      	it	eq
 800a09c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	bfc4      	itt	gt
 800a0a4:	1a9b      	subgt	r3, r3, r2
 800a0a6:	18ed      	addgt	r5, r5, r3
 800a0a8:	42b5      	cmp	r5, r6
 800a0aa:	d11a      	bne.n	800a0e2 <_printf_common+0xd2>
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	e008      	b.n	800a0c2 <_printf_common+0xb2>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	4652      	mov	r2, sl
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	47c0      	blx	r8
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	d103      	bne.n	800a0c6 <_printf_common+0xb6>
 800a0be:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c6:	3501      	adds	r5, #1
 800a0c8:	e7c1      	b.n	800a04e <_printf_common+0x3e>
 800a0ca:	2030      	movs	r0, #48	; 0x30
 800a0cc:	18e1      	adds	r1, r4, r3
 800a0ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0d2:	1c5a      	adds	r2, r3, #1
 800a0d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0d8:	4422      	add	r2, r4
 800a0da:	3302      	adds	r3, #2
 800a0dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0e0:	e7c2      	b.n	800a068 <_printf_common+0x58>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	47c0      	blx	r8
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d0e6      	beq.n	800a0be <_printf_common+0xae>
 800a0f0:	3601      	adds	r6, #1
 800a0f2:	e7d9      	b.n	800a0a8 <_printf_common+0x98>

0800a0f4 <_printf_i>:
 800a0f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f8:	7e0f      	ldrb	r7, [r1, #24]
 800a0fa:	4691      	mov	r9, r2
 800a0fc:	2f78      	cmp	r7, #120	; 0x78
 800a0fe:	4680      	mov	r8, r0
 800a100:	460c      	mov	r4, r1
 800a102:	469a      	mov	sl, r3
 800a104:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a106:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a10a:	d807      	bhi.n	800a11c <_printf_i+0x28>
 800a10c:	2f62      	cmp	r7, #98	; 0x62
 800a10e:	d80a      	bhi.n	800a126 <_printf_i+0x32>
 800a110:	2f00      	cmp	r7, #0
 800a112:	f000 80d5 	beq.w	800a2c0 <_printf_i+0x1cc>
 800a116:	2f58      	cmp	r7, #88	; 0x58
 800a118:	f000 80c1 	beq.w	800a29e <_printf_i+0x1aa>
 800a11c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a120:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a124:	e03a      	b.n	800a19c <_printf_i+0xa8>
 800a126:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a12a:	2b15      	cmp	r3, #21
 800a12c:	d8f6      	bhi.n	800a11c <_printf_i+0x28>
 800a12e:	a101      	add	r1, pc, #4	; (adr r1, 800a134 <_printf_i+0x40>)
 800a130:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a134:	0800a18d 	.word	0x0800a18d
 800a138:	0800a1a1 	.word	0x0800a1a1
 800a13c:	0800a11d 	.word	0x0800a11d
 800a140:	0800a11d 	.word	0x0800a11d
 800a144:	0800a11d 	.word	0x0800a11d
 800a148:	0800a11d 	.word	0x0800a11d
 800a14c:	0800a1a1 	.word	0x0800a1a1
 800a150:	0800a11d 	.word	0x0800a11d
 800a154:	0800a11d 	.word	0x0800a11d
 800a158:	0800a11d 	.word	0x0800a11d
 800a15c:	0800a11d 	.word	0x0800a11d
 800a160:	0800a2a7 	.word	0x0800a2a7
 800a164:	0800a1cd 	.word	0x0800a1cd
 800a168:	0800a261 	.word	0x0800a261
 800a16c:	0800a11d 	.word	0x0800a11d
 800a170:	0800a11d 	.word	0x0800a11d
 800a174:	0800a2c9 	.word	0x0800a2c9
 800a178:	0800a11d 	.word	0x0800a11d
 800a17c:	0800a1cd 	.word	0x0800a1cd
 800a180:	0800a11d 	.word	0x0800a11d
 800a184:	0800a11d 	.word	0x0800a11d
 800a188:	0800a269 	.word	0x0800a269
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	1d1a      	adds	r2, r3, #4
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	602a      	str	r2, [r5, #0]
 800a194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a198:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a19c:	2301      	movs	r3, #1
 800a19e:	e0a0      	b.n	800a2e2 <_printf_i+0x1ee>
 800a1a0:	6820      	ldr	r0, [r4, #0]
 800a1a2:	682b      	ldr	r3, [r5, #0]
 800a1a4:	0607      	lsls	r7, r0, #24
 800a1a6:	f103 0104 	add.w	r1, r3, #4
 800a1aa:	6029      	str	r1, [r5, #0]
 800a1ac:	d501      	bpl.n	800a1b2 <_printf_i+0xbe>
 800a1ae:	681e      	ldr	r6, [r3, #0]
 800a1b0:	e003      	b.n	800a1ba <_printf_i+0xc6>
 800a1b2:	0646      	lsls	r6, r0, #25
 800a1b4:	d5fb      	bpl.n	800a1ae <_printf_i+0xba>
 800a1b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a1ba:	2e00      	cmp	r6, #0
 800a1bc:	da03      	bge.n	800a1c6 <_printf_i+0xd2>
 800a1be:	232d      	movs	r3, #45	; 0x2d
 800a1c0:	4276      	negs	r6, r6
 800a1c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c6:	230a      	movs	r3, #10
 800a1c8:	4859      	ldr	r0, [pc, #356]	; (800a330 <_printf_i+0x23c>)
 800a1ca:	e012      	b.n	800a1f2 <_printf_i+0xfe>
 800a1cc:	682b      	ldr	r3, [r5, #0]
 800a1ce:	6820      	ldr	r0, [r4, #0]
 800a1d0:	1d19      	adds	r1, r3, #4
 800a1d2:	6029      	str	r1, [r5, #0]
 800a1d4:	0605      	lsls	r5, r0, #24
 800a1d6:	d501      	bpl.n	800a1dc <_printf_i+0xe8>
 800a1d8:	681e      	ldr	r6, [r3, #0]
 800a1da:	e002      	b.n	800a1e2 <_printf_i+0xee>
 800a1dc:	0641      	lsls	r1, r0, #25
 800a1de:	d5fb      	bpl.n	800a1d8 <_printf_i+0xe4>
 800a1e0:	881e      	ldrh	r6, [r3, #0]
 800a1e2:	2f6f      	cmp	r7, #111	; 0x6f
 800a1e4:	bf0c      	ite	eq
 800a1e6:	2308      	moveq	r3, #8
 800a1e8:	230a      	movne	r3, #10
 800a1ea:	4851      	ldr	r0, [pc, #324]	; (800a330 <_printf_i+0x23c>)
 800a1ec:	2100      	movs	r1, #0
 800a1ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1f2:	6865      	ldr	r5, [r4, #4]
 800a1f4:	2d00      	cmp	r5, #0
 800a1f6:	bfa8      	it	ge
 800a1f8:	6821      	ldrge	r1, [r4, #0]
 800a1fa:	60a5      	str	r5, [r4, #8]
 800a1fc:	bfa4      	itt	ge
 800a1fe:	f021 0104 	bicge.w	r1, r1, #4
 800a202:	6021      	strge	r1, [r4, #0]
 800a204:	b90e      	cbnz	r6, 800a20a <_printf_i+0x116>
 800a206:	2d00      	cmp	r5, #0
 800a208:	d04b      	beq.n	800a2a2 <_printf_i+0x1ae>
 800a20a:	4615      	mov	r5, r2
 800a20c:	fbb6 f1f3 	udiv	r1, r6, r3
 800a210:	fb03 6711 	mls	r7, r3, r1, r6
 800a214:	5dc7      	ldrb	r7, [r0, r7]
 800a216:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a21a:	4637      	mov	r7, r6
 800a21c:	42bb      	cmp	r3, r7
 800a21e:	460e      	mov	r6, r1
 800a220:	d9f4      	bls.n	800a20c <_printf_i+0x118>
 800a222:	2b08      	cmp	r3, #8
 800a224:	d10b      	bne.n	800a23e <_printf_i+0x14a>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	07de      	lsls	r6, r3, #31
 800a22a:	d508      	bpl.n	800a23e <_printf_i+0x14a>
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	6861      	ldr	r1, [r4, #4]
 800a230:	4299      	cmp	r1, r3
 800a232:	bfde      	ittt	le
 800a234:	2330      	movle	r3, #48	; 0x30
 800a236:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a23a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a23e:	1b52      	subs	r2, r2, r5
 800a240:	6122      	str	r2, [r4, #16]
 800a242:	464b      	mov	r3, r9
 800a244:	4621      	mov	r1, r4
 800a246:	4640      	mov	r0, r8
 800a248:	f8cd a000 	str.w	sl, [sp]
 800a24c:	aa03      	add	r2, sp, #12
 800a24e:	f7ff fedf 	bl	800a010 <_printf_common>
 800a252:	3001      	adds	r0, #1
 800a254:	d14a      	bne.n	800a2ec <_printf_i+0x1f8>
 800a256:	f04f 30ff 	mov.w	r0, #4294967295
 800a25a:	b004      	add	sp, #16
 800a25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	f043 0320 	orr.w	r3, r3, #32
 800a266:	6023      	str	r3, [r4, #0]
 800a268:	2778      	movs	r7, #120	; 0x78
 800a26a:	4832      	ldr	r0, [pc, #200]	; (800a334 <_printf_i+0x240>)
 800a26c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	6829      	ldr	r1, [r5, #0]
 800a274:	061f      	lsls	r7, r3, #24
 800a276:	f851 6b04 	ldr.w	r6, [r1], #4
 800a27a:	d402      	bmi.n	800a282 <_printf_i+0x18e>
 800a27c:	065f      	lsls	r7, r3, #25
 800a27e:	bf48      	it	mi
 800a280:	b2b6      	uxthmi	r6, r6
 800a282:	07df      	lsls	r7, r3, #31
 800a284:	bf48      	it	mi
 800a286:	f043 0320 	orrmi.w	r3, r3, #32
 800a28a:	6029      	str	r1, [r5, #0]
 800a28c:	bf48      	it	mi
 800a28e:	6023      	strmi	r3, [r4, #0]
 800a290:	b91e      	cbnz	r6, 800a29a <_printf_i+0x1a6>
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	f023 0320 	bic.w	r3, r3, #32
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	2310      	movs	r3, #16
 800a29c:	e7a6      	b.n	800a1ec <_printf_i+0xf8>
 800a29e:	4824      	ldr	r0, [pc, #144]	; (800a330 <_printf_i+0x23c>)
 800a2a0:	e7e4      	b.n	800a26c <_printf_i+0x178>
 800a2a2:	4615      	mov	r5, r2
 800a2a4:	e7bd      	b.n	800a222 <_printf_i+0x12e>
 800a2a6:	682b      	ldr	r3, [r5, #0]
 800a2a8:	6826      	ldr	r6, [r4, #0]
 800a2aa:	1d18      	adds	r0, r3, #4
 800a2ac:	6961      	ldr	r1, [r4, #20]
 800a2ae:	6028      	str	r0, [r5, #0]
 800a2b0:	0635      	lsls	r5, r6, #24
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	d501      	bpl.n	800a2ba <_printf_i+0x1c6>
 800a2b6:	6019      	str	r1, [r3, #0]
 800a2b8:	e002      	b.n	800a2c0 <_printf_i+0x1cc>
 800a2ba:	0670      	lsls	r0, r6, #25
 800a2bc:	d5fb      	bpl.n	800a2b6 <_printf_i+0x1c2>
 800a2be:	8019      	strh	r1, [r3, #0]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	4615      	mov	r5, r2
 800a2c4:	6123      	str	r3, [r4, #16]
 800a2c6:	e7bc      	b.n	800a242 <_printf_i+0x14e>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	1d1a      	adds	r2, r3, #4
 800a2ce:	602a      	str	r2, [r5, #0]
 800a2d0:	681d      	ldr	r5, [r3, #0]
 800a2d2:	6862      	ldr	r2, [r4, #4]
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 fa06 	bl	800a6e6 <memchr>
 800a2da:	b108      	cbz	r0, 800a2e0 <_printf_i+0x1ec>
 800a2dc:	1b40      	subs	r0, r0, r5
 800a2de:	6060      	str	r0, [r4, #4]
 800a2e0:	6863      	ldr	r3, [r4, #4]
 800a2e2:	6123      	str	r3, [r4, #16]
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ea:	e7aa      	b.n	800a242 <_printf_i+0x14e>
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4649      	mov	r1, r9
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	6923      	ldr	r3, [r4, #16]
 800a2f4:	47d0      	blx	sl
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	d0ad      	beq.n	800a256 <_printf_i+0x162>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	079b      	lsls	r3, r3, #30
 800a2fe:	d413      	bmi.n	800a328 <_printf_i+0x234>
 800a300:	68e0      	ldr	r0, [r4, #12]
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	4298      	cmp	r0, r3
 800a306:	bfb8      	it	lt
 800a308:	4618      	movlt	r0, r3
 800a30a:	e7a6      	b.n	800a25a <_printf_i+0x166>
 800a30c:	2301      	movs	r3, #1
 800a30e:	4632      	mov	r2, r6
 800a310:	4649      	mov	r1, r9
 800a312:	4640      	mov	r0, r8
 800a314:	47d0      	blx	sl
 800a316:	3001      	adds	r0, #1
 800a318:	d09d      	beq.n	800a256 <_printf_i+0x162>
 800a31a:	3501      	adds	r5, #1
 800a31c:	68e3      	ldr	r3, [r4, #12]
 800a31e:	9903      	ldr	r1, [sp, #12]
 800a320:	1a5b      	subs	r3, r3, r1
 800a322:	42ab      	cmp	r3, r5
 800a324:	dcf2      	bgt.n	800a30c <_printf_i+0x218>
 800a326:	e7eb      	b.n	800a300 <_printf_i+0x20c>
 800a328:	2500      	movs	r5, #0
 800a32a:	f104 0619 	add.w	r6, r4, #25
 800a32e:	e7f5      	b.n	800a31c <_printf_i+0x228>
 800a330:	0800abe1 	.word	0x0800abe1
 800a334:	0800abf2 	.word	0x0800abf2

0800a338 <_scanf_chars>:
 800a338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a33c:	4615      	mov	r5, r2
 800a33e:	688a      	ldr	r2, [r1, #8]
 800a340:	4680      	mov	r8, r0
 800a342:	460c      	mov	r4, r1
 800a344:	b932      	cbnz	r2, 800a354 <_scanf_chars+0x1c>
 800a346:	698a      	ldr	r2, [r1, #24]
 800a348:	2a00      	cmp	r2, #0
 800a34a:	bf0c      	ite	eq
 800a34c:	2201      	moveq	r2, #1
 800a34e:	f04f 32ff 	movne.w	r2, #4294967295
 800a352:	608a      	str	r2, [r1, #8]
 800a354:	2700      	movs	r7, #0
 800a356:	6822      	ldr	r2, [r4, #0]
 800a358:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a3e8 <_scanf_chars+0xb0>
 800a35c:	06d1      	lsls	r1, r2, #27
 800a35e:	bf5f      	itttt	pl
 800a360:	681a      	ldrpl	r2, [r3, #0]
 800a362:	1d11      	addpl	r1, r2, #4
 800a364:	6019      	strpl	r1, [r3, #0]
 800a366:	6816      	ldrpl	r6, [r2, #0]
 800a368:	69a0      	ldr	r0, [r4, #24]
 800a36a:	b188      	cbz	r0, 800a390 <_scanf_chars+0x58>
 800a36c:	2801      	cmp	r0, #1
 800a36e:	d107      	bne.n	800a380 <_scanf_chars+0x48>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	781a      	ldrb	r2, [r3, #0]
 800a374:	6963      	ldr	r3, [r4, #20]
 800a376:	5c9b      	ldrb	r3, [r3, r2]
 800a378:	b953      	cbnz	r3, 800a390 <_scanf_chars+0x58>
 800a37a:	2f00      	cmp	r7, #0
 800a37c:	d031      	beq.n	800a3e2 <_scanf_chars+0xaa>
 800a37e:	e022      	b.n	800a3c6 <_scanf_chars+0x8e>
 800a380:	2802      	cmp	r0, #2
 800a382:	d120      	bne.n	800a3c6 <_scanf_chars+0x8e>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a38c:	071b      	lsls	r3, r3, #28
 800a38e:	d41a      	bmi.n	800a3c6 <_scanf_chars+0x8e>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	3701      	adds	r7, #1
 800a394:	06da      	lsls	r2, r3, #27
 800a396:	bf5e      	ittt	pl
 800a398:	682b      	ldrpl	r3, [r5, #0]
 800a39a:	781b      	ldrbpl	r3, [r3, #0]
 800a39c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a3a0:	682a      	ldr	r2, [r5, #0]
 800a3a2:	686b      	ldr	r3, [r5, #4]
 800a3a4:	3201      	adds	r2, #1
 800a3a6:	602a      	str	r2, [r5, #0]
 800a3a8:	68a2      	ldr	r2, [r4, #8]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	3a01      	subs	r2, #1
 800a3ae:	606b      	str	r3, [r5, #4]
 800a3b0:	60a2      	str	r2, [r4, #8]
 800a3b2:	b142      	cbz	r2, 800a3c6 <_scanf_chars+0x8e>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dcd7      	bgt.n	800a368 <_scanf_chars+0x30>
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a3c0:	4798      	blx	r3
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d0d0      	beq.n	800a368 <_scanf_chars+0x30>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	f013 0310 	ands.w	r3, r3, #16
 800a3cc:	d105      	bne.n	800a3da <_scanf_chars+0xa2>
 800a3ce:	68e2      	ldr	r2, [r4, #12]
 800a3d0:	3201      	adds	r2, #1
 800a3d2:	60e2      	str	r2, [r4, #12]
 800a3d4:	69a2      	ldr	r2, [r4, #24]
 800a3d6:	b102      	cbz	r2, 800a3da <_scanf_chars+0xa2>
 800a3d8:	7033      	strb	r3, [r6, #0]
 800a3da:	2000      	movs	r0, #0
 800a3dc:	6923      	ldr	r3, [r4, #16]
 800a3de:	443b      	add	r3, r7
 800a3e0:	6123      	str	r3, [r4, #16]
 800a3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e6:	bf00      	nop
 800a3e8:	0800ac1f 	.word	0x0800ac1f

0800a3ec <_scanf_i>:
 800a3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	4698      	mov	r8, r3
 800a3f4:	4b72      	ldr	r3, [pc, #456]	; (800a5c0 <_scanf_i+0x1d4>)
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	4682      	mov	sl, r0
 800a3fa:	4616      	mov	r6, r2
 800a3fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a400:	ab03      	add	r3, sp, #12
 800a402:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a406:	4b6f      	ldr	r3, [pc, #444]	; (800a5c4 <_scanf_i+0x1d8>)
 800a408:	69a1      	ldr	r1, [r4, #24]
 800a40a:	4a6f      	ldr	r2, [pc, #444]	; (800a5c8 <_scanf_i+0x1dc>)
 800a40c:	4627      	mov	r7, r4
 800a40e:	2903      	cmp	r1, #3
 800a410:	bf18      	it	ne
 800a412:	461a      	movne	r2, r3
 800a414:	68a3      	ldr	r3, [r4, #8]
 800a416:	9201      	str	r2, [sp, #4]
 800a418:	1e5a      	subs	r2, r3, #1
 800a41a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a41e:	bf81      	itttt	hi
 800a420:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a424:	eb03 0905 	addhi.w	r9, r3, r5
 800a428:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a42c:	60a3      	strhi	r3, [r4, #8]
 800a42e:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a432:	bf98      	it	ls
 800a434:	f04f 0900 	movls.w	r9, #0
 800a438:	463d      	mov	r5, r7
 800a43a:	f04f 0b00 	mov.w	fp, #0
 800a43e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a442:	6023      	str	r3, [r4, #0]
 800a444:	6831      	ldr	r1, [r6, #0]
 800a446:	ab03      	add	r3, sp, #12
 800a448:	2202      	movs	r2, #2
 800a44a:	7809      	ldrb	r1, [r1, #0]
 800a44c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a450:	f000 f949 	bl	800a6e6 <memchr>
 800a454:	b328      	cbz	r0, 800a4a2 <_scanf_i+0xb6>
 800a456:	f1bb 0f01 	cmp.w	fp, #1
 800a45a:	d159      	bne.n	800a510 <_scanf_i+0x124>
 800a45c:	6862      	ldr	r2, [r4, #4]
 800a45e:	b92a      	cbnz	r2, 800a46c <_scanf_i+0x80>
 800a460:	2308      	movs	r3, #8
 800a462:	6822      	ldr	r2, [r4, #0]
 800a464:	6063      	str	r3, [r4, #4]
 800a466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a46a:	6022      	str	r2, [r4, #0]
 800a46c:	6822      	ldr	r2, [r4, #0]
 800a46e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a472:	6022      	str	r2, [r4, #0]
 800a474:	68a2      	ldr	r2, [r4, #8]
 800a476:	1e51      	subs	r1, r2, #1
 800a478:	60a1      	str	r1, [r4, #8]
 800a47a:	b192      	cbz	r2, 800a4a2 <_scanf_i+0xb6>
 800a47c:	6832      	ldr	r2, [r6, #0]
 800a47e:	1c51      	adds	r1, r2, #1
 800a480:	6031      	str	r1, [r6, #0]
 800a482:	7812      	ldrb	r2, [r2, #0]
 800a484:	f805 2b01 	strb.w	r2, [r5], #1
 800a488:	6872      	ldr	r2, [r6, #4]
 800a48a:	3a01      	subs	r2, #1
 800a48c:	2a00      	cmp	r2, #0
 800a48e:	6072      	str	r2, [r6, #4]
 800a490:	dc07      	bgt.n	800a4a2 <_scanf_i+0xb6>
 800a492:	4631      	mov	r1, r6
 800a494:	4650      	mov	r0, sl
 800a496:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a49a:	4790      	blx	r2
 800a49c:	2800      	cmp	r0, #0
 800a49e:	f040 8085 	bne.w	800a5ac <_scanf_i+0x1c0>
 800a4a2:	f10b 0b01 	add.w	fp, fp, #1
 800a4a6:	f1bb 0f03 	cmp.w	fp, #3
 800a4aa:	d1cb      	bne.n	800a444 <_scanf_i+0x58>
 800a4ac:	6863      	ldr	r3, [r4, #4]
 800a4ae:	b90b      	cbnz	r3, 800a4b4 <_scanf_i+0xc8>
 800a4b0:	230a      	movs	r3, #10
 800a4b2:	6063      	str	r3, [r4, #4]
 800a4b4:	6863      	ldr	r3, [r4, #4]
 800a4b6:	4945      	ldr	r1, [pc, #276]	; (800a5cc <_scanf_i+0x1e0>)
 800a4b8:	6960      	ldr	r0, [r4, #20]
 800a4ba:	1ac9      	subs	r1, r1, r3
 800a4bc:	f000 f888 	bl	800a5d0 <__sccl>
 800a4c0:	f04f 0b00 	mov.w	fp, #0
 800a4c4:	68a3      	ldr	r3, [r4, #8]
 800a4c6:	6822      	ldr	r2, [r4, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d03d      	beq.n	800a548 <_scanf_i+0x15c>
 800a4cc:	6831      	ldr	r1, [r6, #0]
 800a4ce:	6960      	ldr	r0, [r4, #20]
 800a4d0:	f891 c000 	ldrb.w	ip, [r1]
 800a4d4:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d035      	beq.n	800a548 <_scanf_i+0x15c>
 800a4dc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a4e0:	d124      	bne.n	800a52c <_scanf_i+0x140>
 800a4e2:	0510      	lsls	r0, r2, #20
 800a4e4:	d522      	bpl.n	800a52c <_scanf_i+0x140>
 800a4e6:	f10b 0b01 	add.w	fp, fp, #1
 800a4ea:	f1b9 0f00 	cmp.w	r9, #0
 800a4ee:	d003      	beq.n	800a4f8 <_scanf_i+0x10c>
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a4f6:	60a3      	str	r3, [r4, #8]
 800a4f8:	6873      	ldr	r3, [r6, #4]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	6073      	str	r3, [r6, #4]
 800a500:	dd1b      	ble.n	800a53a <_scanf_i+0x14e>
 800a502:	6833      	ldr	r3, [r6, #0]
 800a504:	3301      	adds	r3, #1
 800a506:	6033      	str	r3, [r6, #0]
 800a508:	68a3      	ldr	r3, [r4, #8]
 800a50a:	3b01      	subs	r3, #1
 800a50c:	60a3      	str	r3, [r4, #8]
 800a50e:	e7d9      	b.n	800a4c4 <_scanf_i+0xd8>
 800a510:	f1bb 0f02 	cmp.w	fp, #2
 800a514:	d1ae      	bne.n	800a474 <_scanf_i+0x88>
 800a516:	6822      	ldr	r2, [r4, #0]
 800a518:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a51c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a520:	d1bf      	bne.n	800a4a2 <_scanf_i+0xb6>
 800a522:	2310      	movs	r3, #16
 800a524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a528:	6063      	str	r3, [r4, #4]
 800a52a:	e7a2      	b.n	800a472 <_scanf_i+0x86>
 800a52c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a530:	6022      	str	r2, [r4, #0]
 800a532:	780b      	ldrb	r3, [r1, #0]
 800a534:	f805 3b01 	strb.w	r3, [r5], #1
 800a538:	e7de      	b.n	800a4f8 <_scanf_i+0x10c>
 800a53a:	4631      	mov	r1, r6
 800a53c:	4650      	mov	r0, sl
 800a53e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a542:	4798      	blx	r3
 800a544:	2800      	cmp	r0, #0
 800a546:	d0df      	beq.n	800a508 <_scanf_i+0x11c>
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	05d9      	lsls	r1, r3, #23
 800a54c:	d50d      	bpl.n	800a56a <_scanf_i+0x17e>
 800a54e:	42bd      	cmp	r5, r7
 800a550:	d909      	bls.n	800a566 <_scanf_i+0x17a>
 800a552:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a556:	4632      	mov	r2, r6
 800a558:	4650      	mov	r0, sl
 800a55a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a55e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a562:	4798      	blx	r3
 800a564:	464d      	mov	r5, r9
 800a566:	42bd      	cmp	r5, r7
 800a568:	d028      	beq.n	800a5bc <_scanf_i+0x1d0>
 800a56a:	6822      	ldr	r2, [r4, #0]
 800a56c:	f012 0210 	ands.w	r2, r2, #16
 800a570:	d113      	bne.n	800a59a <_scanf_i+0x1ae>
 800a572:	702a      	strb	r2, [r5, #0]
 800a574:	4639      	mov	r1, r7
 800a576:	6863      	ldr	r3, [r4, #4]
 800a578:	4650      	mov	r0, sl
 800a57a:	9e01      	ldr	r6, [sp, #4]
 800a57c:	47b0      	blx	r6
 800a57e:	f8d8 3000 	ldr.w	r3, [r8]
 800a582:	6821      	ldr	r1, [r4, #0]
 800a584:	1d1a      	adds	r2, r3, #4
 800a586:	f8c8 2000 	str.w	r2, [r8]
 800a58a:	f011 0f20 	tst.w	r1, #32
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	d00f      	beq.n	800a5b2 <_scanf_i+0x1c6>
 800a592:	6018      	str	r0, [r3, #0]
 800a594:	68e3      	ldr	r3, [r4, #12]
 800a596:	3301      	adds	r3, #1
 800a598:	60e3      	str	r3, [r4, #12]
 800a59a:	2000      	movs	r0, #0
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	1bed      	subs	r5, r5, r7
 800a5a0:	445d      	add	r5, fp
 800a5a2:	442b      	add	r3, r5
 800a5a4:	6123      	str	r3, [r4, #16]
 800a5a6:	b007      	add	sp, #28
 800a5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ac:	f04f 0b00 	mov.w	fp, #0
 800a5b0:	e7ca      	b.n	800a548 <_scanf_i+0x15c>
 800a5b2:	07ca      	lsls	r2, r1, #31
 800a5b4:	bf4c      	ite	mi
 800a5b6:	8018      	strhmi	r0, [r3, #0]
 800a5b8:	6018      	strpl	r0, [r3, #0]
 800a5ba:	e7eb      	b.n	800a594 <_scanf_i+0x1a8>
 800a5bc:	2001      	movs	r0, #1
 800a5be:	e7f2      	b.n	800a5a6 <_scanf_i+0x1ba>
 800a5c0:	0800ab04 	.word	0x0800ab04
 800a5c4:	0800a945 	.word	0x0800a945
 800a5c8:	0800a85d 	.word	0x0800a85d
 800a5cc:	0800ac13 	.word	0x0800ac13

0800a5d0 <__sccl>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	780b      	ldrb	r3, [r1, #0]
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	2b5e      	cmp	r3, #94	; 0x5e
 800a5d8:	bf0b      	itete	eq
 800a5da:	784b      	ldrbeq	r3, [r1, #1]
 800a5dc:	1c4a      	addne	r2, r1, #1
 800a5de:	1c8a      	addeq	r2, r1, #2
 800a5e0:	2100      	movne	r1, #0
 800a5e2:	bf08      	it	eq
 800a5e4:	2101      	moveq	r1, #1
 800a5e6:	3801      	subs	r0, #1
 800a5e8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a5ec:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a5f0:	42a8      	cmp	r0, r5
 800a5f2:	d1fb      	bne.n	800a5ec <__sccl+0x1c>
 800a5f4:	b90b      	cbnz	r3, 800a5fa <__sccl+0x2a>
 800a5f6:	1e50      	subs	r0, r2, #1
 800a5f8:	bd70      	pop	{r4, r5, r6, pc}
 800a5fa:	f081 0101 	eor.w	r1, r1, #1
 800a5fe:	4610      	mov	r0, r2
 800a600:	54e1      	strb	r1, [r4, r3]
 800a602:	4602      	mov	r2, r0
 800a604:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a608:	2d2d      	cmp	r5, #45	; 0x2d
 800a60a:	d005      	beq.n	800a618 <__sccl+0x48>
 800a60c:	2d5d      	cmp	r5, #93	; 0x5d
 800a60e:	d016      	beq.n	800a63e <__sccl+0x6e>
 800a610:	2d00      	cmp	r5, #0
 800a612:	d0f1      	beq.n	800a5f8 <__sccl+0x28>
 800a614:	462b      	mov	r3, r5
 800a616:	e7f2      	b.n	800a5fe <__sccl+0x2e>
 800a618:	7846      	ldrb	r6, [r0, #1]
 800a61a:	2e5d      	cmp	r6, #93	; 0x5d
 800a61c:	d0fa      	beq.n	800a614 <__sccl+0x44>
 800a61e:	42b3      	cmp	r3, r6
 800a620:	dcf8      	bgt.n	800a614 <__sccl+0x44>
 800a622:	461a      	mov	r2, r3
 800a624:	3002      	adds	r0, #2
 800a626:	3201      	adds	r2, #1
 800a628:	4296      	cmp	r6, r2
 800a62a:	54a1      	strb	r1, [r4, r2]
 800a62c:	dcfb      	bgt.n	800a626 <__sccl+0x56>
 800a62e:	1af2      	subs	r2, r6, r3
 800a630:	3a01      	subs	r2, #1
 800a632:	42b3      	cmp	r3, r6
 800a634:	bfa8      	it	ge
 800a636:	2200      	movge	r2, #0
 800a638:	1c5d      	adds	r5, r3, #1
 800a63a:	18ab      	adds	r3, r5, r2
 800a63c:	e7e1      	b.n	800a602 <__sccl+0x32>
 800a63e:	4610      	mov	r0, r2
 800a640:	e7da      	b.n	800a5f8 <__sccl+0x28>

0800a642 <__submore>:
 800a642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a646:	460c      	mov	r4, r1
 800a648:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a64a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a64e:	4299      	cmp	r1, r3
 800a650:	d11b      	bne.n	800a68a <__submore+0x48>
 800a652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a656:	f7ff f83f 	bl	80096d8 <_malloc_r>
 800a65a:	b918      	cbnz	r0, 800a664 <__submore+0x22>
 800a65c:	f04f 30ff 	mov.w	r0, #4294967295
 800a660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a668:	63a3      	str	r3, [r4, #56]	; 0x38
 800a66a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a66e:	6360      	str	r0, [r4, #52]	; 0x34
 800a670:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a674:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a678:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a67c:	7043      	strb	r3, [r0, #1]
 800a67e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a682:	7003      	strb	r3, [r0, #0]
 800a684:	6020      	str	r0, [r4, #0]
 800a686:	2000      	movs	r0, #0
 800a688:	e7ea      	b.n	800a660 <__submore+0x1e>
 800a68a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a68c:	0077      	lsls	r7, r6, #1
 800a68e:	463a      	mov	r2, r7
 800a690:	f000 f837 	bl	800a702 <_realloc_r>
 800a694:	4605      	mov	r5, r0
 800a696:	2800      	cmp	r0, #0
 800a698:	d0e0      	beq.n	800a65c <__submore+0x1a>
 800a69a:	eb00 0806 	add.w	r8, r0, r6
 800a69e:	4601      	mov	r1, r0
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	f7ff f934 	bl	8009910 <memcpy>
 800a6a8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a6ac:	f8c4 8000 	str.w	r8, [r4]
 800a6b0:	e7e9      	b.n	800a686 <__submore+0x44>

0800a6b2 <memmove>:
 800a6b2:	4288      	cmp	r0, r1
 800a6b4:	b510      	push	{r4, lr}
 800a6b6:	eb01 0402 	add.w	r4, r1, r2
 800a6ba:	d902      	bls.n	800a6c2 <memmove+0x10>
 800a6bc:	4284      	cmp	r4, r0
 800a6be:	4623      	mov	r3, r4
 800a6c0:	d807      	bhi.n	800a6d2 <memmove+0x20>
 800a6c2:	1e43      	subs	r3, r0, #1
 800a6c4:	42a1      	cmp	r1, r4
 800a6c6:	d008      	beq.n	800a6da <memmove+0x28>
 800a6c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6d0:	e7f8      	b.n	800a6c4 <memmove+0x12>
 800a6d2:	4601      	mov	r1, r0
 800a6d4:	4402      	add	r2, r0
 800a6d6:	428a      	cmp	r2, r1
 800a6d8:	d100      	bne.n	800a6dc <memmove+0x2a>
 800a6da:	bd10      	pop	{r4, pc}
 800a6dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6e4:	e7f7      	b.n	800a6d6 <memmove+0x24>

0800a6e6 <memchr>:
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	b2c9      	uxtb	r1, r1
 800a6ec:	4402      	add	r2, r0
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	d101      	bne.n	800a6f8 <memchr+0x12>
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e003      	b.n	800a700 <memchr+0x1a>
 800a6f8:	7804      	ldrb	r4, [r0, #0]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	428c      	cmp	r4, r1
 800a6fe:	d1f6      	bne.n	800a6ee <memchr+0x8>
 800a700:	bd10      	pop	{r4, pc}

0800a702 <_realloc_r>:
 800a702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a706:	4680      	mov	r8, r0
 800a708:	4614      	mov	r4, r2
 800a70a:	460e      	mov	r6, r1
 800a70c:	b921      	cbnz	r1, 800a718 <_realloc_r+0x16>
 800a70e:	4611      	mov	r1, r2
 800a710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a714:	f7fe bfe0 	b.w	80096d8 <_malloc_r>
 800a718:	b92a      	cbnz	r2, 800a726 <_realloc_r+0x24>
 800a71a:	f7ff f907 	bl	800992c <_free_r>
 800a71e:	4625      	mov	r5, r4
 800a720:	4628      	mov	r0, r5
 800a722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a726:	f000 f90f 	bl	800a948 <_malloc_usable_size_r>
 800a72a:	4284      	cmp	r4, r0
 800a72c:	4607      	mov	r7, r0
 800a72e:	d802      	bhi.n	800a736 <_realloc_r+0x34>
 800a730:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a734:	d812      	bhi.n	800a75c <_realloc_r+0x5a>
 800a736:	4621      	mov	r1, r4
 800a738:	4640      	mov	r0, r8
 800a73a:	f7fe ffcd 	bl	80096d8 <_malloc_r>
 800a73e:	4605      	mov	r5, r0
 800a740:	2800      	cmp	r0, #0
 800a742:	d0ed      	beq.n	800a720 <_realloc_r+0x1e>
 800a744:	42bc      	cmp	r4, r7
 800a746:	4622      	mov	r2, r4
 800a748:	4631      	mov	r1, r6
 800a74a:	bf28      	it	cs
 800a74c:	463a      	movcs	r2, r7
 800a74e:	f7ff f8df 	bl	8009910 <memcpy>
 800a752:	4631      	mov	r1, r6
 800a754:	4640      	mov	r0, r8
 800a756:	f7ff f8e9 	bl	800992c <_free_r>
 800a75a:	e7e1      	b.n	800a720 <_realloc_r+0x1e>
 800a75c:	4635      	mov	r5, r6
 800a75e:	e7df      	b.n	800a720 <_realloc_r+0x1e>

0800a760 <_strtol_l.constprop.0>:
 800a760:	2b01      	cmp	r3, #1
 800a762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a766:	4686      	mov	lr, r0
 800a768:	4690      	mov	r8, r2
 800a76a:	d001      	beq.n	800a770 <_strtol_l.constprop.0+0x10>
 800a76c:	2b24      	cmp	r3, #36	; 0x24
 800a76e:	d906      	bls.n	800a77e <_strtol_l.constprop.0+0x1e>
 800a770:	f7ff f8a2 	bl	80098b8 <__errno>
 800a774:	2316      	movs	r3, #22
 800a776:	6003      	str	r3, [r0, #0]
 800a778:	2000      	movs	r0, #0
 800a77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77e:	460d      	mov	r5, r1
 800a780:	4835      	ldr	r0, [pc, #212]	; (800a858 <_strtol_l.constprop.0+0xf8>)
 800a782:	462a      	mov	r2, r5
 800a784:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a788:	5d06      	ldrb	r6, [r0, r4]
 800a78a:	f016 0608 	ands.w	r6, r6, #8
 800a78e:	d1f8      	bne.n	800a782 <_strtol_l.constprop.0+0x22>
 800a790:	2c2d      	cmp	r4, #45	; 0x2d
 800a792:	d12e      	bne.n	800a7f2 <_strtol_l.constprop.0+0x92>
 800a794:	2601      	movs	r6, #1
 800a796:	782c      	ldrb	r4, [r5, #0]
 800a798:	1c95      	adds	r5, r2, #2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d057      	beq.n	800a84e <_strtol_l.constprop.0+0xee>
 800a79e:	2b10      	cmp	r3, #16
 800a7a0:	d109      	bne.n	800a7b6 <_strtol_l.constprop.0+0x56>
 800a7a2:	2c30      	cmp	r4, #48	; 0x30
 800a7a4:	d107      	bne.n	800a7b6 <_strtol_l.constprop.0+0x56>
 800a7a6:	782a      	ldrb	r2, [r5, #0]
 800a7a8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a7ac:	2a58      	cmp	r2, #88	; 0x58
 800a7ae:	d149      	bne.n	800a844 <_strtol_l.constprop.0+0xe4>
 800a7b0:	2310      	movs	r3, #16
 800a7b2:	786c      	ldrb	r4, [r5, #1]
 800a7b4:	3502      	adds	r5, #2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a7bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a7c0:	fbbc f9f3 	udiv	r9, ip, r3
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	fb03 ca19 	mls	sl, r3, r9, ip
 800a7ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a7ce:	2f09      	cmp	r7, #9
 800a7d0:	d814      	bhi.n	800a7fc <_strtol_l.constprop.0+0x9c>
 800a7d2:	463c      	mov	r4, r7
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	dd20      	ble.n	800a81a <_strtol_l.constprop.0+0xba>
 800a7d8:	1c57      	adds	r7, r2, #1
 800a7da:	d007      	beq.n	800a7ec <_strtol_l.constprop.0+0x8c>
 800a7dc:	4581      	cmp	r9, r0
 800a7de:	d319      	bcc.n	800a814 <_strtol_l.constprop.0+0xb4>
 800a7e0:	d101      	bne.n	800a7e6 <_strtol_l.constprop.0+0x86>
 800a7e2:	45a2      	cmp	sl, r4
 800a7e4:	db16      	blt.n	800a814 <_strtol_l.constprop.0+0xb4>
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	fb00 4003 	mla	r0, r0, r3, r4
 800a7ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f0:	e7eb      	b.n	800a7ca <_strtol_l.constprop.0+0x6a>
 800a7f2:	2c2b      	cmp	r4, #43	; 0x2b
 800a7f4:	bf04      	itt	eq
 800a7f6:	782c      	ldrbeq	r4, [r5, #0]
 800a7f8:	1c95      	addeq	r5, r2, #2
 800a7fa:	e7ce      	b.n	800a79a <_strtol_l.constprop.0+0x3a>
 800a7fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a800:	2f19      	cmp	r7, #25
 800a802:	d801      	bhi.n	800a808 <_strtol_l.constprop.0+0xa8>
 800a804:	3c37      	subs	r4, #55	; 0x37
 800a806:	e7e5      	b.n	800a7d4 <_strtol_l.constprop.0+0x74>
 800a808:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a80c:	2f19      	cmp	r7, #25
 800a80e:	d804      	bhi.n	800a81a <_strtol_l.constprop.0+0xba>
 800a810:	3c57      	subs	r4, #87	; 0x57
 800a812:	e7df      	b.n	800a7d4 <_strtol_l.constprop.0+0x74>
 800a814:	f04f 32ff 	mov.w	r2, #4294967295
 800a818:	e7e8      	b.n	800a7ec <_strtol_l.constprop.0+0x8c>
 800a81a:	1c53      	adds	r3, r2, #1
 800a81c:	d108      	bne.n	800a830 <_strtol_l.constprop.0+0xd0>
 800a81e:	2322      	movs	r3, #34	; 0x22
 800a820:	4660      	mov	r0, ip
 800a822:	f8ce 3000 	str.w	r3, [lr]
 800a826:	f1b8 0f00 	cmp.w	r8, #0
 800a82a:	d0a6      	beq.n	800a77a <_strtol_l.constprop.0+0x1a>
 800a82c:	1e69      	subs	r1, r5, #1
 800a82e:	e006      	b.n	800a83e <_strtol_l.constprop.0+0xde>
 800a830:	b106      	cbz	r6, 800a834 <_strtol_l.constprop.0+0xd4>
 800a832:	4240      	negs	r0, r0
 800a834:	f1b8 0f00 	cmp.w	r8, #0
 800a838:	d09f      	beq.n	800a77a <_strtol_l.constprop.0+0x1a>
 800a83a:	2a00      	cmp	r2, #0
 800a83c:	d1f6      	bne.n	800a82c <_strtol_l.constprop.0+0xcc>
 800a83e:	f8c8 1000 	str.w	r1, [r8]
 800a842:	e79a      	b.n	800a77a <_strtol_l.constprop.0+0x1a>
 800a844:	2430      	movs	r4, #48	; 0x30
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1b5      	bne.n	800a7b6 <_strtol_l.constprop.0+0x56>
 800a84a:	2308      	movs	r3, #8
 800a84c:	e7b3      	b.n	800a7b6 <_strtol_l.constprop.0+0x56>
 800a84e:	2c30      	cmp	r4, #48	; 0x30
 800a850:	d0a9      	beq.n	800a7a6 <_strtol_l.constprop.0+0x46>
 800a852:	230a      	movs	r3, #10
 800a854:	e7af      	b.n	800a7b6 <_strtol_l.constprop.0+0x56>
 800a856:	bf00      	nop
 800a858:	0800ac1f 	.word	0x0800ac1f

0800a85c <_strtol_r>:
 800a85c:	f7ff bf80 	b.w	800a760 <_strtol_l.constprop.0>

0800a860 <_strtoul_l.constprop.0>:
 800a860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a864:	4686      	mov	lr, r0
 800a866:	460d      	mov	r5, r1
 800a868:	4f35      	ldr	r7, [pc, #212]	; (800a940 <_strtoul_l.constprop.0+0xe0>)
 800a86a:	4628      	mov	r0, r5
 800a86c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a870:	5d3e      	ldrb	r6, [r7, r4]
 800a872:	f016 0608 	ands.w	r6, r6, #8
 800a876:	d1f8      	bne.n	800a86a <_strtoul_l.constprop.0+0xa>
 800a878:	2c2d      	cmp	r4, #45	; 0x2d
 800a87a:	d130      	bne.n	800a8de <_strtoul_l.constprop.0+0x7e>
 800a87c:	2601      	movs	r6, #1
 800a87e:	782c      	ldrb	r4, [r5, #0]
 800a880:	1c85      	adds	r5, r0, #2
 800a882:	2b00      	cmp	r3, #0
 800a884:	d057      	beq.n	800a936 <_strtoul_l.constprop.0+0xd6>
 800a886:	2b10      	cmp	r3, #16
 800a888:	d109      	bne.n	800a89e <_strtoul_l.constprop.0+0x3e>
 800a88a:	2c30      	cmp	r4, #48	; 0x30
 800a88c:	d107      	bne.n	800a89e <_strtoul_l.constprop.0+0x3e>
 800a88e:	7828      	ldrb	r0, [r5, #0]
 800a890:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a894:	2858      	cmp	r0, #88	; 0x58
 800a896:	d149      	bne.n	800a92c <_strtoul_l.constprop.0+0xcc>
 800a898:	2310      	movs	r3, #16
 800a89a:	786c      	ldrb	r4, [r5, #1]
 800a89c:	3502      	adds	r5, #2
 800a89e:	f04f 38ff 	mov.w	r8, #4294967295
 800a8a2:	fbb8 f8f3 	udiv	r8, r8, r3
 800a8a6:	2700      	movs	r7, #0
 800a8a8:	fb03 f908 	mul.w	r9, r3, r8
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	ea6f 0909 	mvn.w	r9, r9
 800a8b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a8b6:	f1bc 0f09 	cmp.w	ip, #9
 800a8ba:	d815      	bhi.n	800a8e8 <_strtoul_l.constprop.0+0x88>
 800a8bc:	4664      	mov	r4, ip
 800a8be:	42a3      	cmp	r3, r4
 800a8c0:	dd23      	ble.n	800a90a <_strtoul_l.constprop.0+0xaa>
 800a8c2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a8c6:	d007      	beq.n	800a8d8 <_strtoul_l.constprop.0+0x78>
 800a8c8:	4580      	cmp	r8, r0
 800a8ca:	d31b      	bcc.n	800a904 <_strtoul_l.constprop.0+0xa4>
 800a8cc:	d101      	bne.n	800a8d2 <_strtoul_l.constprop.0+0x72>
 800a8ce:	45a1      	cmp	r9, r4
 800a8d0:	db18      	blt.n	800a904 <_strtoul_l.constprop.0+0xa4>
 800a8d2:	2701      	movs	r7, #1
 800a8d4:	fb00 4003 	mla	r0, r0, r3, r4
 800a8d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8dc:	e7e9      	b.n	800a8b2 <_strtoul_l.constprop.0+0x52>
 800a8de:	2c2b      	cmp	r4, #43	; 0x2b
 800a8e0:	bf04      	itt	eq
 800a8e2:	782c      	ldrbeq	r4, [r5, #0]
 800a8e4:	1c85      	addeq	r5, r0, #2
 800a8e6:	e7cc      	b.n	800a882 <_strtoul_l.constprop.0+0x22>
 800a8e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a8ec:	f1bc 0f19 	cmp.w	ip, #25
 800a8f0:	d801      	bhi.n	800a8f6 <_strtoul_l.constprop.0+0x96>
 800a8f2:	3c37      	subs	r4, #55	; 0x37
 800a8f4:	e7e3      	b.n	800a8be <_strtoul_l.constprop.0+0x5e>
 800a8f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a8fa:	f1bc 0f19 	cmp.w	ip, #25
 800a8fe:	d804      	bhi.n	800a90a <_strtoul_l.constprop.0+0xaa>
 800a900:	3c57      	subs	r4, #87	; 0x57
 800a902:	e7dc      	b.n	800a8be <_strtoul_l.constprop.0+0x5e>
 800a904:	f04f 37ff 	mov.w	r7, #4294967295
 800a908:	e7e6      	b.n	800a8d8 <_strtoul_l.constprop.0+0x78>
 800a90a:	1c7b      	adds	r3, r7, #1
 800a90c:	d106      	bne.n	800a91c <_strtoul_l.constprop.0+0xbc>
 800a90e:	2322      	movs	r3, #34	; 0x22
 800a910:	4638      	mov	r0, r7
 800a912:	f8ce 3000 	str.w	r3, [lr]
 800a916:	b932      	cbnz	r2, 800a926 <_strtoul_l.constprop.0+0xc6>
 800a918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a91c:	b106      	cbz	r6, 800a920 <_strtoul_l.constprop.0+0xc0>
 800a91e:	4240      	negs	r0, r0
 800a920:	2a00      	cmp	r2, #0
 800a922:	d0f9      	beq.n	800a918 <_strtoul_l.constprop.0+0xb8>
 800a924:	b107      	cbz	r7, 800a928 <_strtoul_l.constprop.0+0xc8>
 800a926:	1e69      	subs	r1, r5, #1
 800a928:	6011      	str	r1, [r2, #0]
 800a92a:	e7f5      	b.n	800a918 <_strtoul_l.constprop.0+0xb8>
 800a92c:	2430      	movs	r4, #48	; 0x30
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1b5      	bne.n	800a89e <_strtoul_l.constprop.0+0x3e>
 800a932:	2308      	movs	r3, #8
 800a934:	e7b3      	b.n	800a89e <_strtoul_l.constprop.0+0x3e>
 800a936:	2c30      	cmp	r4, #48	; 0x30
 800a938:	d0a9      	beq.n	800a88e <_strtoul_l.constprop.0+0x2e>
 800a93a:	230a      	movs	r3, #10
 800a93c:	e7af      	b.n	800a89e <_strtoul_l.constprop.0+0x3e>
 800a93e:	bf00      	nop
 800a940:	0800ac1f 	.word	0x0800ac1f

0800a944 <_strtoul_r>:
 800a944:	f7ff bf8c 	b.w	800a860 <_strtoul_l.constprop.0>

0800a948 <_malloc_usable_size_r>:
 800a948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a94c:	1f18      	subs	r0, r3, #4
 800a94e:	2b00      	cmp	r3, #0
 800a950:	bfbc      	itt	lt
 800a952:	580b      	ldrlt	r3, [r1, r0]
 800a954:	18c0      	addlt	r0, r0, r3
 800a956:	4770      	bx	lr

0800a958 <_init>:
 800a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95a:	bf00      	nop
 800a95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95e:	bc08      	pop	{r3}
 800a960:	469e      	mov	lr, r3
 800a962:	4770      	bx	lr

0800a964 <_fini>:
 800a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a966:	bf00      	nop
 800a968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96a:	bc08      	pop	{r3}
 800a96c:	469e      	mov	lr, r3
 800a96e:	4770      	bx	lr
