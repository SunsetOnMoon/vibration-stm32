
Vibrationv1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006b20  08006b20  00016b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c38  08006c38  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08006c38  08006c38  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006c38  08006c38  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c38  08006c38  00016c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c3c  08006c3c  00016c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08006c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d8  20000028  08006c68  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001200  08006c68  00021200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102be  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e10  00000000  00000000  00030352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  00033168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d24  00000000  00000000  00034268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000199f1  00000000  00000000  00034f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015275  00000000  00000000  0004e97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090e7e  00000000  00000000  00063bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000467c  00000000  00000000  000f4a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f90ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08006b08 	.word	0x08006b08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08006b08 	.word	0x08006b08

0800014c <writeDataFromADCToFile>:
{

}

void writeDataFromADCToFile(int offset, int adc_buffer_size)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
//	if (size_control != VIBRIC_DATA_SIZE) {
//		memset(buffer, 0, BUFFER_SIZE);
//		for (int i = 0; i < ADC_BUFFER_SIZE; i++) {
//			adcBuffer_f[i] = (float)adcBuffer[i];
//		}
		memset(buffer, 0, BUFFER_SIZE);
 8000156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800015a:	2100      	movs	r1, #0
 800015c:	480e      	ldr	r0, [pc, #56]	; (8000198 <writeDataFromADCToFile+0x4c>)
 800015e:	f006 fc98 	bl	8006a92 <memset>
		memcpy(buffer, adcBuffer + offset, BUFFER_SIZE);
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	005b      	lsls	r3, r3, #1
 8000166:	4a0d      	ldr	r2, [pc, #52]	; (800019c <writeDataFromADCToFile+0x50>)
 8000168:	4413      	add	r3, r2
 800016a:	4a0b      	ldr	r2, [pc, #44]	; (8000198 <writeDataFromADCToFile+0x4c>)
 800016c:	4610      	mov	r0, r2
 800016e:	4619      	mov	r1, r3
 8000170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000174:	461a      	mov	r2, r3
 8000176:	f006 fcb9 	bl	8006aec <memcpy>
		fresult = f_write(&fil, buffer, BUFFER_SIZE, &bw);
 800017a:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <writeDataFromADCToFile+0x54>)
 800017c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000180:	4905      	ldr	r1, [pc, #20]	; (8000198 <writeDataFromADCToFile+0x4c>)
 8000182:	4808      	ldr	r0, [pc, #32]	; (80001a4 <writeDataFromADCToFile+0x58>)
 8000184:	f006 f99d 	bl	80064c2 <f_write>
 8000188:	4603      	mov	r3, r0
 800018a:	461a      	mov	r2, r3
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <writeDataFromADCToFile+0x5c>)
 800018e:	701a      	strb	r2, [r3, #0]
//	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
//	{
//		offset = adcBuffer[i] == 0 ? 1 : (int)log10(adcBuffer[i]) + 1;
//		sprintf(buffer + i * offset, "%d ", adcBuffer[i]);
//	}
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	20000dbc 	.word	0x20000dbc
 800019c:	20000158 	.word	0x20000158
 80001a0:	20000db8 	.word	0x20000db8
 80001a4:	20000b88 	.word	0x20000b88
 80001a8:	20000db4 	.word	0x20000db4

080001ac <HAL_ADC_ConvHalfCpltCallback>:
//
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (flag)) {
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a07      	ldr	r2, [pc, #28]	; (80001d8 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80001ba:	4293      	cmp	r3, r2
 80001bc:	d108      	bne.n	80001d0 <HAL_ADC_ConvHalfCpltCallback+0x24>
 80001be:	4b07      	ldr	r3, [pc, #28]	; (80001dc <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d004      	beq.n	80001d0 <HAL_ADC_ConvHalfCpltCallback+0x24>
		writeDataFromADCToFile(0, ADC_BUFFER_SIZE / 2);
 80001c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001ca:	2000      	movs	r0, #0
 80001cc:	f7ff ffbe 	bl	800014c <writeDataFromADCToFile>
	}
}
 80001d0:	bf00      	nop
 80001d2:	3708      	adds	r7, #8
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40012400 	.word	0x40012400
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	if ((hadc->Instance == ADC1) && (flag))
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <HAL_ADC_ConvCpltCallback+0x30>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d109      	bne.n	8000206 <HAL_ADC_ConvCpltCallback+0x26>
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <HAL_ADC_ConvCpltCallback+0x34>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d005      	beq.n	8000206 <HAL_ADC_ConvCpltCallback+0x26>
	{
//		HAL_ADC_Stop_DMA(&hadc1);
		writeDataFromADCToFile(ADC_BUFFER_SIZE / 2, ADC_BUFFER_SIZE / 2);
 80001fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000202:	f7ff ffa3 	bl	800014c <writeDataFromADCToFile>
//		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, ADC_BUFFER_SIZE);
	}
}
 8000206:	bf00      	nop
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40012400 	.word	0x40012400
 8000214:	20000000 	.word	0x20000000

08000218 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == BTN_Pin) && flag) {
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000228:	d119      	bne.n	800025e <HAL_GPIO_EXTI_Callback+0x46>
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <HAL_GPIO_EXTI_Callback+0x50>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d015      	beq.n	800025e <HAL_GPIO_EXTI_Callback+0x46>
		flag = 0;
 8000232:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <HAL_GPIO_EXTI_Callback+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <HAL_GPIO_EXTI_Callback+0x54>)
 800023a:	f000 fdef 	bl	8000e1c <HAL_ADC_Stop_DMA>
		fresult = f_close(&fil);
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <HAL_GPIO_EXTI_Callback+0x58>)
 8000240:	f006 fba6 	bl	8006990 <f_close>
 8000244:	4603      	mov	r3, r0
 8000246:	461a      	mov	r2, r3
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <HAL_GPIO_EXTI_Callback+0x5c>)
 800024a:	701a      	strb	r2, [r3, #0]
		fresult = f_mount(0, "", 0);
 800024c:	2200      	movs	r2, #0
 800024e:	490a      	ldr	r1, [pc, #40]	; (8000278 <HAL_GPIO_EXTI_Callback+0x60>)
 8000250:	2000      	movs	r0, #0
 8000252:	f005 fe75 	bl	8005f40 <f_mount>
 8000256:	4603      	mov	r3, r0
 8000258:	461a      	mov	r2, r3
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_GPIO_EXTI_Callback+0x5c>)
 800025c:	701a      	strb	r2, [r3, #0]
	}
}
 800025e:	bf00      	nop
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000000 	.word	0x20000000
 800026c:	20000044 	.word	0x20000044
 8000270:	20000b88 	.word	0x20000b88
 8000274:	20000db4 	.word	0x20000db4
 8000278:	08006b20 	.word	0x08006b20

0800027c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000280:	f000 fb90 	bl	80009a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000284:	f000 f854 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000288:	f000 f992 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800028c:	f000 f972 	bl	8000574 <MX_DMA_Init>
  MX_FATFS_Init();
 8000290:	f003 fa7c 	bl	800378c <MX_FATFS_Init>
  MX_ADC1_Init();
 8000294:	f000 f8a4 	bl	80003e0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000298:	f000 f916 	bl	80004c8 <MX_TIM4_Init>
  MX_SPI2_Init();
 800029c:	f000 f8de 	bl	800045c <MX_SPI2_Init>
//  fresult = f_mount(0, "", 0);
//  vibric = (vibric_header*)malloc(sizeof(vibric_header));
//  vibric_str = (char*)malloc(52);
//  initialize_vibric_header(vibric, VIBRIC_DATA_SIZE);
//  get_vibric_file_header(vibric, vibric_str);
  fresult = f_mount(&fs, "", 1); // if NOT_READY delete TIM4 in CubeMX, and add again
 80002a0:	2201      	movs	r2, #1
 80002a2:	491a      	ldr	r1, [pc, #104]	; (800030c <main+0x90>)
 80002a4:	481a      	ldr	r0, [pc, #104]	; (8000310 <main+0x94>)
 80002a6:	f005 fe4b 	bl	8005f40 <f_mount>
 80002aa:	4603      	mov	r3, r0
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b19      	ldr	r3, [pc, #100]	; (8000314 <main+0x98>)
 80002b0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80002b2:	4b18      	ldr	r3, [pc, #96]	; (8000314 <main+0x98>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <main+0x42>
//		__NOP();
	  return 1;
 80002ba:	2301      	movs	r3, #1
 80002bc:	e023      	b.n	8000306 <main+0x8a>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	2180      	movs	r1, #128	; 0x80
 80002c2:	4815      	ldr	r0, [pc, #84]	; (8000318 <main+0x9c>)
 80002c4:	f001 fe36 	bl	8001f34 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80002c8:	2064      	movs	r0, #100	; 0x64
 80002ca:	f000 fbcd 	bl	8000a68 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2180      	movs	r1, #128	; 0x80
 80002d2:	4811      	ldr	r0, [pc, #68]	; (8000318 <main+0x9c>)
 80002d4:	f001 fe2e 	bl	8001f34 <HAL_GPIO_WritePin>
	fresult = f_open(&fil, "data.dat", FA_OPEN_ALWAYS | FA_WRITE);
 80002d8:	2212      	movs	r2, #18
 80002da:	4910      	ldr	r1, [pc, #64]	; (800031c <main+0xa0>)
 80002dc:	4810      	ldr	r0, [pc, #64]	; (8000320 <main+0xa4>)
 80002de:	f005 fe77 	bl	8005fd0 <f_open>
 80002e2:	4603      	mov	r3, r0
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <main+0x98>)
 80002e8:	701a      	strb	r2, [r3, #0]
//	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");

//	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
//	f_close(&fil);

	HAL_ADCEx_Calibration_Start(&hadc1);
 80002ea:	480e      	ldr	r0, [pc, #56]	; (8000324 <main+0xa8>)
 80002ec:	f001 f8ae 	bl	800144c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, ADC_BUFFER_SIZE);
 80002f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002f4:	490c      	ldr	r1, [pc, #48]	; (8000328 <main+0xac>)
 80002f6:	480b      	ldr	r0, [pc, #44]	; (8000324 <main+0xa8>)
 80002f8:	f000 fcb2 	bl	8000c60 <HAL_ADC_Start_DMA>
	HAL_TIM_OC_Start(&htim4, TIM_CHANNEL_4);
 80002fc:	210c      	movs	r1, #12
 80002fe:	480b      	ldr	r0, [pc, #44]	; (800032c <main+0xb0>)
 8000300:	f002 feda 	bl	80030b8 <HAL_TIM_OC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000304:	e7fe      	b.n	8000304 <main+0x88>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000306:	4618      	mov	r0, r3
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	08006b20 	.word	0x08006b20
 8000310:	20000958 	.word	0x20000958
 8000314:	20000db4 	.word	0x20000db4
 8000318:	40010c00 	.word	0x40010c00
 800031c:	08006b24 	.word	0x08006b24
 8000320:	20000b88 	.word	0x20000b88
 8000324:	20000044 	.word	0x20000044
 8000328:	20000158 	.word	0x20000158
 800032c:	20000110 	.word	0x20000110

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b094      	sub	sp, #80	; 0x50
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f006 fba7 	bl	8006a92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	f107 0314 	add.w	r3, r7, #20
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	2302      	movs	r3, #2
 8000362:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000368:	2310      	movs	r3, #16
 800036a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036c:	2302      	movs	r3, #2
 800036e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000370:	2300      	movs	r3, #0
 8000372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000374:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000378:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fe08 	bl	8001f94 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800038a:	f000 f981 	bl	8000690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2302      	movs	r3, #2
 8000394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a4:	f107 0314 	add.w	r3, r7, #20
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 f874 	bl	8002498 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80003b6:	f000 f96b 	bl	8000690 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003ba:	2302      	movs	r3, #2
 80003bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 f9e0 	bl	800278c <HAL_RCCEx_PeriphCLKConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003d2:	f000 f95d 	bl	8000690 <Error_Handler>
  }
}
 80003d6:	bf00      	nop
 80003d8:	3750      	adds	r7, #80	; 0x50
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003f0:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_ADC1_Init+0x74>)
 80003f2:	4a19      	ldr	r2, [pc, #100]	; (8000458 <MX_ADC1_Init+0x78>)
 80003f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_ADC1_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_ADC1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_ADC1_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_ADC1_Init+0x74>)
 800040a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800040e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000410:	4b10      	ldr	r3, [pc, #64]	; (8000454 <MX_ADC1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_ADC1_Init+0x74>)
 8000418:	2201      	movs	r2, #1
 800041a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <MX_ADC1_Init+0x74>)
 800041e:	f000 fb47 	bl	8000ab0 <HAL_ADC_Init>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000428:	f000 f932 	bl	8000690 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800042c:	2300      	movs	r3, #0
 800042e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000430:	2301      	movs	r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_ADC1_Init+0x74>)
 800043e:	f000 fe0b 	bl	8001058 <HAL_ADC_ConfigChannel>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000448:	f000 f922 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000044 	.word	0x20000044
 8000458:	40012400 	.word	0x40012400

0800045c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000460:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <MX_SPI2_Init+0x64>)
 8000462:	4a18      	ldr	r2, [pc, #96]	; (80004c4 <MX_SPI2_Init+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000466:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <MX_SPI2_Init+0x64>)
 8000468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800046c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <MX_SPI2_Init+0x64>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <MX_SPI2_Init+0x64>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <MX_SPI2_Init+0x64>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_SPI2_Init+0x64>)
 8000482:	2200      	movs	r2, #0
 8000484:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000486:	4b0e      	ldr	r3, [pc, #56]	; (80004c0 <MX_SPI2_Init+0x64>)
 8000488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800048c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <MX_SPI2_Init+0x64>)
 8000490:	2230      	movs	r2, #48	; 0x30
 8000492:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <MX_SPI2_Init+0x64>)
 8000496:	2200      	movs	r2, #0
 8000498:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_SPI2_Init+0x64>)
 800049c:	2200      	movs	r2, #0
 800049e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004a0:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <MX_SPI2_Init+0x64>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_SPI2_Init+0x64>)
 80004a8:	220a      	movs	r2, #10
 80004aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004ac:	4804      	ldr	r0, [pc, #16]	; (80004c0 <MX_SPI2_Init+0x64>)
 80004ae:	f002 fad9 	bl	8002a64 <HAL_SPI_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80004b8:	f000 f8ea 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	200000b8 	.word	0x200000b8
 80004c4:	40003800 	.word	0x40003800

080004c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ce:	f107 0320 	add.w	r3, r7, #32
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]
 80004e6:	615a      	str	r2, [r3, #20]
 80004e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <MX_TIM4_Init+0xa4>)
 80004ec:	4a20      	ldr	r2, [pc, #128]	; (8000570 <MX_TIM4_Init+0xa8>)
 80004ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31;
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_TIM4_Init+0xa4>)
 80004f2:	221f      	movs	r2, #31
 80004f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <MX_TIM4_Init+0xa4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 79;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_TIM4_Init+0xa4>)
 80004fe:	224f      	movs	r2, #79	; 0x4f
 8000500:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_TIM4_Init+0xa4>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_TIM4_Init+0xa4>)
 800050a:	2200      	movs	r2, #0
 800050c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800050e:	4817      	ldr	r0, [pc, #92]	; (800056c <MX_TIM4_Init+0xa4>)
 8000510:	f002 fd82 	bl	8003018 <HAL_TIM_OC_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800051a:	f000 f8b9 	bl	8000690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051e:	2300      	movs	r3, #0
 8000520:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	4619      	mov	r1, r3
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <MX_TIM4_Init+0xa4>)
 800052e:	f003 f8cf 	bl	80036d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000538:	f000 f8aa 	bl	8000690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800053c:	2330      	movs	r3, #48	; 0x30
 800053e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	220c      	movs	r2, #12
 8000550:	4619      	mov	r1, r3
 8000552:	4806      	ldr	r0, [pc, #24]	; (800056c <MX_TIM4_Init+0xa4>)
 8000554:	f002 fe52 	bl	80031fc <HAL_TIM_OC_ConfigChannel>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800055e:	f000 f897 	bl	8000690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	3728      	adds	r7, #40	; 0x28
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000110 	.word	0x20000110
 8000570:	40000800 	.word	0x40000800

08000574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_DMA_Init+0x38>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a0b      	ldr	r2, [pc, #44]	; (80005ac <MX_DMA_Init+0x38>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_DMA_Init+0x38>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	200b      	movs	r0, #11
 8000598:	f001 f8e7 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800059c:	200b      	movs	r0, #11
 800059e:	f001 f900 	bl	80017a2 <HAL_NVIC_EnableIRQ>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c4:	4b2e      	ldr	r3, [pc, #184]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a2d      	ldr	r2, [pc, #180]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0310 	and.w	r3, r3, #16
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005e2:	f043 0320 	orr.w	r3, r3, #32
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0320 	and.w	r3, r3, #32
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <MX_GPIO_Init+0xd0>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_GPIO_Init+0xd0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_GPIO_Init+0xd0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <MX_GPIO_Init+0xd0>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_GPIO_Init+0xd0>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 800062a:	4816      	ldr	r0, [pc, #88]	; (8000684 <MX_GPIO_Init+0xd4>)
 800062c:	f001 fc82 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_GPIO_Init+0xd8>)
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	4811      	ldr	r0, [pc, #68]	; (800068c <MX_GPIO_Init+0xdc>)
 8000646:	f001 faf1 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LED_Pin;
 800064a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2302      	movs	r3, #2
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <MX_GPIO_Init+0xd4>)
 8000664:	f001 fae2 	bl	8001c2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2028      	movs	r0, #40	; 0x28
 800066e:	f001 f87c 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000672:	2028      	movs	r0, #40	; 0x28
 8000674:	f001 f895 	bl	80017a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	40010c00 	.word	0x40010c00
 8000688:	10110000 	.word	0x10110000
 800068c:	40011000 	.word	0x40011000

08000690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000694:	b672      	cpsid	i
}
 8000696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000698:	e7fe      	b.n	8000698 <Error_Handler+0x8>
	...

0800069c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <HAL_MspInit+0x5c>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <HAL_MspInit+0x5c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_MspInit+0x5c>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x5c>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_MspInit+0x5c>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_MspInit+0x5c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006d2:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <HAL_MspInit+0x60>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <HAL_MspInit+0x60>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010000 	.word	0x40010000

08000700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a2c      	ldr	r2, [pc, #176]	; (80007cc <HAL_ADC_MspInit+0xcc>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d151      	bne.n	80007c4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <HAL_ADC_MspInit+0xd0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <HAL_ADC_MspInit+0xd0>)
 8000726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <HAL_ADC_MspInit+0xd0>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <HAL_ADC_MspInit+0xd0>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a24      	ldr	r2, [pc, #144]	; (80007d0 <HAL_ADC_MspInit+0xd0>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <HAL_ADC_MspInit+0xd0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000750:	2301      	movs	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000754:	2303      	movs	r3, #3
 8000756:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4619      	mov	r1, r3
 800075e:	481d      	ldr	r0, [pc, #116]	; (80007d4 <HAL_ADC_MspInit+0xd4>)
 8000760:	f001 fa64 	bl	8001c2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 8000766:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <HAL_ADC_MspInit+0xdc>)
 8000768:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 800077e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000782:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 8000786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800078a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 800078e:	2220      	movs	r2, #32
 8000790:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000798:	480f      	ldr	r0, [pc, #60]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 800079a:	f001 f81d 	bl	80017d8 <HAL_DMA_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80007a4:	f7ff ff74 	bl	8000690 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 80007ac:	621a      	str	r2, [r3, #32]
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <HAL_ADC_MspInit+0xd8>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2100      	movs	r1, #0
 80007b8:	2012      	movs	r0, #18
 80007ba:	f000 ffd6 	bl	800176a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007be:	2012      	movs	r0, #18
 80007c0:	f000 ffef 	bl	80017a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40012400 	.word	0x40012400
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010800 	.word	0x40010800
 80007d8:	20000074 	.word	0x20000074
 80007dc:	40020008 	.word	0x40020008

080007e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <HAL_SPI_MspInit+0x8c>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d131      	bne.n	8000864 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000800:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <HAL_SPI_MspInit+0x90>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4a1a      	ldr	r2, [pc, #104]	; (8000870 <HAL_SPI_MspInit+0x90>)
 8000806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080a:	61d3      	str	r3, [r2, #28]
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_SPI_MspInit+0x90>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_SPI_MspInit+0x90>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a14      	ldr	r2, [pc, #80]	; (8000870 <HAL_SPI_MspInit+0x90>)
 800081e:	f043 0308 	orr.w	r3, r3, #8
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_SPI_MspInit+0x90>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0308 	and.w	r3, r3, #8
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000830:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000834:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	4619      	mov	r1, r3
 8000844:	480b      	ldr	r0, [pc, #44]	; (8000874 <HAL_SPI_MspInit+0x94>)
 8000846:	f001 f9f1 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800084a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800084e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	4619      	mov	r1, r3
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <HAL_SPI_MspInit+0x94>)
 8000860:	f001 f9e4 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40003800 	.word	0x40003800
 8000870:	40021000 	.word	0x40021000
 8000874:	40010c00 	.word	0x40010c00

08000878 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a09      	ldr	r2, [pc, #36]	; (80008ac <HAL_TIM_OC_MspInit+0x34>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10b      	bne.n	80008a2 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_TIM_OC_MspInit+0x38>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_TIM_OC_MspInit+0x38>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_TIM_OC_MspInit+0x38>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	40000800 	.word	0x40000800
 80008b0:	40021000 	.word	0x40021000

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>
	...

080008bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	f_mount(0, "", 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	4902      	ldr	r1, [pc, #8]	; (80008cc <HardFault_Handler+0x10>)
 80008c4:	2000      	movs	r0, #0
 80008c6:	f005 fb3b 	bl	8005f40 <f_mount>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0xe>
 80008cc:	08006b30 	.word	0x08006b30

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090a:	f000 f891 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA1_Channel1_IRQHandler+0x10>)
 800091a:	f001 f853 	bl	80019c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000074 	.word	0x20000074

08000928 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <ADC1_2_IRQHandler+0x10>)
 800092e:	f000 fac1 	bl	8000eb4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000044 	.word	0x20000044

0800093c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000940:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000944:	f001 fb0e 	bl	8001f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000958:	f7ff fff8 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800095e:	490c      	ldr	r1, [pc, #48]	; (8000990 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a09      	ldr	r2, [pc, #36]	; (8000998 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000974:	4c09      	ldr	r4, [pc, #36]	; (800099c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000982:	f006 f88f 	bl	8006aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000986:	f7ff fc79 	bl	800027c <main>
  bx lr
 800098a:	4770      	bx	lr
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000994:	08006c40 	.word	0x08006c40
  ldr r2, =_sbss
 8000998:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800099c:	20001200 	.word	0x20001200

080009a0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <CAN1_RX1_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_Init+0x28>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <HAL_Init+0x28>)
 80009ae:	f043 0310 	orr.w	r3, r3, #16
 80009b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f000 fecd 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 f808 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c0:	f7ff fe6c 	bl	800069c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40022000 	.word	0x40022000

080009d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_InitTick+0x54>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_InitTick+0x58>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fee5 	bl	80017be <HAL_SYSTICK_Config>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e00e      	b.n	8000a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d80a      	bhi.n	8000a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a04:	2200      	movs	r2, #0
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f000 fead 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a10:	4a06      	ldr	r2, [pc, #24]	; (8000a2c <HAL_InitTick+0x5c>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e000      	b.n	8000a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000004 	.word	0x20000004
 8000a28:	2000000c 	.word	0x2000000c
 8000a2c:	20000008 	.word	0x20000008

08000a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_IncTick+0x1c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_IncTick+0x20>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4a03      	ldr	r2, [pc, #12]	; (8000a50 <HAL_IncTick+0x20>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	2000000c 	.word	0x2000000c
 8000a50:	200011bc 	.word	0x200011bc

08000a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;
 8000a58:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <HAL_GetTick+0x10>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	200011bc 	.word	0x200011bc

08000a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a70:	f7ff fff0 	bl	8000a54 <HAL_GetTick>
 8000a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d005      	beq.n	8000a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_Delay+0x44>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a8e:	bf00      	nop
 8000a90:	f7ff ffe0 	bl	8000a54 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d8f7      	bhi.n	8000a90 <HAL_Delay+0x28>
  {
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000000c 	.word	0x2000000c

08000ab0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d101      	bne.n	8000ad2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e0be      	b.n	8000c50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d109      	bne.n	8000af4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff fe06 	bl	8000700 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 fc01 	bl	80012fc <ADC_ConversionStop_Disable>
 8000afa:	4603      	mov	r3, r0
 8000afc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f040 8099 	bne.w	8000c3e <HAL_ADC_Init+0x18e>
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f040 8095 	bne.w	8000c3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b1c:	f023 0302 	bic.w	r3, r3, #2
 8000b20:	f043 0202 	orr.w	r2, r3, #2
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	7b1b      	ldrb	r3, [r3, #12]
 8000b36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b48:	d003      	beq.n	8000b52 <HAL_ADC_Init+0xa2>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d102      	bne.n	8000b58 <HAL_ADC_Init+0xa8>
 8000b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b56:	e000      	b.n	8000b5a <HAL_ADC_Init+0xaa>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	7d1b      	ldrb	r3, [r3, #20]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d119      	bne.n	8000b9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7b1b      	ldrb	r3, [r3, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d109      	bne.n	8000b84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	035a      	lsls	r2, r3, #13
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	e00b      	b.n	8000b9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	f043 0220 	orr.w	r2, r3, #32
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b94:	f043 0201 	orr.w	r2, r3, #1
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <HAL_ADC_Init+0x1a8>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	6812      	ldr	r2, [r2, #0]
 8000bbe:	68b9      	ldr	r1, [r7, #8]
 8000bc0:	430b      	orrs	r3, r1
 8000bc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bcc:	d003      	beq.n	8000bd6 <HAL_ADC_Init+0x126>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d104      	bne.n	8000be0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	051b      	lsls	r3, r3, #20
 8000bde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_ADC_Init+0x1ac>)
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d10b      	bne.n	8000c1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0e:	f023 0303 	bic.w	r3, r3, #3
 8000c12:	f043 0201 	orr.w	r2, r3, #1
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c1a:	e018      	b.n	8000c4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f023 0312 	bic.w	r3, r3, #18
 8000c24:	f043 0210 	orr.w	r2, r3, #16
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	f043 0201 	orr.w	r2, r3, #1
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c3c:	e007      	b.n	8000c4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c42:	f043 0210 	orr.w	r2, r3, #16
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	ffe1f7fd 	.word	0xffe1f7fd
 8000c5c:	ff1f0efe 	.word	0xff1f0efe

08000c60 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a64      	ldr	r2, [pc, #400]	; (8000e08 <HAL_ADC_Start_DMA+0x1a8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d004      	beq.n	8000c84 <HAL_ADC_Start_DMA+0x24>
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a63      	ldr	r2, [pc, #396]	; (8000e0c <HAL_ADC_Start_DMA+0x1ac>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d106      	bne.n	8000c92 <HAL_ADC_Start_DMA+0x32>
 8000c84:	4b60      	ldr	r3, [pc, #384]	; (8000e08 <HAL_ADC_Start_DMA+0x1a8>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f040 80b3 	bne.w	8000df8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d101      	bne.n	8000ca0 <HAL_ADC_Start_DMA+0x40>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e0ae      	b.n	8000dfe <HAL_ADC_Start_DMA+0x19e>
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f000 facd 	bl	8001248 <ADC_Enable>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f040 809a 	bne.w	8000dee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cc2:	f023 0301 	bic.w	r3, r3, #1
 8000cc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a4e      	ldr	r2, [pc, #312]	; (8000e0c <HAL_ADC_Start_DMA+0x1ac>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d105      	bne.n	8000ce4 <HAL_ADC_Start_DMA+0x84>
 8000cd8:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <HAL_ADC_Start_DMA+0x1a8>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d115      	bne.n	8000d10 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d026      	beq.n	8000d4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d0e:	e01d      	b.n	8000d4c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a39      	ldr	r2, [pc, #228]	; (8000e08 <HAL_ADC_Start_DMA+0x1a8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d004      	beq.n	8000d30 <HAL_ADC_Start_DMA+0xd0>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a38      	ldr	r2, [pc, #224]	; (8000e0c <HAL_ADC_Start_DMA+0x1ac>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d10d      	bne.n	8000d4c <HAL_ADC_Start_DMA+0xec>
 8000d30:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <HAL_ADC_Start_DMA+0x1a8>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d007      	beq.n	8000d4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	f023 0206 	bic.w	r2, r3, #6
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d64:	e002      	b.n	8000d6c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <HAL_ADC_Start_DMA+0x1b0>)
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <HAL_ADC_Start_DMA+0x1b4>)
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	4a23      	ldr	r2, [pc, #140]	; (8000e18 <HAL_ADC_Start_DMA+0x1b8>)
 8000d8a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f06f 0202 	mvn.w	r2, #2
 8000d94:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000da4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6a18      	ldr	r0, [r3, #32]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	334c      	adds	r3, #76	; 0x4c
 8000db0:	4619      	mov	r1, r3
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f000 fd69 	bl	800188c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dc4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dc8:	d108      	bne.n	8000ddc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000dd8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000dda:	e00f      	b.n	8000dfc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000dea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000dec:	e006      	b.n	8000dfc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000df6:	e001      	b.n	8000dfc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40012400 	.word	0x40012400
 8000e0c:	40012800 	.word	0x40012800
 8000e10:	0800137f 	.word	0x0800137f
 8000e14:	080013fb 	.word	0x080013fb
 8000e18:	08001417 	.word	0x08001417

08000e1c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d101      	bne.n	8000e36 <HAL_ADC_Stop_DMA+0x1a>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e03a      	b.n	8000eac <HAL_ADC_Stop_DMA+0x90>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f000 fa5c 	bl	80012fc <ADC_ConversionStop_Disable>
 8000e44:	4603      	mov	r3, r0
 8000e46:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d129      	bne.n	8000ea2 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e5c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d11a      	bne.n	8000ea2 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fd6b 	bl	800194c <HAL_DMA_Abort>
 8000e76:	4603      	mov	r3, r0
 8000e78:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10a      	bne.n	8000e96 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	f043 0201 	orr.w	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
 8000e94:	e005      	b.n	8000ea2 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	f003 0320 	and.w	r3, r3, #32
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d03e      	beq.n	8000f54 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d039      	beq.n	8000f54 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee4:	f003 0310 	and.w	r3, r3, #16
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d105      	bne.n	8000ef8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f06:	d11d      	bne.n	8000f44 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d119      	bne.n	8000f44 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0220 	bic.w	r2, r2, #32
 8000f1e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d105      	bne.n	8000f44 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	f043 0201 	orr.w	r2, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff f94b 	bl	80001e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f06f 0212 	mvn.w	r2, #18
 8000f52:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d04d      	beq.n	8000ffa <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d048      	beq.n	8000ffa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6c:	f003 0310 	and.w	r3, r3, #16
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d105      	bne.n	8000f80 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000f8a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000f8e:	d012      	beq.n	8000fb6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d125      	bne.n	8000fea <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000fa8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fac:	d11d      	bne.n	8000fea <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d119      	bne.n	8000fea <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d105      	bne.n	8000fea <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fadc 	bl	80015a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f06f 020c 	mvn.w	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001000:	2b00      	cmp	r3, #0
 8001002:	d012      	beq.n	800102a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00d      	beq.n	800102a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f809 	bl	8001032 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f06f 0201 	mvn.w	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr

08001044 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
	...

08001058 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001070:	2b01      	cmp	r3, #1
 8001072:	d101      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x20>
 8001074:	2302      	movs	r3, #2
 8001076:	e0dc      	b.n	8001232 <HAL_ADC_ConfigChannel+0x1da>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b06      	cmp	r3, #6
 8001086:	d81c      	bhi.n	80010c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	3b05      	subs	r3, #5
 800109a:	221f      	movs	r2, #31
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	4019      	ands	r1, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6818      	ldr	r0, [r3, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	3b05      	subs	r3, #5
 80010b4:	fa00 f203 	lsl.w	r2, r0, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	635a      	str	r2, [r3, #52]	; 0x34
 80010c0:	e03c      	b.n	800113c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b0c      	cmp	r3, #12
 80010c8:	d81c      	bhi.n	8001104 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	3b23      	subs	r3, #35	; 0x23
 80010dc:	221f      	movs	r2, #31
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	4019      	ands	r1, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	3b23      	subs	r3, #35	; 0x23
 80010f6:	fa00 f203 	lsl.w	r2, r0, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	631a      	str	r2, [r3, #48]	; 0x30
 8001102:	e01b      	b.n	800113c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	3b41      	subs	r3, #65	; 0x41
 8001116:	221f      	movs	r2, #31
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4019      	ands	r1, r3
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	3b41      	subs	r3, #65	; 0x41
 8001130:	fa00 f203 	lsl.w	r2, r0, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b09      	cmp	r3, #9
 8001142:	d91c      	bls.n	800117e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68d9      	ldr	r1, [r3, #12]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4613      	mov	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	3b1e      	subs	r3, #30
 8001156:	2207      	movs	r2, #7
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	4019      	ands	r1, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6898      	ldr	r0, [r3, #8]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	3b1e      	subs	r3, #30
 8001170:	fa00 f203 	lsl.w	r2, r0, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	e019      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6919      	ldr	r1, [r3, #16]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	2207      	movs	r2, #7
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	4019      	ands	r1, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6898      	ldr	r0, [r3, #8]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	fa00 f203 	lsl.w	r2, r0, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b10      	cmp	r3, #16
 80011b8:	d003      	beq.n	80011c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011be:	2b11      	cmp	r3, #17
 80011c0:	d132      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_ADC_ConfigChannel+0x1e4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d125      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d126      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d11a      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_ADC_ConfigChannel+0x1e8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a13      	ldr	r2, [pc, #76]	; (8001244 <HAL_ADC_ConfigChannel+0x1ec>)
 80011f8:	fba2 2303 	umull	r2, r3, r2, r3
 80011fc:	0c9a      	lsrs	r2, r3, #18
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001208:	e002      	b.n	8001210 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	3b01      	subs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f9      	bne.n	800120a <HAL_ADC_ConfigChannel+0x1b2>
 8001216:	e007      	b.n	8001228 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	f043 0220 	orr.w	r2, r3, #32
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40012400 	.word	0x40012400
 8001240:	20000004 	.word	0x20000004
 8001244:	431bde83 	.word	0x431bde83

08001248 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b01      	cmp	r3, #1
 8001264:	d040      	beq.n	80012e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f042 0201 	orr.w	r2, r2, #1
 8001274:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001276:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <ADC_Enable+0xac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <ADC_Enable+0xb0>)
 800127c:	fba2 2303 	umull	r2, r3, r2, r3
 8001280:	0c9b      	lsrs	r3, r3, #18
 8001282:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001284:	e002      	b.n	800128c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	3b01      	subs	r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f9      	bne.n	8001286 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001292:	f7ff fbdf 	bl	8000a54 <HAL_GetTick>
 8001296:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001298:	e01f      	b.n	80012da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800129a:	f7ff fbdb 	bl	8000a54 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d918      	bls.n	80012da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d011      	beq.n	80012da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	f043 0210 	orr.w	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e007      	b.n	80012ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d1d8      	bne.n	800129a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000004 	.word	0x20000004
 80012f8:	431bde83 	.word	0x431bde83

080012fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b01      	cmp	r3, #1
 8001314:	d12e      	bne.n	8001374 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0201 	bic.w	r2, r2, #1
 8001324:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001326:	f7ff fb95 	bl	8000a54 <HAL_GetTick>
 800132a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800132c:	e01b      	b.n	8001366 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800132e:	f7ff fb91 	bl	8000a54 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d914      	bls.n	8001366 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b01      	cmp	r3, #1
 8001348:	d10d      	bne.n	8001366 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f043 0210 	orr.w	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	f043 0201 	orr.w	r2, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e007      	b.n	8001376 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b01      	cmp	r3, #1
 8001372:	d0dc      	beq.n	800132e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001394:	2b00      	cmp	r3, #0
 8001396:	d127      	bne.n	80013e8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013b2:	d115      	bne.n	80013e0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d111      	bne.n	80013e0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d105      	bne.n	80013e0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7fe fefd 	bl	80001e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80013e6:	e004      	b.n	80013f2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7fe fecf 	bl	80001ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001428:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	f043 0204 	orr.w	r2, r3, #4
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff fe01 	bl	8001044 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001462:	2b01      	cmp	r3, #1
 8001464:	d101      	bne.n	800146a <HAL_ADCEx_Calibration_Start+0x1e>
 8001466:	2302      	movs	r3, #2
 8001468:	e097      	b.n	800159a <HAL_ADCEx_Calibration_Start+0x14e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff42 	bl	80012fc <ADC_ConversionStop_Disable>
 8001478:	4603      	mov	r3, r0
 800147a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fee3 	bl	8001248 <ADC_Enable>
 8001482:	4603      	mov	r3, r0
 8001484:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f040 8081 	bne.w	8001590 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001496:	f023 0302 	bic.w	r3, r3, #2
 800149a:	f043 0202 	orr.w	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80014a2:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <HAL_ADCEx_Calibration_Start+0x158>)
 80014a4:	681c      	ldr	r4, [r3, #0]
 80014a6:	2002      	movs	r0, #2
 80014a8:	f001 fa26 	bl	80028f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80014ac:	4603      	mov	r3, r0
 80014ae:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80014b2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80014b4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80014b6:	e002      	b.n	80014be <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f9      	bne.n	80014b8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0208 	orr.w	r2, r2, #8
 80014d2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014d4:	f7ff fabe 	bl	8000a54 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014da:	e01b      	b.n	8001514 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014dc:	f7ff faba 	bl	8000a54 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b0a      	cmp	r3, #10
 80014e8:	d914      	bls.n	8001514 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00d      	beq.n	8001514 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	f023 0312 	bic.w	r3, r3, #18
 8001500:	f043 0210 	orr.w	r2, r3, #16
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e042      	b.n	800159a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1dc      	bne.n	80014dc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 0204 	orr.w	r2, r2, #4
 8001530:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001532:	f7ff fa8f 	bl	8000a54 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001538:	e01b      	b.n	8001572 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800153a:	f7ff fa8b 	bl	8000a54 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b0a      	cmp	r3, #10
 8001546:	d914      	bls.n	8001572 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00d      	beq.n	8001572 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	f023 0312 	bic.w	r3, r3, #18
 800155e:	f043 0210 	orr.w	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e013      	b.n	800159a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1dc      	bne.n	800153a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	f023 0303 	bic.w	r3, r3, #3
 8001588:	f043 0201 	orr.w	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001598:	7dfb      	ldrb	r3, [r7, #23]
}
 800159a:	4618      	mov	r0, r3
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
	...

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4906      	ldr	r1, [pc, #24]	; (8001654 <__NVIC_EnableIRQ+0x34>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff90 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff2d 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff42 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff35 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e043      	b.n	8001876 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_DMA_Init+0xa8>)
 80017f6:	4413      	add	r3, r2
 80017f8:	4a22      	ldr	r2, [pc, #136]	; (8001884 <HAL_DMA_Init+0xac>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	009a      	lsls	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <HAL_DMA_Init+0xb0>)
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001822:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001826:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	bffdfff8 	.word	0xbffdfff8
 8001884:	cccccccd 	.word	0xcccccccd
 8001888:	40020000 	.word	0x40020000

0800188c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_DMA_Start_IT+0x20>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e04b      	b.n	8001944 <HAL_DMA_Start_IT+0xb8>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d13a      	bne.n	8001936 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f973 	bl	8001bd0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f042 020e 	orr.w	r2, r2, #14
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e00f      	b.n	8001924 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0204 	bic.w	r2, r2, #4
 8001912:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 020a 	orr.w	r2, r2, #10
 8001922:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e005      	b.n	8001942 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800193e:	2302      	movs	r3, #2
 8001940:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d008      	beq.n	8001976 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2204      	movs	r2, #4
 8001968:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e020      	b.n	80019b8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 020e 	bic.w	r2, r2, #14
 8001984:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199e:	2101      	movs	r1, #1
 80019a0:	fa01 f202 	lsl.w	r2, r1, r2
 80019a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
	...

080019c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	2204      	movs	r2, #4
 80019e2:	409a      	lsls	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d04f      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xc8>
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d04a      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0204 	bic.w	r2, r2, #4
 8001a12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a66      	ldr	r2, [pc, #408]	; (8001bb4 <HAL_DMA_IRQHandler+0x1f0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d029      	beq.n	8001a72 <HAL_DMA_IRQHandler+0xae>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_DMA_IRQHandler+0x1f4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d022      	beq.n	8001a6e <HAL_DMA_IRQHandler+0xaa>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a63      	ldr	r2, [pc, #396]	; (8001bbc <HAL_DMA_IRQHandler+0x1f8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d01a      	beq.n	8001a68 <HAL_DMA_IRQHandler+0xa4>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a62      	ldr	r2, [pc, #392]	; (8001bc0 <HAL_DMA_IRQHandler+0x1fc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d012      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x9e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a60      	ldr	r2, [pc, #384]	; (8001bc4 <HAL_DMA_IRQHandler+0x200>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00a      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x98>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a5f      	ldr	r2, [pc, #380]	; (8001bc8 <HAL_DMA_IRQHandler+0x204>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d102      	bne.n	8001a56 <HAL_DMA_IRQHandler+0x92>
 8001a50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a54:	e00e      	b.n	8001a74 <HAL_DMA_IRQHandler+0xb0>
 8001a56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a5a:	e00b      	b.n	8001a74 <HAL_DMA_IRQHandler+0xb0>
 8001a5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a60:	e008      	b.n	8001a74 <HAL_DMA_IRQHandler+0xb0>
 8001a62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a66:	e005      	b.n	8001a74 <HAL_DMA_IRQHandler+0xb0>
 8001a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6c:	e002      	b.n	8001a74 <HAL_DMA_IRQHandler+0xb0>
 8001a6e:	2340      	movs	r3, #64	; 0x40
 8001a70:	e000      	b.n	8001a74 <HAL_DMA_IRQHandler+0xb0>
 8001a72:	2304      	movs	r3, #4
 8001a74:	4a55      	ldr	r2, [pc, #340]	; (8001bcc <HAL_DMA_IRQHandler+0x208>)
 8001a76:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8094 	beq.w	8001baa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a8a:	e08e      	b.n	8001baa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	2202      	movs	r2, #2
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d056      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x186>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d051      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10b      	bne.n	8001acc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 020a 	bic.w	r2, r2, #10
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <HAL_DMA_IRQHandler+0x1f0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d029      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x166>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a37      	ldr	r2, [pc, #220]	; (8001bb8 <HAL_DMA_IRQHandler+0x1f4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d022      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x162>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a35      	ldr	r2, [pc, #212]	; (8001bbc <HAL_DMA_IRQHandler+0x1f8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01a      	beq.n	8001b20 <HAL_DMA_IRQHandler+0x15c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <HAL_DMA_IRQHandler+0x1fc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d012      	beq.n	8001b1a <HAL_DMA_IRQHandler+0x156>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <HAL_DMA_IRQHandler+0x200>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00a      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x150>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <HAL_DMA_IRQHandler+0x204>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d102      	bne.n	8001b0e <HAL_DMA_IRQHandler+0x14a>
 8001b08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b0c:	e00e      	b.n	8001b2c <HAL_DMA_IRQHandler+0x168>
 8001b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b12:	e00b      	b.n	8001b2c <HAL_DMA_IRQHandler+0x168>
 8001b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b18:	e008      	b.n	8001b2c <HAL_DMA_IRQHandler+0x168>
 8001b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1e:	e005      	b.n	8001b2c <HAL_DMA_IRQHandler+0x168>
 8001b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b24:	e002      	b.n	8001b2c <HAL_DMA_IRQHandler+0x168>
 8001b26:	2320      	movs	r3, #32
 8001b28:	e000      	b.n	8001b2c <HAL_DMA_IRQHandler+0x168>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	4a27      	ldr	r2, [pc, #156]	; (8001bcc <HAL_DMA_IRQHandler+0x208>)
 8001b2e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d034      	beq.n	8001baa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b48:	e02f      	b.n	8001baa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2208      	movs	r2, #8
 8001b50:	409a      	lsls	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d028      	beq.n	8001bac <HAL_DMA_IRQHandler+0x1e8>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d023      	beq.n	8001bac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 020e 	bic.w	r2, r2, #14
 8001b72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d004      	beq.n	8001bac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	4798      	blx	r3
    }
  }
  return;
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
}
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40020008 	.word	0x40020008
 8001bb8:	4002001c 	.word	0x4002001c
 8001bbc:	40020030 	.word	0x40020030
 8001bc0:	40020044 	.word	0x40020044
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	4002006c 	.word	0x4002006c
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be6:	2101      	movs	r1, #1
 8001be8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d108      	bne.n	8001c10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c0e:	e007      	b.n	8001c20 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	60da      	str	r2, [r3, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b08b      	sub	sp, #44	; 0x2c
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3e:	e169      	b.n	8001f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c40:	2201      	movs	r2, #1
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8158 	bne.w	8001f0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a9a      	ldr	r2, [pc, #616]	; (8001ecc <HAL_GPIO_Init+0x2a0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d05e      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c68:	4a98      	ldr	r2, [pc, #608]	; (8001ecc <HAL_GPIO_Init+0x2a0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d875      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c6e:	4a98      	ldr	r2, [pc, #608]	; (8001ed0 <HAL_GPIO_Init+0x2a4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d058      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c74:	4a96      	ldr	r2, [pc, #600]	; (8001ed0 <HAL_GPIO_Init+0x2a4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d86f      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c7a:	4a96      	ldr	r2, [pc, #600]	; (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d052      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c80:	4a94      	ldr	r2, [pc, #592]	; (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d869      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c86:	4a94      	ldr	r2, [pc, #592]	; (8001ed8 <HAL_GPIO_Init+0x2ac>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d04c      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c8c:	4a92      	ldr	r2, [pc, #584]	; (8001ed8 <HAL_GPIO_Init+0x2ac>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d863      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c92:	4a92      	ldr	r2, [pc, #584]	; (8001edc <HAL_GPIO_Init+0x2b0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d046      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c98:	4a90      	ldr	r2, [pc, #576]	; (8001edc <HAL_GPIO_Init+0x2b0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d85d      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d82a      	bhi.n	8001cf8 <HAL_GPIO_Init+0xcc>
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d859      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001ca6:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <HAL_GPIO_Init+0x80>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001d27 	.word	0x08001d27
 8001cb0:	08001d01 	.word	0x08001d01
 8001cb4:	08001d13 	.word	0x08001d13
 8001cb8:	08001d55 	.word	0x08001d55
 8001cbc:	08001d5b 	.word	0x08001d5b
 8001cc0:	08001d5b 	.word	0x08001d5b
 8001cc4:	08001d5b 	.word	0x08001d5b
 8001cc8:	08001d5b 	.word	0x08001d5b
 8001ccc:	08001d5b 	.word	0x08001d5b
 8001cd0:	08001d5b 	.word	0x08001d5b
 8001cd4:	08001d5b 	.word	0x08001d5b
 8001cd8:	08001d5b 	.word	0x08001d5b
 8001cdc:	08001d5b 	.word	0x08001d5b
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d5b 	.word	0x08001d5b
 8001ce8:	08001d5b 	.word	0x08001d5b
 8001cec:	08001d5b 	.word	0x08001d5b
 8001cf0:	08001d09 	.word	0x08001d09
 8001cf4:	08001d1d 	.word	0x08001d1d
 8001cf8:	4a79      	ldr	r2, [pc, #484]	; (8001ee0 <HAL_GPIO_Init+0x2b4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cfe:	e02c      	b.n	8001d5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e029      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e024      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	3308      	adds	r3, #8
 8001d18:	623b      	str	r3, [r7, #32]
          break;
 8001d1a:	e01f      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	330c      	adds	r3, #12
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e01a      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	623b      	str	r3, [r7, #32]
          break;
 8001d32:	e013      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	611a      	str	r2, [r3, #16]
          break;
 8001d46:	e009      	b.n	8001d5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	615a      	str	r2, [r3, #20]
          break;
 8001d52:	e003      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
          break;
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          break;
 8001d5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2bff      	cmp	r3, #255	; 0xff
 8001d60:	d801      	bhi.n	8001d66 <HAL_GPIO_Init+0x13a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	e001      	b.n	8001d6a <HAL_GPIO_Init+0x13e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2bff      	cmp	r3, #255	; 0xff
 8001d70:	d802      	bhi.n	8001d78 <HAL_GPIO_Init+0x14c>
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	e002      	b.n	8001d7e <HAL_GPIO_Init+0x152>
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	3b08      	subs	r3, #8
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	210f      	movs	r1, #15
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80b1 	beq.w	8001f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dac:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a4c      	ldr	r2, [pc, #304]	; (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dc4:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_GPIO_Init+0x2bc>)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a40      	ldr	r2, [pc, #256]	; (8001eec <HAL_GPIO_Init+0x2c0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d013      	beq.n	8001e18 <HAL_GPIO_Init+0x1ec>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3f      	ldr	r2, [pc, #252]	; (8001ef0 <HAL_GPIO_Init+0x2c4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00d      	beq.n	8001e14 <HAL_GPIO_Init+0x1e8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3e      	ldr	r2, [pc, #248]	; (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x1e4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3d      	ldr	r2, [pc, #244]	; (8001ef8 <HAL_GPIO_Init+0x2cc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_GPIO_Init+0x1e0>
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e006      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e004      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e002      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1c:	f002 0203 	and.w	r2, r2, #3
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	4093      	lsls	r3, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e2a:	492f      	ldr	r1, [pc, #188]	; (8001ee8 <HAL_GPIO_Init+0x2bc>)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e44:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	492c      	ldr	r1, [pc, #176]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4928      	ldr	r1, [pc, #160]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	4922      	ldr	r1, [pc, #136]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60cb      	str	r3, [r1, #12]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	491e      	ldr	r1, [pc, #120]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4918      	ldr	r1, [pc, #96]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4914      	ldr	r1, [pc, #80]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d021      	beq.n	8001f00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	490e      	ldr	r1, [pc, #56]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	e021      	b.n	8001f0e <HAL_GPIO_Init+0x2e2>
 8001eca:	bf00      	nop
 8001ecc:	10320000 	.word	0x10320000
 8001ed0:	10310000 	.word	0x10310000
 8001ed4:	10220000 	.word	0x10220000
 8001ed8:	10210000 	.word	0x10210000
 8001edc:	10120000 	.word	0x10120000
 8001ee0:	10110000 	.word	0x10110000
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	40010c00 	.word	0x40010c00
 8001ef4:	40011000 	.word	0x40011000
 8001ef8:	40011400 	.word	0x40011400
 8001efc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4909      	ldr	r1, [pc, #36]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	3301      	adds	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f47f ae8e 	bne.w	8001c40 <HAL_GPIO_Init+0x14>
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	372c      	adds	r7, #44	; 0x2c
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	611a      	str	r2, [r3, #16]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d006      	beq.n	8001f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe f948 	bl	8000218 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e272      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb4:	4b92      	ldr	r3, [pc, #584]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d00c      	beq.n	8001fda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc0:	4b8f      	ldr	r3, [pc, #572]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d112      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5e>
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fda:	4b89      	ldr	r3, [pc, #548]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d06c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x12c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d168      	bne.n	80020c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e24c      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x76>
 8001ffc:	4b80      	ldr	r3, [pc, #512]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a7f      	ldr	r2, [pc, #508]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e02e      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x98>
 8002012:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7a      	ldr	r2, [pc, #488]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b78      	ldr	r3, [pc, #480]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a77      	ldr	r2, [pc, #476]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0xbc>
 8002036:	4b72      	ldr	r3, [pc, #456]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a71      	ldr	r2, [pc, #452]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 8002050:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b68      	ldr	r3, [pc, #416]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a67      	ldr	r2, [pc, #412]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe fcf0 	bl	8000a54 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe fcec 	bl	8000a54 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e200      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xe4>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe fcdc 	bl	8000a54 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a0:	f7fe fcd8 	bl	8000a54 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1ec      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x10c>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d063      	beq.n	8002196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ce:	4b4c      	ldr	r3, [pc, #304]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x18c>
 80020e6:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1c0      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4939      	ldr	r1, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe fc91 	bl	8000a54 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002136:	f7fe fc8d 	bl	8000a54 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1a1      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4927      	ldr	r1, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fc70 	bl	8000a54 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002178:	f7fe fc6c 	bl	8000a54 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e180      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03a      	beq.n	8002218 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d019      	beq.n	80021de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7fe fc50 	bl	8000a54 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b8:	f7fe fc4c 	bl	8000a54 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e160      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f000 faba 	bl	8002750 <RCC_Delay>
 80021dc:	e01c      	b.n	8002218 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7fe fc36 	bl	8000a54 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ea:	e00f      	b.n	800220c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7fe fc32 	bl	8000a54 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d908      	bls.n	800220c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e146      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	42420000 	.word	0x42420000
 8002208:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220c:	4b92      	ldr	r3, [pc, #584]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e9      	bne.n	80021ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a6 	beq.w	8002372 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222a:	4b8b      	ldr	r3, [pc, #556]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10d      	bne.n	8002252 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b88      	ldr	r3, [pc, #544]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a87      	ldr	r2, [pc, #540]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b85      	ldr	r3, [pc, #532]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225e:	4b7f      	ldr	r3, [pc, #508]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a7e      	ldr	r2, [pc, #504]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7fe fbf3 	bl	8000a54 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7fe fbef 	bl	8000a54 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b64      	cmp	r3, #100	; 0x64
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e103      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	4b75      	ldr	r3, [pc, #468]	; (800245c <HAL_RCC_OscConfig+0x4c8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x312>
 8002298:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a6e      	ldr	r2, [pc, #440]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e02d      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x334>
 80022ae:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a69      	ldr	r2, [pc, #420]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	6213      	str	r3, [r2, #32]
 80022c6:	e01c      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d10c      	bne.n	80022ea <HAL_RCC_OscConfig+0x356>
 80022d0:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a60      	ldr	r2, [pc, #384]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4a5d      	ldr	r2, [pc, #372]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6213      	str	r3, [r2, #32]
 80022e8:	e00b      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022ea:	4b5b      	ldr	r3, [pc, #364]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a5a      	ldr	r2, [pc, #360]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	4b58      	ldr	r3, [pc, #352]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a57      	ldr	r2, [pc, #348]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d015      	beq.n	8002336 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7fe fba3 	bl	8000a54 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe fb9f 	bl	8000a54 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e0b1      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	4b4b      	ldr	r3, [pc, #300]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ee      	beq.n	8002312 <HAL_RCC_OscConfig+0x37e>
 8002334:	e014      	b.n	8002360 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7fe fb8d 	bl	8000a54 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe fb89 	bl	8000a54 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e09b      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ee      	bne.n	800233e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002370:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8087 	beq.w	800248a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800237c:	4b36      	ldr	r3, [pc, #216]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d061      	beq.n	800244c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d146      	bne.n	800241e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002390:	4b33      	ldr	r3, [pc, #204]	; (8002460 <HAL_RCC_OscConfig+0x4cc>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe fb5d 	bl	8000a54 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe fb59 	bl	8000a54 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e06d      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d108      	bne.n	80023d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4921      	ldr	r1, [pc, #132]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d8:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a19      	ldr	r1, [r3, #32]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	430b      	orrs	r3, r1
 80023ea:	491b      	ldr	r1, [pc, #108]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x4cc>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7fe fb2d 	bl	8000a54 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fe:	f7fe fb29 	bl	8000a54 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e03d      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x46a>
 800241c:	e035      	b.n	800248a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_RCC_OscConfig+0x4cc>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fb16 	bl	8000a54 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7fe fb12 	bl	8000a54 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e026      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x498>
 800244a:	e01e      	b.n	800248a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e019      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
 8002460:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_OscConfig+0x500>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	429a      	cmp	r2, r3
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000

08002498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0d0      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d910      	bls.n	80024dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b67      	ldr	r3, [pc, #412]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 0207 	bic.w	r2, r3, #7
 80024c2:	4965      	ldr	r1, [pc, #404]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b63      	ldr	r3, [pc, #396]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0b8      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f4:	4b59      	ldr	r3, [pc, #356]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800250c:	4b53      	ldr	r3, [pc, #332]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a52      	ldr	r2, [pc, #328]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002518:	4b50      	ldr	r3, [pc, #320]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	494d      	ldr	r1, [pc, #308]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d040      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d115      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e07f      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e073      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06b      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f023 0203 	bic.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4936      	ldr	r1, [pc, #216]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002588:	f7fe fa64 	bl	8000a54 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002590:	f7fe fa60 	bl	8000a54 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e053      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	4b2d      	ldr	r3, [pc, #180]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 020c 	and.w	r2, r3, #12
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1eb      	bne.n	8002590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d210      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4922      	ldr	r1, [pc, #136]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e032      	b.n	800264e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4916      	ldr	r1, [pc, #88]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	490e      	ldr	r1, [pc, #56]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	4313      	orrs	r3, r2
 8002624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002626:	f000 f821 	bl	800266c <HAL_RCC_GetSysClockFreq>
 800262a:	4602      	mov	r2, r0
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	490a      	ldr	r1, [pc, #40]	; (8002660 <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	5ccb      	ldrb	r3, [r1, r3]
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1cc>)
 8002640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1d0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe f9c2 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40022000 	.word	0x40022000
 800265c:	40021000 	.word	0x40021000
 8002660:	08006b78 	.word	0x08006b78
 8002664:	20000004 	.word	0x20000004
 8002668:	20000008 	.word	0x20000008

0800266c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_RCC_GetSysClockFreq+0x94>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b04      	cmp	r3, #4
 8002694:	d002      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x30>
 8002696:	2b08      	cmp	r3, #8
 8002698:	d003      	beq.n	80026a2 <HAL_RCC_GetSysClockFreq+0x36>
 800269a:	e027      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_RCC_GetSysClockFreq+0x98>)
 800269e:	613b      	str	r3, [r7, #16]
      break;
 80026a0:	e027      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	0c9b      	lsrs	r3, r3, #18
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	4a17      	ldr	r2, [pc, #92]	; (8002708 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d010      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_RCC_GetSysClockFreq+0x94>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	0c5b      	lsrs	r3, r3, #17
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	4a11      	ldr	r2, [pc, #68]	; (800270c <HAL_RCC_GetSysClockFreq+0xa0>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ce:	fb03 f202 	mul.w	r2, r3, r2
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	e004      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026e0:	fb02 f303 	mul.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	613b      	str	r3, [r7, #16]
      break;
 80026ea:	e002      	b.n	80026f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ee:	613b      	str	r3, [r7, #16]
      break;
 80026f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f2:	693b      	ldr	r3, [r7, #16]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	007a1200 	.word	0x007a1200
 8002708:	08006b90 	.word	0x08006b90
 800270c:	08006ba0 	.word	0x08006ba0
 8002710:	003d0900 	.word	0x003d0900

08002714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002718:	4b02      	ldr	r3, [pc, #8]	; (8002724 <HAL_RCC_GetHCLKFreq+0x10>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	20000004 	.word	0x20000004

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800272c:	f7ff fff2 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	0adb      	lsrs	r3, r3, #11
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4903      	ldr	r1, [pc, #12]	; (800274c <HAL_RCC_GetPCLK2Freq+0x24>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	08006b88 	.word	0x08006b88

08002750 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <RCC_Delay+0x34>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <RCC_Delay+0x38>)
 800275e:	fba2 2303 	umull	r2, r3, r2, r3
 8002762:	0a5b      	lsrs	r3, r3, #9
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800276c:	bf00      	nop
  }
  while (Delay --);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1e5a      	subs	r2, r3, #1
 8002772:	60fa      	str	r2, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f9      	bne.n	800276c <RCC_Delay+0x1c>
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	20000004 	.word	0x20000004
 8002788:	10624dd3 	.word	0x10624dd3

0800278c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d07d      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027a8:	2300      	movs	r3, #0
 80027aa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ac:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	4b4c      	ldr	r3, [pc, #304]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	4a4b      	ldr	r2, [pc, #300]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c2:	61d3      	str	r3, [r2, #28]
 80027c4:	4b49      	ldr	r3, [pc, #292]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d0:	2301      	movs	r3, #1
 80027d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d118      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e0:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a42      	ldr	r2, [pc, #264]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ec:	f7fe f932 	bl	8000a54 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	e008      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f4:	f7fe f92e 	bl	8000a54 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	; 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e06d      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002812:	4b36      	ldr	r3, [pc, #216]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d02e      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	429a      	cmp	r2, r3
 800282e:	d027      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002830:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002838:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002840:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002846:	4a29      	ldr	r2, [pc, #164]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d014      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fe f8fd 	bl	8000a54 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285c:	e00a      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe f8f9 	bl	8000a54 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	f241 3288 	movw	r2, #5000	; 0x1388
 800286c:	4293      	cmp	r3, r2
 800286e:	d901      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e036      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ee      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4917      	ldr	r1, [pc, #92]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	4313      	orrs	r3, r2
 8002890:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d105      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	4a13      	ldr	r2, [pc, #76]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	490b      	ldr	r1, [pc, #44]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4904      	ldr	r1, [pc, #16]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
 80028f4:	42420440 	.word	0x42420440

080028f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b10      	cmp	r3, #16
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b10      	cmp	r3, #16
 800291e:	f200 808a 	bhi.w	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d045      	beq.n	80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d075      	beq.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800292e:	e082      	b.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002930:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002936:	4b45      	ldr	r3, [pc, #276]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d07b      	beq.n	8002a3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0c9b      	lsrs	r3, r3, #18
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	4a41      	ldr	r2, [pc, #260]	; (8002a50 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d015      	beq.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800295a:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	0c5b      	lsrs	r3, r3, #17
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	4a3b      	ldr	r2, [pc, #236]	; (8002a54 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00d      	beq.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002974:	4a38      	ldr	r2, [pc, #224]	; (8002a58 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	fbb2 f2f3 	udiv	r2, r2, r3
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	e004      	b.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4a34      	ldr	r2, [pc, #208]	; (8002a5c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800298a:	fb02 f303 	mul.w	r3, r2, r3
 800298e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002990:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299c:	d102      	bne.n	80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	61bb      	str	r3, [r7, #24]
      break;
 80029a2:	e04a      	b.n	8002a3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4a2d      	ldr	r2, [pc, #180]	; (8002a60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]
      break;
 80029b2:	e042      	b.n	8002a3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c4:	d108      	bne.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80029d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	e01f      	b.n	8002a18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e2:	d109      	bne.n	80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80029f0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	e00f      	b.n	8002a18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a02:	d11c      	bne.n	8002a3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d016      	beq.n	8002a3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002a10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a14:	61bb      	str	r3, [r7, #24]
      break;
 8002a16:	e012      	b.n	8002a3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a18:	e011      	b.n	8002a3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a1a:	f7ff fe85 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	0b9b      	lsrs	r3, r3, #14
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	61bb      	str	r3, [r7, #24]
      break;
 8002a34:	e004      	b.n	8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a36:	bf00      	nop
 8002a38:	e002      	b.n	8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e000      	b.n	8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a3e:	bf00      	nop
    }
  }
  return (frequency);
 8002a40:	69bb      	ldr	r3, [r7, #24]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	08006ba4 	.word	0x08006ba4
 8002a54:	08006bb4 	.word	0x08006bb4
 8002a58:	007a1200 	.word	0x007a1200
 8002a5c:	003d0900 	.word	0x003d0900
 8002a60:	aaaaaaab 	.word	0xaaaaaaab

08002a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e076      	b.n	8002b64 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d108      	bne.n	8002a90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a86:	d009      	beq.n	8002a9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
 8002a8e:	e005      	b.n	8002a9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fd fe92 	bl	80007e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	ea42 0103 	orr.w	r1, r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	0c1a      	lsrs	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f002 0204 	and.w	r2, r2, #4
 8002b42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08c      	sub	sp, #48	; 0x30
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_SPI_TransmitReceive+0x26>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e198      	b.n	8002ec4 <HAL_SPI_TransmitReceive+0x358>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b9a:	f7fd ff5b 	bl	8000a54 <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d00f      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x70>
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bc2:	d107      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x68>
 8002bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d003      	beq.n	8002bdc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bda:	e16d      	b.n	8002eb8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d005      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x82>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x82>
 8002be8:	887b      	ldrh	r3, [r7, #2]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bf4:	e160      	b.n	8002eb8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d003      	beq.n	8002c0a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2205      	movs	r2, #5
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	887a      	ldrh	r2, [r7, #2]
 8002c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	887a      	ldrh	r2, [r7, #2]
 8002c32:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b40      	cmp	r3, #64	; 0x40
 8002c4c:	d007      	beq.n	8002c5e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c66:	d17c      	bne.n	8002d62 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_SPI_TransmitReceive+0x10a>
 8002c70:	8b7b      	ldrh	r3, [r7, #26]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d16a      	bne.n	8002d4c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	1c9a      	adds	r2, r3, #2
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c9a:	e057      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x176>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d016      	beq.n	8002ce2 <HAL_SPI_TransmitReceive+0x176>
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d113      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	881a      	ldrh	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	1c9a      	adds	r2, r3, #2
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d119      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x1b8>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d014      	beq.n	8002d24 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	b292      	uxth	r2, r2
 8002d06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	1c9a      	adds	r2, r3, #2
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d20:	2301      	movs	r3, #1
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d24:	f7fd fe96 	bl	8000a54 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d80b      	bhi.n	8002d4c <HAL_SPI_TransmitReceive+0x1e0>
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d007      	beq.n	8002d4c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002d4a:	e0b5      	b.n	8002eb8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1a2      	bne.n	8002c9c <HAL_SPI_TransmitReceive+0x130>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d19d      	bne.n	8002c9c <HAL_SPI_TransmitReceive+0x130>
 8002d60:	e080      	b.n	8002e64 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x204>
 8002d6a:	8b7b      	ldrh	r3, [r7, #26]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d16f      	bne.n	8002e50 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d96:	e05b      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d11c      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x274>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d017      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x274>
 8002db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d114      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	330c      	adds	r3, #12
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d119      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x2b6>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d014      	beq.n	8002e22 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e22:	f7fd fe17 	bl	8000a54 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d803      	bhi.n	8002e3a <HAL_SPI_TransmitReceive+0x2ce>
 8002e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d102      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x2d4>
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d107      	bne.n	8002e50 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002e4e:	e033      	b.n	8002eb8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d19e      	bne.n	8002d98 <HAL_SPI_TransmitReceive+0x22c>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d199      	bne.n	8002d98 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f8b7 	bl	8002fdc <SPI_EndRxTxTransaction>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e80:	e01a      	b.n	8002eb8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	617b      	str	r3, [r7, #20]
 8002e9e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eae:	e003      	b.n	8002eb8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ec0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3730      	adds	r7, #48	; 0x30
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002edc:	f7fd fdba 	bl	8000a54 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002eec:	f7fd fdb2 	bl	8000a54 <HAL_GetTick>
 8002ef0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	015b      	lsls	r3, r3, #5
 8002ef8:	0d1b      	lsrs	r3, r3, #20
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f02:	e054      	b.n	8002fae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d050      	beq.n	8002fae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f0c:	f7fd fda2 	bl	8000a54 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d902      	bls.n	8002f22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d13d      	bne.n	8002f9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f3a:	d111      	bne.n	8002f60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f44:	d004      	beq.n	8002f50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4e:	d107      	bne.n	8002f60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f68:	d10f      	bne.n	8002f8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e017      	b.n	8002fce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d19b      	bne.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000004 	.word	0x20000004

08002fdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff ff6a 	bl	8002ecc <SPI_WaitFlagStateUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e000      	b.n	8003010 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e041      	b.n	80030ae <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fc1a 	bl	8000878 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 f92c 	bl	80032b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <HAL_TIM_OC_Start+0x24>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	e022      	b.n	8003122 <HAL_TIM_OC_Start+0x6a>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d109      	bne.n	80030f6 <HAL_TIM_OC_Start+0x3e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	bf14      	ite	ne
 80030ee:	2301      	movne	r3, #1
 80030f0:	2300      	moveq	r3, #0
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	e015      	b.n	8003122 <HAL_TIM_OC_Start+0x6a>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d109      	bne.n	8003110 <HAL_TIM_OC_Start+0x58>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e008      	b.n	8003122 <HAL_TIM_OC_Start+0x6a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e05e      	b.n	80031e8 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_TIM_OC_Start+0x82>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003138:	e013      	b.n	8003162 <HAL_TIM_OC_Start+0xaa>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d104      	bne.n	800314a <HAL_TIM_OC_Start+0x92>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003148:	e00b      	b.n	8003162 <HAL_TIM_OC_Start+0xaa>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d104      	bne.n	800315a <HAL_TIM_OC_Start+0xa2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003158:	e003      	b.n	8003162 <HAL_TIM_OC_Start+0xaa>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2201      	movs	r2, #1
 8003168:	6839      	ldr	r1, [r7, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fa8c 	bl	8003688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <HAL_TIM_OC_Start+0x138>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d107      	bne.n	800318a <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <HAL_TIM_OC_Start+0x138>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00e      	beq.n	80031b2 <HAL_TIM_OC_Start+0xfa>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d009      	beq.n	80031b2 <HAL_TIM_OC_Start+0xfa>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <HAL_TIM_OC_Start+0x13c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_TIM_OC_Start+0xfa>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <HAL_TIM_OC_Start+0x140>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d111      	bne.n	80031d6 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b06      	cmp	r3, #6
 80031c2:	d010      	beq.n	80031e6 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d4:	e007      	b.n	80031e6 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800

080031fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003216:	2302      	movs	r3, #2
 8003218:	e048      	b.n	80032ac <HAL_TIM_OC_ConfigChannel+0xb0>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d839      	bhi.n	800329c <HAL_TIM_OC_ConfigChannel+0xa0>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <HAL_TIM_OC_ConfigChannel+0x34>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003265 	.word	0x08003265
 8003234:	0800329d 	.word	0x0800329d
 8003238:	0800329d 	.word	0x0800329d
 800323c:	0800329d 	.word	0x0800329d
 8003240:	08003273 	.word	0x08003273
 8003244:	0800329d 	.word	0x0800329d
 8003248:	0800329d 	.word	0x0800329d
 800324c:	0800329d 	.word	0x0800329d
 8003250:	08003281 	.word	0x08003281
 8003254:	0800329d 	.word	0x0800329d
 8003258:	0800329d 	.word	0x0800329d
 800325c:	0800329d 	.word	0x0800329d
 8003260:	0800328f 	.word	0x0800328f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f884 	bl	8003378 <TIM_OC1_SetConfig>
      break;
 8003270:	e017      	b.n	80032a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68b9      	ldr	r1, [r7, #8]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 f8e3 	bl	8003444 <TIM_OC2_SetConfig>
      break;
 800327e:	e010      	b.n	80032a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 f946 	bl	8003518 <TIM_OC3_SetConfig>
      break;
 800328c:	e009      	b.n	80032a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f9a9 	bl	80035ec <TIM_OC4_SetConfig>
      break;
 800329a:	e002      	b.n	80032a2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	75fb      	strb	r3, [r7, #23]
      break;
 80032a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a29      	ldr	r2, [pc, #164]	; (800336c <TIM_Base_SetConfig+0xb8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d007      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a26      	ldr	r2, [pc, #152]	; (8003370 <TIM_Base_SetConfig+0xbc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0x30>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a25      	ldr	r2, [pc, #148]	; (8003374 <TIM_Base_SetConfig+0xc0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d108      	bne.n	80032f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <TIM_Base_SetConfig+0xb8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00b      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d007      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <TIM_Base_SetConfig+0xbc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_Base_SetConfig+0x62>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <TIM_Base_SetConfig+0xc0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d108      	bne.n	8003328 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <TIM_Base_SetConfig+0xb8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d103      	bne.n	800335c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	615a      	str	r2, [r3, #20]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800

08003378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f023 0201 	bic.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 0302 	bic.w	r3, r3, #2
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <TIM_OC1_SetConfig+0xc8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10c      	bne.n	80033ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0308 	bic.w	r3, r3, #8
 80033da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <TIM_OC1_SetConfig+0xc8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d111      	bne.n	800341a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	621a      	str	r2, [r3, #32]
}
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40012c00 	.word	0x40012c00

08003444 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f023 0210 	bic.w	r2, r3, #16
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0320 	bic.w	r3, r3, #32
 800348e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <TIM_OC2_SetConfig+0xd0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d10d      	bne.n	80034c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a14      	ldr	r2, [pc, #80]	; (8003514 <TIM_OC2_SetConfig+0xd0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d113      	bne.n	80034f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr
 8003514:	40012c00 	.word	0x40012c00

08003518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0303 	bic.w	r3, r3, #3
 800354e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <TIM_OC3_SetConfig+0xd0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10d      	bne.n	8003592 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800357c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4313      	orrs	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003590:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <TIM_OC3_SetConfig+0xd0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d113      	bne.n	80035c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	621a      	str	r2, [r3, #32]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40012c00 	.word	0x40012c00

080035ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	031b      	lsls	r3, r3, #12
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0f      	ldr	r2, [pc, #60]	; (8003684 <TIM_OC4_SetConfig+0x98>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d109      	bne.n	8003660 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40012c00 	.word	0x40012c00

08003688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2201      	movs	r2, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1a      	ldr	r2, [r3, #32]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	401a      	ands	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1a      	ldr	r2, [r3, #32]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	431a      	orrs	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e046      	b.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003734:	d009      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a12      	ldr	r2, [pc, #72]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a10      	ldr	r2, [pc, #64]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10c      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	4313      	orrs	r3, r2
 800375a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800

0800378c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003790:	4904      	ldr	r1, [pc, #16]	; (80037a4 <MX_FATFS_Init+0x18>)
 8003792:	4805      	ldr	r0, [pc, #20]	; (80037a8 <MX_FATFS_Init+0x1c>)
 8003794:	f003 f96e 	bl	8006a74 <FATFS_LinkDriver>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <MX_FATFS_Init+0x20>)
 800379e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80037a0:	bf00      	nop
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	200011c4 	.word	0x200011c4
 80037a8:	20000010 	.word	0x20000010
 80037ac:	200011c0 	.word	0x200011c0

080037b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80037b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 f9dc 	bl	8003b88 <USER_SPI_initialize>
 80037d0:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	4603      	mov	r3, r0
 80037e2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 faba 	bl	8003d60 <USER_SPI_status>
 80037ec:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4603      	mov	r3, r0
 8003804:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8003806:	7bf8      	ldrb	r0, [r7, #15]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	f000 fabb 	bl	8003d88 <USER_SPI_read>
 8003812:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4603      	mov	r3, r0
 800382a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 800382c:	7bf8      	ldrb	r0, [r7, #15]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	f000 fb0e 	bl	8003e54 <USER_SPI_write>
 8003838:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	603a      	str	r2, [r7, #0]
 800384c:	71fb      	strb	r3, [r7, #7]
 800384e:	460b      	mov	r3, r1
 8003850:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8003852:	79b9      	ldrb	r1, [r7, #6]
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fb77 	bl	8003f4c <USER_SPI_ioctl>
 800385e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003870:	f7fd f8f0 	bl	8000a54 <HAL_GetTick>
 8003874:	4603      	mov	r3, r0
 8003876:	4a04      	ldr	r2, [pc, #16]	; (8003888 <SPI_Timer_On+0x20>)
 8003878:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800387a:	4a04      	ldr	r2, [pc, #16]	; (800388c <SPI_Timer_On+0x24>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	200011cc 	.word	0x200011cc
 800388c:	200011d0 	.word	0x200011d0

08003890 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003894:	f7fd f8de 	bl	8000a54 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <SPI_Timer_Status+0x24>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	1ad2      	subs	r2, r2, r3
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <SPI_Timer_Status+0x28>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	bf34      	ite	cc
 80038a8:	2301      	movcc	r3, #1
 80038aa:	2300      	movcs	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200011cc 	.word	0x200011cc
 80038b8:	200011d0 	.word	0x200011d0

080038bc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80038c6:	f107 020f 	add.w	r2, r7, #15
 80038ca:	1df9      	adds	r1, r7, #7
 80038cc:	2332      	movs	r3, #50	; 0x32
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2301      	movs	r3, #1
 80038d2:	4804      	ldr	r0, [pc, #16]	; (80038e4 <xchg_spi+0x28>)
 80038d4:	f7ff f94a 	bl	8002b6c <HAL_SPI_TransmitReceive>
    return rxDat;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200000b8 	.word	0x200000b8

080038e8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	e00a      	b.n	800390e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	18d4      	adds	r4, r2, r3
 80038fe:	20ff      	movs	r0, #255	; 0xff
 8003900:	f7ff ffdc 	bl	80038bc <xchg_spi>
 8003904:	4603      	mov	r3, r0
 8003906:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3301      	adds	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d3f0      	bcc.n	80038f8 <rcvr_spi_multi+0x10>
	}
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	bd90      	pop	{r4, r7, pc}

08003920 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	e009      	b.n	8003944 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ffbf 	bl	80038bc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d3f1      	bcc.n	8003930 <xmit_spi_multi+0x10>
	}
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800395e:	f7fd f879 	bl	8000a54 <HAL_GetTick>
 8003962:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003968:	20ff      	movs	r0, #255	; 0xff
 800396a:	f7ff ffa7 	bl	80038bc <xchg_spi>
 800396e:	4603      	mov	r3, r0
 8003970:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2bff      	cmp	r3, #255	; 0xff
 8003976:	d007      	beq.n	8003988 <wait_ready+0x32>
 8003978:	f7fd f86c 	bl	8000a54 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	429a      	cmp	r2, r3
 8003986:	d8ef      	bhi.n	8003968 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2bff      	cmp	r3, #255	; 0xff
 800398c:	bf0c      	ite	eq
 800398e:	2301      	moveq	r3, #1
 8003990:	2300      	movne	r3, #0
 8003992:	b2db      	uxtb	r3, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80039a0:	2201      	movs	r2, #1
 80039a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039a6:	4804      	ldr	r0, [pc, #16]	; (80039b8 <despiselect+0x1c>)
 80039a8:	f7fe fac4 	bl	8001f34 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80039ac:	20ff      	movs	r0, #255	; 0xff
 80039ae:	f7ff ff85 	bl	80038bc <xchg_spi>

}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40010c00 	.word	0x40010c00

080039bc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039c6:	480a      	ldr	r0, [pc, #40]	; (80039f0 <spiselect+0x34>)
 80039c8:	f7fe fab4 	bl	8001f34 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80039cc:	20ff      	movs	r0, #255	; 0xff
 80039ce:	f7ff ff75 	bl	80038bc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80039d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039d6:	f7ff ffbe 	bl	8003956 <wait_ready>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <spiselect+0x28>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e002      	b.n	80039ea <spiselect+0x2e>

	despiselect();
 80039e4:	f7ff ffda 	bl	800399c <despiselect>
	return 0;	/* Timeout */
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40010c00 	.word	0x40010c00

080039f4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80039fe:	20c8      	movs	r0, #200	; 0xc8
 8003a00:	f7ff ff32 	bl	8003868 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003a04:	20ff      	movs	r0, #255	; 0xff
 8003a06:	f7ff ff59 	bl	80038bc <xchg_spi>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2bff      	cmp	r3, #255	; 0xff
 8003a12:	d104      	bne.n	8003a1e <rcvr_datablock+0x2a>
 8003a14:	f7ff ff3c 	bl	8003890 <SPI_Timer_Status>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f2      	bne.n	8003a04 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2bfe      	cmp	r3, #254	; 0xfe
 8003a22:	d001      	beq.n	8003a28 <rcvr_datablock+0x34>
 8003a24:	2300      	movs	r3, #0
 8003a26:	e00a      	b.n	8003a3e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ff5c 	bl	80038e8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003a30:	20ff      	movs	r0, #255	; 0xff
 8003a32:	f7ff ff43 	bl	80038bc <xchg_spi>
 8003a36:	20ff      	movs	r0, #255	; 0xff
 8003a38:	f7ff ff40 	bl	80038bc <xchg_spi>

	return 1;						/* Function succeeded */
 8003a3c:	2301      	movs	r3, #1
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003a52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a56:	f7ff ff7e 	bl	8003956 <wait_ready>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <xmit_datablock+0x1e>
 8003a60:	2300      	movs	r3, #0
 8003a62:	e01e      	b.n	8003aa2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff28 	bl	80038bc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	2bfd      	cmp	r3, #253	; 0xfd
 8003a70:	d016      	beq.n	8003aa0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ff52 	bl	8003920 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003a7c:	20ff      	movs	r0, #255	; 0xff
 8003a7e:	f7ff ff1d 	bl	80038bc <xchg_spi>
 8003a82:	20ff      	movs	r0, #255	; 0xff
 8003a84:	f7ff ff1a 	bl	80038bc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003a88:	20ff      	movs	r0, #255	; 0xff
 8003a8a:	f7ff ff17 	bl	80038bc <xchg_spi>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	d001      	beq.n	8003aa0 <xmit_datablock+0x5a>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e000      	b.n	8003aa2 <xmit_datablock+0x5c>
	}
	return 1;
 8003aa0:	2301      	movs	r3, #1
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	6039      	str	r1, [r7, #0]
 8003ab4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	da0e      	bge.n	8003adc <send_cmd+0x32>
		cmd &= 0x7F;
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	2037      	movs	r0, #55	; 0x37
 8003aca:	f7ff ffee 	bl	8003aaa <send_cmd>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003ad2:	7bbb      	ldrb	r3, [r7, #14]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d901      	bls.n	8003adc <send_cmd+0x32>
 8003ad8:	7bbb      	ldrb	r3, [r7, #14]
 8003ada:	e051      	b.n	8003b80 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d008      	beq.n	8003af4 <send_cmd+0x4a>
		despiselect();
 8003ae2:	f7ff ff5b 	bl	800399c <despiselect>
		if (!spiselect()) return 0xFF;
 8003ae6:	f7ff ff69 	bl	80039bc <spiselect>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <send_cmd+0x4a>
 8003af0:	23ff      	movs	r3, #255	; 0xff
 8003af2:	e045      	b.n	8003b80 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fedd 	bl	80038bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	0e1b      	lsrs	r3, r3, #24
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fed7 	bl	80038bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	0c1b      	lsrs	r3, r3, #16
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fed1 	bl	80038bc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fecb 	bl	80038bc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fec6 	bl	80038bc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <send_cmd+0x94>
 8003b3a:	2395      	movs	r3, #149	; 0x95
 8003b3c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d101      	bne.n	8003b48 <send_cmd+0x9e>
 8003b44:	2387      	movs	r3, #135	; 0x87
 8003b46:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff feb6 	bl	80038bc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d102      	bne.n	8003b5c <send_cmd+0xb2>
 8003b56:	20ff      	movs	r0, #255	; 0xff
 8003b58:	f7ff feb0 	bl	80038bc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003b5c:	230a      	movs	r3, #10
 8003b5e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003b60:	20ff      	movs	r0, #255	; 0xff
 8003b62:	f7ff feab 	bl	80038bc <xchg_spi>
 8003b66:	4603      	mov	r3, r0
 8003b68:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da05      	bge.n	8003b7e <send_cmd+0xd4>
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <USER_SPI_initialize+0x14>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0d6      	b.n	8003d4a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003b9c:	4b6d      	ldr	r3, [pc, #436]	; (8003d54 <USER_SPI_initialize+0x1cc>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <USER_SPI_initialize+0x2a>
 8003baa:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <USER_SPI_initialize+0x1cc>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	e0cb      	b.n	8003d4a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003bb2:	4b69      	ldr	r3, [pc, #420]	; (8003d58 <USER_SPI_initialize+0x1d0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003bbc:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <USER_SPI_initialize+0x1d0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8003bc4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003bc6:	230a      	movs	r3, #10
 8003bc8:	73fb      	strb	r3, [r7, #15]
 8003bca:	e005      	b.n	8003bd8 <USER_SPI_initialize+0x50>
 8003bcc:	20ff      	movs	r0, #255	; 0xff
 8003bce:	f7ff fe75 	bl	80038bc <xchg_spi>
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f6      	bne.n	8003bcc <USER_SPI_initialize+0x44>

	ty = 0;
 8003bde:	2300      	movs	r3, #0
 8003be0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003be2:	2100      	movs	r1, #0
 8003be4:	2000      	movs	r0, #0
 8003be6:	f7ff ff60 	bl	8003aaa <send_cmd>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f040 808b 	bne.w	8003d08 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf6:	f7ff fe37 	bl	8003868 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003bfa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003bfe:	2008      	movs	r0, #8
 8003c00:	f7ff ff53 	bl	8003aaa <send_cmd>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d151      	bne.n	8003cae <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	e00d      	b.n	8003c2c <USER_SPI_initialize+0xa4>
 8003c10:	7bfc      	ldrb	r4, [r7, #15]
 8003c12:	20ff      	movs	r0, #255	; 0xff
 8003c14:	f7ff fe52 	bl	80038bc <xchg_spi>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f104 0310 	add.w	r3, r4, #16
 8003c20:	443b      	add	r3, r7
 8003c22:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d9ee      	bls.n	8003c10 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003c32:	7abb      	ldrb	r3, [r7, #10]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d167      	bne.n	8003d08 <USER_SPI_initialize+0x180>
 8003c38:	7afb      	ldrb	r3, [r7, #11]
 8003c3a:	2baa      	cmp	r3, #170	; 0xaa
 8003c3c:	d164      	bne.n	8003d08 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003c3e:	bf00      	nop
 8003c40:	f7ff fe26 	bl	8003890 <SPI_Timer_Status>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <USER_SPI_initialize+0xd2>
 8003c4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003c4e:	20a9      	movs	r0, #169	; 0xa9
 8003c50:	f7ff ff2b 	bl	8003aaa <send_cmd>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f2      	bne.n	8003c40 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003c5a:	f7ff fe19 	bl	8003890 <SPI_Timer_Status>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d051      	beq.n	8003d08 <USER_SPI_initialize+0x180>
 8003c64:	2100      	movs	r1, #0
 8003c66:	203a      	movs	r0, #58	; 0x3a
 8003c68:	f7ff ff1f 	bl	8003aaa <send_cmd>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d14a      	bne.n	8003d08 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	e00d      	b.n	8003c94 <USER_SPI_initialize+0x10c>
 8003c78:	7bfc      	ldrb	r4, [r7, #15]
 8003c7a:	20ff      	movs	r0, #255	; 0xff
 8003c7c:	f7ff fe1e 	bl	80038bc <xchg_spi>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	f104 0310 	add.w	r3, r4, #16
 8003c88:	443b      	add	r3, r7
 8003c8a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	3301      	adds	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d9ee      	bls.n	8003c78 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003c9a:	7a3b      	ldrb	r3, [r7, #8]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <USER_SPI_initialize+0x120>
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	e000      	b.n	8003caa <USER_SPI_initialize+0x122>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	737b      	strb	r3, [r7, #13]
 8003cac:	e02c      	b.n	8003d08 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003cae:	2100      	movs	r1, #0
 8003cb0:	20a9      	movs	r0, #169	; 0xa9
 8003cb2:	f7ff fefa 	bl	8003aaa <send_cmd>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d804      	bhi.n	8003cc6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	737b      	strb	r3, [r7, #13]
 8003cc0:	23a9      	movs	r3, #169	; 0xa9
 8003cc2:	73bb      	strb	r3, [r7, #14]
 8003cc4:	e003      	b.n	8003cce <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	737b      	strb	r3, [r7, #13]
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003cce:	bf00      	nop
 8003cd0:	f7ff fdde 	bl	8003890 <SPI_Timer_Status>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <USER_SPI_initialize+0x162>
 8003cda:	7bbb      	ldrb	r3, [r7, #14]
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fee3 	bl	8003aaa <send_cmd>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f2      	bne.n	8003cd0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003cea:	f7ff fdd1 	bl	8003890 <SPI_Timer_Status>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <USER_SPI_initialize+0x17c>
 8003cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cf8:	2010      	movs	r0, #16
 8003cfa:	f7ff fed6 	bl	8003aaa <send_cmd>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <USER_SPI_initialize+0x180>
				ty = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003d08:	4a14      	ldr	r2, [pc, #80]	; (8003d5c <USER_SPI_initialize+0x1d4>)
 8003d0a:	7b7b      	ldrb	r3, [r7, #13]
 8003d0c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003d0e:	f7ff fe45 	bl	800399c <despiselect>

	if (ty) {			/* OK */
 8003d12:	7b7b      	ldrb	r3, [r7, #13]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d012      	beq.n	8003d3e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <USER_SPI_initialize+0x1d0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d22:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <USER_SPI_initialize+0x1d0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0210 	orr.w	r2, r2, #16
 8003d2a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <USER_SPI_initialize+0x1cc>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f023 0301 	bic.w	r3, r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <USER_SPI_initialize+0x1cc>)
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e002      	b.n	8003d44 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <USER_SPI_initialize+0x1cc>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <USER_SPI_initialize+0x1cc>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	b2db      	uxtb	r3, r3
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd90      	pop	{r4, r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000024 	.word	0x20000024
 8003d58:	200000b8 	.word	0x200000b8
 8003d5c:	200011c8 	.word	0x200011c8

08003d60 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <USER_SPI_status+0x14>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e002      	b.n	8003d7a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <USER_SPI_status+0x24>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b2db      	uxtb	r3, r3
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr
 8003d84:	20000024 	.word	0x20000024

08003d88 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	4603      	mov	r3, r0
 8003d96:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <USER_SPI_read+0x1c>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <USER_SPI_read+0x20>
 8003da4:	2304      	movs	r3, #4
 8003da6:	e04d      	b.n	8003e44 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003da8:	4b28      	ldr	r3, [pc, #160]	; (8003e4c <USER_SPI_read+0xc4>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <USER_SPI_read+0x32>
 8003db6:	2303      	movs	r3, #3
 8003db8:	e044      	b.n	8003e44 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003dba:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <USER_SPI_read+0xc8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <USER_SPI_read+0x44>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	025b      	lsls	r3, r3, #9
 8003dca:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d111      	bne.n	8003df6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	2011      	movs	r0, #17
 8003dd6:	f7ff fe68 	bl	8003aaa <send_cmd>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d129      	bne.n	8003e34 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003de4:	68b8      	ldr	r0, [r7, #8]
 8003de6:	f7ff fe05 	bl	80039f4 <rcvr_datablock>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d021      	beq.n	8003e34 <USER_SPI_read+0xac>
			count = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	e01e      	b.n	8003e34 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	2012      	movs	r0, #18
 8003dfa:	f7ff fe56 	bl	8003aaa <send_cmd>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d117      	bne.n	8003e34 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e08:	68b8      	ldr	r0, [r7, #8]
 8003e0a:	f7ff fdf3 	bl	80039f4 <rcvr_datablock>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <USER_SPI_read+0xa2>
				buff += 512;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003e1a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ed      	bne.n	8003e04 <USER_SPI_read+0x7c>
 8003e28:	e000      	b.n	8003e2c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003e2a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	200c      	movs	r0, #12
 8003e30:	f7ff fe3b 	bl	8003aaa <send_cmd>
		}
	}
	despiselect();
 8003e34:	f7ff fdb2 	bl	800399c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf14      	ite	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	2300      	moveq	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000024 	.word	0x20000024
 8003e50:	200011c8 	.word	0x200011c8

08003e54 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4603      	mov	r3, r0
 8003e62:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <USER_SPI_write+0x1c>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <USER_SPI_write+0x20>
 8003e70:	2304      	movs	r3, #4
 8003e72:	e063      	b.n	8003f3c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003e74:	4b33      	ldr	r3, [pc, #204]	; (8003f44 <USER_SPI_write+0xf0>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <USER_SPI_write+0x32>
 8003e82:	2303      	movs	r3, #3
 8003e84:	e05a      	b.n	8003f3c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <USER_SPI_write+0xf0>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <USER_SPI_write+0x44>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e051      	b.n	8003f3c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003e98:	4b2b      	ldr	r3, [pc, #172]	; (8003f48 <USER_SPI_write+0xf4>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <USER_SPI_write+0x56>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d110      	bne.n	8003ed2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	2018      	movs	r0, #24
 8003eb4:	f7ff fdf9 	bl	8003aaa <send_cmd>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d136      	bne.n	8003f2c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003ebe:	21fe      	movs	r1, #254	; 0xfe
 8003ec0:	68b8      	ldr	r0, [r7, #8]
 8003ec2:	f7ff fdc0 	bl	8003a46 <xmit_datablock>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d02f      	beq.n	8003f2c <USER_SPI_write+0xd8>
			count = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	e02c      	b.n	8003f2c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <USER_SPI_write+0xf4>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	f003 0306 	and.w	r3, r3, #6
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <USER_SPI_write+0x92>
 8003ede:	6839      	ldr	r1, [r7, #0]
 8003ee0:	2097      	movs	r0, #151	; 0x97
 8003ee2:	f7ff fde2 	bl	8003aaa <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	2019      	movs	r0, #25
 8003eea:	f7ff fdde 	bl	8003aaa <send_cmd>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d11b      	bne.n	8003f2c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003ef4:	21fc      	movs	r1, #252	; 0xfc
 8003ef6:	68b8      	ldr	r0, [r7, #8]
 8003ef8:	f7ff fda5 	bl	8003a46 <xmit_datablock>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <USER_SPI_write+0xc4>
				buff += 512;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003f08:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ee      	bne.n	8003ef4 <USER_SPI_write+0xa0>
 8003f16:	e000      	b.n	8003f1a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f18:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003f1a:	21fd      	movs	r1, #253	; 0xfd
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7ff fd92 	bl	8003a46 <xmit_datablock>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <USER_SPI_write+0xd8>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003f2c:	f7ff fd36 	bl	800399c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000024 	.word	0x20000024
 8003f48:	200011c8 	.word	0x200011c8

08003f4c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	; 0x30
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	603a      	str	r2, [r7, #0]
 8003f56:	71fb      	strb	r3, [r7, #7]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <USER_SPI_ioctl+0x1a>
 8003f62:	2304      	movs	r3, #4
 8003f64:	e15a      	b.n	800421c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003f66:	4baf      	ldr	r3, [pc, #700]	; (8004224 <USER_SPI_ioctl+0x2d8>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <USER_SPI_ioctl+0x2c>
 8003f74:	2303      	movs	r3, #3
 8003f76:	e151      	b.n	800421c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003f7e:	79bb      	ldrb	r3, [r7, #6]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	f200 8136 	bhi.w	80041f2 <USER_SPI_ioctl+0x2a6>
 8003f86:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <USER_SPI_ioctl+0x40>)
 8003f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8c:	08003fa1 	.word	0x08003fa1
 8003f90:	08003fb5 	.word	0x08003fb5
 8003f94:	080041f3 	.word	0x080041f3
 8003f98:	08004061 	.word	0x08004061
 8003f9c:	08004157 	.word	0x08004157
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003fa0:	f7ff fd0c 	bl	80039bc <spiselect>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8127 	beq.w	80041fa <USER_SPI_ioctl+0x2ae>
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003fb2:	e122      	b.n	80041fa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	2009      	movs	r0, #9
 8003fb8:	f7ff fd77 	bl	8003aaa <send_cmd>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f040 811d 	bne.w	80041fe <USER_SPI_ioctl+0x2b2>
 8003fc4:	f107 030c 	add.w	r3, r7, #12
 8003fc8:	2110      	movs	r1, #16
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fd12 	bl	80039f4 <rcvr_datablock>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8113 	beq.w	80041fe <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003fd8:	7b3b      	ldrb	r3, [r7, #12]
 8003fda:	099b      	lsrs	r3, r3, #6
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d111      	bne.n	8004006 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003fe2:	7d7b      	ldrb	r3, [r7, #21]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	7d3b      	ldrb	r3, [r7, #20]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	4413      	add	r3, r2
 8003fec:	461a      	mov	r2, r3
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	029a      	lsls	r2, r3, #10
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e028      	b.n	8004058 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004006:	7c7b      	ldrb	r3, [r7, #17]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	b2da      	uxtb	r2, r3
 800400e:	7dbb      	ldrb	r3, [r7, #22]
 8004010:	09db      	lsrs	r3, r3, #7
 8004012:	b2db      	uxtb	r3, r3
 8004014:	4413      	add	r3, r2
 8004016:	b2da      	uxtb	r2, r3
 8004018:	7d7b      	ldrb	r3, [r7, #21]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f003 0306 	and.w	r3, r3, #6
 8004022:	b2db      	uxtb	r3, r3
 8004024:	4413      	add	r3, r2
 8004026:	b2db      	uxtb	r3, r3
 8004028:	3302      	adds	r3, #2
 800402a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800402e:	7d3b      	ldrb	r3, [r7, #20]
 8004030:	099b      	lsrs	r3, r3, #6
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	441a      	add	r2, r3
 800403c:	7cbb      	ldrb	r3, [r7, #18]
 800403e:	029b      	lsls	r3, r3, #10
 8004040:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004044:	4413      	add	r3, r2
 8004046:	3301      	adds	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800404a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800404e:	3b09      	subs	r3, #9
 8004050:	69fa      	ldr	r2, [r7, #28]
 8004052:	409a      	lsls	r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800405e:	e0ce      	b.n	80041fe <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8004060:	4b71      	ldr	r3, [pc, #452]	; (8004228 <USER_SPI_ioctl+0x2dc>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d031      	beq.n	80040d0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800406c:	2100      	movs	r1, #0
 800406e:	208d      	movs	r0, #141	; 0x8d
 8004070:	f7ff fd1b 	bl	8003aaa <send_cmd>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	f040 80c3 	bne.w	8004202 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800407c:	20ff      	movs	r0, #255	; 0xff
 800407e:	f7ff fc1d 	bl	80038bc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8004082:	f107 030c 	add.w	r3, r7, #12
 8004086:	2110      	movs	r1, #16
 8004088:	4618      	mov	r0, r3
 800408a:	f7ff fcb3 	bl	80039f4 <rcvr_datablock>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80b6 	beq.w	8004202 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004096:	2330      	movs	r3, #48	; 0x30
 8004098:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800409c:	e007      	b.n	80040ae <USER_SPI_ioctl+0x162>
 800409e:	20ff      	movs	r0, #255	; 0xff
 80040a0:	f7ff fc0c 	bl	80038bc <xchg_spi>
 80040a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040a8:	3b01      	subs	r3, #1
 80040aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80040ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f3      	bne.n	800409e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80040b6:	7dbb      	ldrb	r3, [r7, #22]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	2310      	movs	r3, #16
 80040c0:	fa03 f202 	lsl.w	r2, r3, r2
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80040ce:	e098      	b.n	8004202 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80040d0:	2100      	movs	r1, #0
 80040d2:	2009      	movs	r0, #9
 80040d4:	f7ff fce9 	bl	8003aaa <send_cmd>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f040 8091 	bne.w	8004202 <USER_SPI_ioctl+0x2b6>
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	2110      	movs	r1, #16
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fc84 	bl	80039f4 <rcvr_datablock>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8087 	beq.w	8004202 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80040f4:	4b4c      	ldr	r3, [pc, #304]	; (8004228 <USER_SPI_ioctl+0x2dc>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d012      	beq.n	8004126 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004100:	7dbb      	ldrb	r3, [r7, #22]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004108:	7dfa      	ldrb	r2, [r7, #23]
 800410a:	09d2      	lsrs	r2, r2, #7
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	4413      	add	r3, r2
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	7e7b      	ldrb	r3, [r7, #25]
 8004114:	099b      	lsrs	r3, r3, #6
 8004116:	b2db      	uxtb	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	461a      	mov	r2, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e013      	b.n	800414e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004126:	7dbb      	ldrb	r3, [r7, #22]
 8004128:	109b      	asrs	r3, r3, #2
 800412a:	b29b      	uxth	r3, r3
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	3301      	adds	r3, #1
 8004132:	7dfa      	ldrb	r2, [r7, #23]
 8004134:	00d2      	lsls	r2, r2, #3
 8004136:	f002 0218 	and.w	r2, r2, #24
 800413a:	7df9      	ldrb	r1, [r7, #23]
 800413c:	0949      	lsrs	r1, r1, #5
 800413e:	b2c9      	uxtb	r1, r1
 8004140:	440a      	add	r2, r1
 8004142:	3201      	adds	r2, #1
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	461a      	mov	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004154:	e055      	b.n	8004202 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004156:	4b34      	ldr	r3, [pc, #208]	; (8004228 <USER_SPI_ioctl+0x2dc>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	f003 0306 	and.w	r3, r3, #6
 800415e:	2b00      	cmp	r3, #0
 8004160:	d051      	beq.n	8004206 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004162:	f107 020c 	add.w	r2, r7, #12
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	210b      	movs	r1, #11
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff feee 	bl	8003f4c <USER_SPI_ioctl>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d149      	bne.n	800420a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004176:	7b3b      	ldrb	r3, [r7, #12]
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <USER_SPI_ioctl+0x23e>
 8004180:	7dbb      	ldrb	r3, [r7, #22]
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d041      	beq.n	800420e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	623b      	str	r3, [r7, #32]
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800419a:	4b23      	ldr	r3, [pc, #140]	; (8004228 <USER_SPI_ioctl+0x2dc>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d105      	bne.n	80041b2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	025b      	lsls	r3, r3, #9
 80041aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	025b      	lsls	r3, r3, #9
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80041b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b4:	2020      	movs	r0, #32
 80041b6:	f7ff fc78 	bl	8003aaa <send_cmd>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d128      	bne.n	8004212 <USER_SPI_ioctl+0x2c6>
 80041c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c2:	2021      	movs	r0, #33	; 0x21
 80041c4:	f7ff fc71 	bl	8003aaa <send_cmd>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d121      	bne.n	8004212 <USER_SPI_ioctl+0x2c6>
 80041ce:	2100      	movs	r1, #0
 80041d0:	2026      	movs	r0, #38	; 0x26
 80041d2:	f7ff fc6a 	bl	8003aaa <send_cmd>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d11a      	bne.n	8004212 <USER_SPI_ioctl+0x2c6>
 80041dc:	f247 5030 	movw	r0, #30000	; 0x7530
 80041e0:	f7ff fbb9 	bl	8003956 <wait_ready>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d013      	beq.n	8004212 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80041f0:	e00f      	b.n	8004212 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80041f2:	2304      	movs	r3, #4
 80041f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80041f8:	e00c      	b.n	8004214 <USER_SPI_ioctl+0x2c8>
		break;
 80041fa:	bf00      	nop
 80041fc:	e00a      	b.n	8004214 <USER_SPI_ioctl+0x2c8>
		break;
 80041fe:	bf00      	nop
 8004200:	e008      	b.n	8004214 <USER_SPI_ioctl+0x2c8>
		break;
 8004202:	bf00      	nop
 8004204:	e006      	b.n	8004214 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004206:	bf00      	nop
 8004208:	e004      	b.n	8004214 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800420a:	bf00      	nop
 800420c:	e002      	b.n	8004214 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <USER_SPI_ioctl+0x2c8>
		break;
 8004212:	bf00      	nop
	}

	despiselect();
 8004214:	f7ff fbc2 	bl	800399c <despiselect>

	return res;
 8004218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800421c:	4618      	mov	r0, r3
 800421e:	3730      	adds	r7, #48	; 0x30
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000024 	.word	0x20000024
 8004228:	200011c8 	.word	0x200011c8

0800422c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	4603      	mov	r3, r0
 8004234:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004236:	79fb      	ldrb	r3, [r7, #7]
 8004238:	4a08      	ldr	r2, [pc, #32]	; (800425c <disk_status+0x30>)
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	79fa      	ldrb	r2, [r7, #7]
 8004244:	4905      	ldr	r1, [pc, #20]	; (800425c <disk_status+0x30>)
 8004246:	440a      	add	r2, r1
 8004248:	7a12      	ldrb	r2, [r2, #8]
 800424a:	4610      	mov	r0, r2
 800424c:	4798      	blx	r3
 800424e:	4603      	mov	r3, r0
 8004250:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	200011f4 	.word	0x200011f4

08004260 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	4a0d      	ldr	r2, [pc, #52]	; (80042a8 <disk_initialize+0x48>)
 8004272:	5cd3      	ldrb	r3, [r2, r3]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d111      	bne.n	800429c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	4a0b      	ldr	r2, [pc, #44]	; (80042a8 <disk_initialize+0x48>)
 800427c:	2101      	movs	r1, #1
 800427e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <disk_initialize+0x48>)
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	79fa      	ldrb	r2, [r7, #7]
 800428e:	4906      	ldr	r1, [pc, #24]	; (80042a8 <disk_initialize+0x48>)
 8004290:	440a      	add	r2, r1
 8004292:	7a12      	ldrb	r2, [r2, #8]
 8004294:	4610      	mov	r0, r2
 8004296:	4798      	blx	r3
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	200011f4 	.word	0x200011f4

080042ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <disk_read+0x3c>)
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	689c      	ldr	r4, [r3, #8]
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <disk_read+0x3c>)
 80042cc:	4413      	add	r3, r2
 80042ce:	7a18      	ldrb	r0, [r3, #8]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	47a0      	blx	r4
 80042d8:	4603      	mov	r3, r0
 80042da:	75fb      	strb	r3, [r7, #23]
  return res;
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd90      	pop	{r4, r7, pc}
 80042e6:	bf00      	nop
 80042e8:	200011f4 	.word	0x200011f4

080042ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4603      	mov	r3, r0
 80042fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	4a0a      	ldr	r2, [pc, #40]	; (8004328 <disk_write+0x3c>)
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	68dc      	ldr	r4, [r3, #12]
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	4a07      	ldr	r2, [pc, #28]	; (8004328 <disk_write+0x3c>)
 800430c:	4413      	add	r3, r2
 800430e:	7a18      	ldrb	r0, [r3, #8]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	47a0      	blx	r4
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]
  return res;
 800431c:	7dfb      	ldrb	r3, [r7, #23]
}
 800431e:	4618      	mov	r0, r3
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	bd90      	pop	{r4, r7, pc}
 8004326:	bf00      	nop
 8004328:	200011f4 	.word	0x200011f4

0800432c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	603a      	str	r2, [r7, #0]
 8004336:	71fb      	strb	r3, [r7, #7]
 8004338:	460b      	mov	r3, r1
 800433a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <disk_ioctl+0x38>)
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	79fa      	ldrb	r2, [r7, #7]
 800434a:	4906      	ldr	r1, [pc, #24]	; (8004364 <disk_ioctl+0x38>)
 800434c:	440a      	add	r2, r1
 800434e:	7a10      	ldrb	r0, [r2, #8]
 8004350:	79b9      	ldrb	r1, [r7, #6]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	4798      	blx	r3
 8004356:	4603      	mov	r3, r0
 8004358:	73fb      	strb	r3, [r7, #15]
  return res;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	200011f4 	.word	0x200011f4

08004368 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800437c:	e007      	b.n	800438e <mem_cpy+0x26>
		*d++ = *s++;
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	1c53      	adds	r3, r2, #1
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1c59      	adds	r1, r3, #1
 8004388:	6179      	str	r1, [r7, #20]
 800438a:	7812      	ldrb	r2, [r2, #0]
 800438c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	1e5a      	subs	r2, r3, #1
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f2      	bne.n	800437e <mem_cpy+0x16>
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80043b4:	e005      	b.n	80043c2 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	617a      	str	r2, [r7, #20]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f4      	bne.n	80043b6 <mem_set+0x12>
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80043f0:	bf00      	nop
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	1e5a      	subs	r2, r3, #1
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00d      	beq.n	8004418 <mem_cmp+0x40>
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	61fa      	str	r2, [r7, #28]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	4619      	mov	r1, r3
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	61ba      	str	r2, [r7, #24]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	1acb      	subs	r3, r1, r3
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0ec      	beq.n	80043f2 <mem_cmp+0x1a>
	return r;
 8004418:	697b      	ldr	r3, [r7, #20]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800442e:	e002      	b.n	8004436 <chk_chr+0x12>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3301      	adds	r3, #1
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <chk_chr+0x26>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	4293      	cmp	r3, r2
 8004448:	d1f2      	bne.n	8004430 <chk_chr+0xc>
	return *str;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	781b      	ldrb	r3, [r3, #0]
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e038      	b.n	80044de <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800446c:	492f      	ldr	r1, [pc, #188]	; (800452c <chk_lock+0xd4>)
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d029      	beq.n	80044d4 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004480:	492a      	ldr	r1, [pc, #168]	; (800452c <chk_lock+0xd4>)
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4613      	mov	r3, r2
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004496:	429a      	cmp	r2, r3
 8004498:	d11e      	bne.n	80044d8 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800449a:	4924      	ldr	r1, [pc, #144]	; (800452c <chk_lock+0xd4>)
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4613      	mov	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	3304      	adds	r3, #4
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d110      	bne.n	80044d8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80044b6:	491d      	ldr	r1, [pc, #116]	; (800452c <chk_lock+0xd4>)
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	3308      	adds	r3, #8
 80044c6:	881a      	ldrh	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d102      	bne.n	80044d8 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80044d2:	e007      	b.n	80044e4 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80044d4:	2301      	movs	r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d9c3      	bls.n	800446c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d109      	bne.n	80044fe <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <chk_lock+0x9e>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d101      	bne.n	80044fa <chk_lock+0xa2>
 80044f6:	2300      	movs	r3, #0
 80044f8:	e013      	b.n	8004522 <chk_lock+0xca>
 80044fa:	2312      	movs	r3, #18
 80044fc:	e011      	b.n	8004522 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <chk_lock+0xc4>
 8004504:	4909      	ldr	r1, [pc, #36]	; (800452c <chk_lock+0xd4>)
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	330a      	adds	r3, #10
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800451a:	d101      	bne.n	8004520 <chk_lock+0xc8>
 800451c:	2310      	movs	r3, #16
 800451e:	e000      	b.n	8004522 <chk_lock+0xca>
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr
 800452c:	200011dc 	.word	0x200011dc

08004530 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004536:	2300      	movs	r3, #0
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	e002      	b.n	8004542 <enq_lock+0x12>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3301      	adds	r3, #1
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d809      	bhi.n	800455c <enq_lock+0x2c>
 8004548:	490a      	ldr	r1, [pc, #40]	; (8004574 <enq_lock+0x44>)
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1ef      	bne.n	800453c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	bf14      	ite	ne
 8004562:	2301      	movne	r3, #1
 8004564:	2300      	moveq	r3, #0
 8004566:	b2db      	uxtb	r3, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	200011dc 	.word	0x200011dc

08004578 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e02b      	b.n	80045e0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8004588:	4955      	ldr	r1, [pc, #340]	; (80046e0 <inc_lock+0x168>)
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4613      	mov	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800459e:	429a      	cmp	r2, r3
 80045a0:	d11b      	bne.n	80045da <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80045a2:	494f      	ldr	r1, [pc, #316]	; (80046e0 <inc_lock+0x168>)
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4613      	mov	r3, r2
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	3304      	adds	r3, #4
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d10d      	bne.n	80045da <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80045be:	4948      	ldr	r1, [pc, #288]	; (80046e0 <inc_lock+0x168>)
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4613      	mov	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	3308      	adds	r3, #8
 80045ce:	881a      	ldrh	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d006      	beq.n	80045e8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3301      	adds	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d9d0      	bls.n	8004588 <inc_lock+0x10>
 80045e6:	e000      	b.n	80045ea <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80045e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d145      	bne.n	800467c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e002      	b.n	80045fc <inc_lock+0x84>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d809      	bhi.n	8004616 <inc_lock+0x9e>
 8004602:	4937      	ldr	r1, [pc, #220]	; (80046e0 <inc_lock+0x168>)
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4613      	mov	r3, r2
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1ef      	bne.n	80045f6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d101      	bne.n	8004620 <inc_lock+0xa8>
 800461c:	2300      	movs	r3, #0
 800461e:	e05a      	b.n	80046d6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8004626:	482e      	ldr	r0, [pc, #184]	; (80046e0 <inc_lock+0x168>)
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4613      	mov	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4403      	add	r3, r0
 8004634:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800463c:	4828      	ldr	r0, [pc, #160]	; (80046e0 <inc_lock+0x168>)
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4613      	mov	r3, r2
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4403      	add	r3, r0
 800464a:	3304      	adds	r3, #4
 800464c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8004654:	4922      	ldr	r1, [pc, #136]	; (80046e0 <inc_lock+0x168>)
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4613      	mov	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	3308      	adds	r3, #8
 8004664:	4602      	mov	r2, r0
 8004666:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004668:	491d      	ldr	r1, [pc, #116]	; (80046e0 <inc_lock+0x168>)
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	330a      	adds	r3, #10
 8004678:	2200      	movs	r2, #0
 800467a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <inc_lock+0x124>
 8004682:	4917      	ldr	r1, [pc, #92]	; (80046e0 <inc_lock+0x168>)
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4613      	mov	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	330a      	adds	r3, #10
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <inc_lock+0x124>
 8004698:	2300      	movs	r3, #0
 800469a:	e01c      	b.n	80046d6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10b      	bne.n	80046ba <inc_lock+0x142>
 80046a2:	490f      	ldr	r1, [pc, #60]	; (80046e0 <inc_lock+0x168>)
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	330a      	adds	r3, #10
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	b299      	uxth	r1, r3
 80046b8:	e001      	b.n	80046be <inc_lock+0x146>
 80046ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046be:	4808      	ldr	r0, [pc, #32]	; (80046e0 <inc_lock+0x168>)
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4613      	mov	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4403      	add	r3, r0
 80046cc:	330a      	adds	r3, #10
 80046ce:	460a      	mov	r2, r1
 80046d0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3301      	adds	r3, #1
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	200011dc 	.word	0x200011dc

080046e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d82e      	bhi.n	8004756 <dec_lock+0x72>
		n = Files[i].ctr;
 80046f8:	491b      	ldr	r1, [pc, #108]	; (8004768 <dec_lock+0x84>)
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	330a      	adds	r3, #10
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004712:	d101      	bne.n	8004718 <dec_lock+0x34>
 8004714:	2300      	movs	r3, #0
 8004716:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <dec_lock+0x40>
 800471e:	89fb      	ldrh	r3, [r7, #14]
 8004720:	3b01      	subs	r3, #1
 8004722:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004724:	4910      	ldr	r1, [pc, #64]	; (8004768 <dec_lock+0x84>)
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	330a      	adds	r3, #10
 8004734:	89fa      	ldrh	r2, [r7, #14]
 8004736:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004738:	89fb      	ldrh	r3, [r7, #14]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d108      	bne.n	8004750 <dec_lock+0x6c>
 800473e:	490a      	ldr	r1, [pc, #40]	; (8004768 <dec_lock+0x84>)
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	737b      	strb	r3, [r7, #13]
 8004754:	e001      	b.n	800475a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004756:	2302      	movs	r3, #2
 8004758:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800475a:	7b7b      	ldrb	r3, [r7, #13]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	200011dc 	.word	0x200011dc

0800476c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e016      	b.n	80047a8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800477a:	4910      	ldr	r1, [pc, #64]	; (80047bc <clear_lock+0x50>)
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d108      	bne.n	80047a2 <clear_lock+0x36>
 8004790:	490a      	ldr	r1, [pc, #40]	; (80047bc <clear_lock+0x50>)
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4613      	mov	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3301      	adds	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d9e5      	bls.n	800477a <clear_lock+0xe>
	}
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	200011dc 	.word	0x200011dc

080047c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d038      	beq.n	8004848 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80047dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	2301      	movs	r3, #1
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	f7ff fd7f 	bl	80042ec <disk_write>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <sync_window+0x3a>
			res = FR_DISK_ERR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e026      	b.n	8004848 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004812:	429a      	cmp	r2, r3
 8004814:	d218      	bcs.n	8004848 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	e010      	b.n	8004842 <sync_window+0x82>
					wsect += fs->fsize;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4413      	add	r3, r2
 800482a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	2301      	movs	r3, #1
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	f7ff fd58 	bl	80042ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3b01      	subs	r3, #1
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d8eb      	bhi.n	8004820 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8004848:	7bfb      	ldrb	r3, [r7, #15]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800485c:	2300      	movs	r3, #0
 800485e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d01b      	beq.n	80048a4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff ffa7 	bl	80047c0 <sync_window>
 8004872:	4603      	mov	r3, r0
 8004874:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004876:	7bfb      	ldrb	r3, [r7, #15]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d113      	bne.n	80048a4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8004882:	6879      	ldr	r1, [r7, #4]
 8004884:	2301      	movs	r3, #1
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	f7ff fd10 	bl	80042ac <disk_read>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d004      	beq.n	800489c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004892:	f04f 33ff 	mov.w	r3, #4294967295
 8004896:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ff82 	bl	80047c0 <sync_window>
 80048bc:	4603      	mov	r3, r0
 80048be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f040 809b 	bne.w	80049fe <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	f040 8088 	bne.w	80049e4 <sync_fs+0x136>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80048da:	2b01      	cmp	r3, #1
 80048dc:	f040 8082 	bne.w	80049e4 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fd5b 	bl	80043a4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2255      	movs	r2, #85	; 0x55
 80048f2:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	22aa      	movs	r2, #170	; 0xaa
 80048fa:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2252      	movs	r2, #82	; 0x52
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2252      	movs	r2, #82	; 0x52
 8004908:	705a      	strb	r2, [r3, #1]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2261      	movs	r2, #97	; 0x61
 800490e:	709a      	strb	r2, [r3, #2]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2241      	movs	r2, #65	; 0x41
 8004914:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2272      	movs	r2, #114	; 0x72
 800491a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2272      	movs	r2, #114	; 0x72
 8004922:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2241      	movs	r2, #65	; 0x41
 800492a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2261      	movs	r2, #97	; 0x61
 8004932:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800493c:	b2da      	uxtb	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800494a:	b29b      	uxth	r3, r3
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	b29b      	uxth	r3, r3
 8004950:	b2da      	uxtb	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	b2da      	uxtb	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800496e:	0e1b      	lsrs	r3, r3, #24
 8004970:	b2da      	uxtb	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800497e:	b2da      	uxtb	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800498c:	b29b      	uxth	r3, r3
 800498e:	0a1b      	lsrs	r3, r3, #8
 8004990:	b29b      	uxth	r3, r3
 8004992:	b2da      	uxtb	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80049a0:	0c1b      	lsrs	r3, r3, #16
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80049b0:	0e1b      	lsrs	r3, r3, #24
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80049d6:	2301      	movs	r3, #1
 80049d8:	f7ff fc88 	bl	80042ec <disk_write>
			fs->fsi_flag = 0;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80049ea:	2200      	movs	r2, #0
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff fc9c 	bl	800432c <disk_ioctl>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <sync_fs+0x150>
			res = FR_DISK_ERR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	3b02      	subs	r3, #2
 8004a16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a1e:	3b02      	subs	r3, #2
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d301      	bcc.n	8004a2a <clust2sect+0x22>
 8004a26:	2300      	movs	r3, #0
 8004a28:	e00a      	b.n	8004a40 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8004a30:	461a      	mov	r2, r3
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	fb03 f202 	mul.w	r2, r3, r2
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8004a3e:	4413      	add	r3, r2
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d905      	bls.n	8004a66 <get_fat+0x1c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d302      	bcc.n	8004a6c <get_fat+0x22>
		val = 1;	/* Internal error */
 8004a66:	2301      	movs	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	e0a3      	b.n	8004bb4 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d068      	beq.n	8004b4e <get_fat+0x104>
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	f300 808f 	bgt.w	8004ba0 <get_fat+0x156>
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d002      	beq.n	8004a8c <get_fat+0x42>
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d040      	beq.n	8004b0c <get_fat+0xc2>
 8004a8a:	e089      	b.n	8004ba0 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	0a5b      	lsrs	r3, r3, #9
 8004aa4:	4413      	add	r3, r2
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fed2 	bl	8004852 <move_window>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d178      	bne.n	8004ba6 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	60fa      	str	r2, [r7, #12]
 8004aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	5cd3      	ldrb	r3, [r2, r3]
 8004ac2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	0a5b      	lsrs	r3, r3, #9
 8004ace:	4413      	add	r3, r2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff febd 	bl	8004852 <move_window>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d165      	bne.n	8004baa <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	5cd3      	ldrb	r3, [r2, r3]
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	461a      	mov	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <get_fat+0xb8>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	e002      	b.n	8004b08 <get_fat+0xbe>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b08:	617b      	str	r3, [r7, #20]
			break;
 8004b0a:	e053      	b.n	8004bb4 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	4413      	add	r3, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fe99 	bl	8004852 <move_window>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d143      	bne.n	8004bae <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4413      	add	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	3301      	adds	r3, #1
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	b21a      	sxth	r2, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b21b      	sxth	r3, r3
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b21b      	sxth	r3, r3
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	617b      	str	r3, [r7, #20]
			break;
 8004b4c:	e032      	b.n	8004bb4 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	09db      	lsrs	r3, r3, #7
 8004b58:	4413      	add	r3, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff fe78 	bl	8004852 <move_window>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d124      	bne.n	8004bb2 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	4413      	add	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	3303      	adds	r3, #3
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	061a      	lsls	r2, r3, #24
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3302      	adds	r3, #2
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	041b      	lsls	r3, r3, #16
 8004b86:	4313      	orrs	r3, r2
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	3201      	adds	r2, #1
 8004b8c:	7812      	ldrb	r2, [r2, #0]
 8004b8e:	0212      	lsls	r2, r2, #8
 8004b90:	4313      	orrs	r3, r2
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	7812      	ldrb	r2, [r2, #0]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b9c:	617b      	str	r3, [r7, #20]
			break;
 8004b9e:	e009      	b.n	8004bb4 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e006      	b.n	8004bb4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ba6:	bf00      	nop
 8004ba8:	e004      	b.n	8004bb4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004baa:	bf00      	nop
 8004bac:	e002      	b.n	8004bb4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bae:	bf00      	nop
 8004bb0:	e000      	b.n	8004bb4 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bb2:	bf00      	nop
		}
	}

	return val;
 8004bb4:	697b      	ldr	r3, [r7, #20]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b088      	sub	sp, #32
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d905      	bls.n	8004bdc <put_fat+0x1e>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d302      	bcc.n	8004be2 <put_fat+0x24>
		res = FR_INT_ERR;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	77fb      	strb	r3, [r7, #31]
 8004be0:	e0f6      	b.n	8004dd0 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004be8:	2b03      	cmp	r3, #3
 8004bea:	f000 809e 	beq.w	8004d2a <put_fat+0x16c>
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	f300 80e4 	bgt.w	8004dbc <put_fat+0x1fe>
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d002      	beq.n	8004bfe <put_fat+0x40>
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d06f      	beq.n	8004cdc <put_fat+0x11e>
 8004bfc:	e0de      	b.n	8004dbc <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	0a5b      	lsrs	r3, r3, #9
 8004c16:	4413      	add	r3, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f7ff fe19 	bl	8004852 <move_window>
 8004c20:	4603      	mov	r3, r0
 8004c22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c24:	7ffb      	ldrb	r3, [r7, #31]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f040 80cb 	bne.w	8004dc2 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	617a      	str	r2, [r7, #20]
 8004c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4413      	add	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <put_fat+0xa4>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	b25b      	sxtb	r3, r3
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	b25a      	sxtb	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	b25b      	sxtb	r3, r3
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	b25b      	sxtb	r3, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	e001      	b.n	8004c66 <put_fat+0xa8>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	0a5b      	lsrs	r3, r3, #9
 8004c7c:	4413      	add	r3, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff fde6 	bl	8004852 <move_window>
 8004c86:	4603      	mov	r3, r0
 8004c88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c8a:	7ffb      	ldrb	r3, [r7, #31]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f040 809a 	bne.w	8004dc6 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <put_fat+0xf2>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	091b      	lsrs	r3, r3, #4
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	e00e      	b.n	8004cce <put_fat+0x110>
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	b25b      	sxtb	r3, r3
 8004cb6:	f023 030f 	bic.w	r3, r3, #15
 8004cba:	b25a      	sxtb	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	b25b      	sxtb	r3, r3
 8004cc2:	f003 030f 	and.w	r3, r3, #15
 8004cc6:	b25b      	sxtb	r3, r3
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	b25b      	sxtb	r3, r3
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004cda:	e079      	b.n	8004dd0 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	0a1b      	lsrs	r3, r3, #8
 8004ce6:	4413      	add	r3, r2
 8004ce8:	4619      	mov	r1, r3
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff fdb1 	bl	8004852 <move_window>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cf4:	7ffb      	ldrb	r3, [r7, #31]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d167      	bne.n	8004dca <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4413      	add	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004d28:	e052      	b.n	8004dd0 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	09db      	lsrs	r3, r3, #7
 8004d34:	4413      	add	r3, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7ff fd8a 	bl	8004852 <move_window>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d42:	7ffb      	ldrb	r3, [r7, #31]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d142      	bne.n	8004dce <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3303      	adds	r3, #3
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	061a      	lsls	r2, r3, #24
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	3302      	adds	r3, #2
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	4313      	orrs	r3, r2
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	3201      	adds	r2, #1
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	0212      	lsls	r2, r2, #8
 8004d70:	4313      	orrs	r3, r2
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	7812      	ldrb	r2, [r2, #0]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	0a1b      	lsrs	r3, r3, #8
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	3301      	adds	r3, #1
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	0c1a      	lsrs	r2, r3, #16
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	3302      	adds	r3, #2
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	0e1a      	lsrs	r2, r3, #24
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	3303      	adds	r3, #3
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8004dba:	e009      	b.n	8004dd0 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e006      	b.n	8004dd0 <put_fat+0x212>
			if (res != FR_OK) break;
 8004dc2:	bf00      	nop
 8004dc4:	e004      	b.n	8004dd0 <put_fat+0x212>
			if (res != FR_OK) break;
 8004dc6:	bf00      	nop
 8004dc8:	e002      	b.n	8004dd0 <put_fat+0x212>
			if (res != FR_OK) break;
 8004dca:	bf00      	nop
 8004dcc:	e000      	b.n	8004dd0 <put_fat+0x212>
			if (res != FR_OK) break;
 8004dce:	bf00      	nop
		}
	}

	return res;
 8004dd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d905      	bls.n	8004df6 <remove_chain+0x1c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <remove_chain+0x22>
		res = FR_INT_ERR;
 8004df6:	2302      	movs	r3, #2
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	e043      	b.n	8004e84 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004e00:	e036      	b.n	8004e70 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff fe20 	bl	8004a4a <get_fat>
 8004e0a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d035      	beq.n	8004e7e <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d102      	bne.n	8004e1e <remove_chain+0x44>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	73fb      	strb	r3, [r7, #15]
 8004e1c:	e032      	b.n	8004e84 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d102      	bne.n	8004e2c <remove_chain+0x52>
 8004e26:	2301      	movs	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
 8004e2a:	e02b      	b.n	8004e84 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff fec4 	bl	8004bbe <put_fat>
 8004e36:	4603      	mov	r3, r0
 8004e38:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d120      	bne.n	8004e82 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d00f      	beq.n	8004e6c <remove_chain+0x92>
				fs->free_clust++;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d3c2      	bcc.n	8004e02 <remove_chain+0x28>
 8004e7c:	e002      	b.n	8004e84 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8004e7e:	bf00      	nop
 8004e80:	e000      	b.n	8004e84 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8004e82:	bf00      	nop
		}
	}

	return res;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10f      	bne.n	8004ebe <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8004ea4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <create_chain+0x2a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d31c      	bcc.n	8004ef2 <create_chain+0x64>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	e019      	b.n	8004ef2 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff fdc2 	bl	8004a4a <get_fat>
 8004ec6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d801      	bhi.n	8004ed2 <create_chain+0x44>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e076      	b.n	8004fc0 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d101      	bne.n	8004ede <create_chain+0x50>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	e070      	b.n	8004fc0 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d201      	bcs.n	8004eee <create_chain+0x60>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	e068      	b.n	8004fc0 <create_chain+0x132>
		scl = clst;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d307      	bcc.n	8004f18 <create_chain+0x8a>
			ncl = 2;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d901      	bls.n	8004f18 <create_chain+0x8a>
 8004f14:	2300      	movs	r3, #0
 8004f16:	e053      	b.n	8004fc0 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004f18:	6979      	ldr	r1, [r7, #20]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fd95 	bl	8004a4a <get_fat>
 8004f20:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d002      	beq.n	8004f36 <create_chain+0xa8>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <create_chain+0xac>
			return cs;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	e042      	b.n	8004fc0 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d1d9      	bne.n	8004ef6 <create_chain+0x68>
 8004f42:	2300      	movs	r3, #0
 8004f44:	e03c      	b.n	8004fc0 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8004f46:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004f48:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004f4c:	6979      	ldr	r1, [r7, #20]
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fe35 	bl	8004bbe <put_fat>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <create_chain+0xe4>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d006      	beq.n	8004f72 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fe28 	bl	8004bbe <put_fat>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d11a      	bne.n	8004fae <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d018      	beq.n	8004fbe <create_chain+0x130>
			fs->free_clust--;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f92:	1e5a      	subs	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8004fa0:	f043 0301 	orr.w	r3, r3, #1
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8004fac:	e007      	b.n	8004fbe <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d102      	bne.n	8004fba <create_chain+0x12c>
 8004fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb8:	e000      	b.n	8004fbc <create_chain+0x12e>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004fbe:	697b      	ldr	r3, [r7, #20]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8004fd8:	3304      	adds	r3, #4
 8004fda:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	0a5b      	lsrs	r3, r3, #9
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004fe6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8004fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1d1a      	adds	r2, r3, #4
 8004ff4:	613a      	str	r2, [r7, #16]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <clmt_clust+0x3c>
 8005000:	2300      	movs	r3, #0
 8005002:	e010      	b.n	8005026 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	429a      	cmp	r2, r3
 800500a:	d307      	bcc.n	800501c <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	3304      	adds	r3, #4
 8005018:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800501a:	e7e9      	b.n	8004ff0 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800501c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4413      	add	r3, r2
}
 8005026:	4618      	mov	r0, r3
 8005028:	371c      	adds	r7, #28
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800504a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d007      	beq.n	8005062 <dir_sdi+0x32>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005058:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	429a      	cmp	r2, r3
 8005060:	d301      	bcc.n	8005066 <dir_sdi+0x36>
		return FR_INT_ERR;
 8005062:	2302      	movs	r3, #2
 8005064:	e074      	b.n	8005150 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10c      	bne.n	8005086 <dir_sdi+0x56>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005072:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005076:	2b03      	cmp	r3, #3
 8005078:	d105      	bne.n	8005086 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005080:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8005084:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d111      	bne.n	80050b0 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005092:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005096:	461a      	mov	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	4293      	cmp	r3, r2
 800509c:	d301      	bcc.n	80050a2 <dir_sdi+0x72>
			return FR_INT_ERR;
 800509e:	2302      	movs	r3, #2
 80050a0:	e056      	b.n	8005150 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050a8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e032      	b.n	8005116 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050b6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80050be:	e01e      	b.n	80050fe <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050c6:	6979      	ldr	r1, [r7, #20]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff fcbe 	bl	8004a4a <get_fat>
 80050ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d101      	bne.n	80050dc <dir_sdi+0xac>
 80050d8:	2301      	movs	r3, #1
 80050da:	e039      	b.n	8005150 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d907      	bls.n	80050f2 <dir_sdi+0xc2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80050e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d301      	bcc.n	80050f6 <dir_sdi+0xc6>
				return FR_INT_ERR;
 80050f2:	2302      	movs	r3, #2
 80050f4:	e02c      	b.n	8005150 <dir_sdi+0x120>
			idx -= ic;
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	429a      	cmp	r2, r3
 8005104:	d2dc      	bcs.n	80050c0 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800510c:	6979      	ldr	r1, [r7, #20]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fc7a 	bl	8004a08 <clust2sect>
 8005114:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <dir_sdi+0xf8>
 8005124:	2302      	movs	r3, #2
 8005126:	e013      	b.n	8005150 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	091a      	lsrs	r2, r3, #4
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	441a      	add	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800513c:	461a      	mov	r2, r3
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f003 030f 	and.w	r3, r3, #15
 8005144:	015b      	lsls	r3, r3, #5
 8005146:	441a      	add	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <dir_next+0x26>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <dir_next+0x2a>
		return FR_NO_FILE;
 800517e:	2304      	movs	r3, #4
 8005180:	e0dd      	b.n	800533e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	2b00      	cmp	r3, #0
 800518a:	f040 80c6 	bne.w	800531a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051ac:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80051b0:	461a      	mov	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4293      	cmp	r3, r2
 80051b6:	f0c0 80b0 	bcc.w	800531a <dir_next+0x1c2>
				return FR_NO_FILE;
 80051ba:	2304      	movs	r3, #4
 80051bc:	e0bf      	b.n	800533e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80051c8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80051cc:	3a01      	subs	r2, #1
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f040 80a2 	bne.w	800531a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f7ff fc30 	bl	8004a4a <get_fat>
 80051ea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d801      	bhi.n	80051f6 <dir_next+0x9e>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e0a3      	b.n	800533e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d101      	bne.n	8005202 <dir_next+0xaa>
 80051fe:	2301      	movs	r3, #1
 8005200:	e09d      	b.n	800533e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005208:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	429a      	cmp	r2, r3
 8005210:	d374      	bcc.n	80052fc <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <dir_next+0xc4>
 8005218:	2304      	movs	r3, #4
 800521a:	e090      	b.n	800533e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f7ff fe2f 	bl	8004e8e <create_chain>
 8005230:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <dir_next+0xe4>
 8005238:	2307      	movs	r3, #7
 800523a:	e080      	b.n	800533e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <dir_next+0xee>
 8005242:	2302      	movs	r3, #2
 8005244:	e07b      	b.n	800533e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d101      	bne.n	8005252 <dir_next+0xfa>
 800524e:	2301      	movs	r3, #1
 8005250:	e075      	b.n	800533e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fab1 	bl	80047c0 <sync_window>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <dir_next+0x110>
 8005264:	2301      	movs	r3, #1
 8005266:	e06a      	b.n	800533e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800526e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005272:	2100      	movs	r1, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff f895 	bl	80043a4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8005286:	6979      	ldr	r1, [r7, #20]
 8005288:	4610      	mov	r0, r2
 800528a:	f7ff fbbd 	bl	8004a08 <clust2sect>
 800528e:	4603      	mov	r3, r0
 8005290:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	e01b      	b.n	80052d2 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fa87 	bl	80047c0 <sync_window>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <dir_next+0x164>
 80052b8:	2301      	movs	r3, #1
 80052ba:	e040      	b.n	800533e <dir_next+0x1e6>
						dp->fs->winsect++;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052c2:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80052c6:	3201      	adds	r2, #1
 80052c8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	3301      	adds	r3, #1
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052d8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80052dc:	461a      	mov	r2, r3
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d3da      	bcc.n	800529a <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052ea:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	1a8a      	subs	r2, r1, r2
 80052f8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800530a:	6979      	ldr	r1, [r7, #20]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff fb7b 	bl	8004a08 <clust2sect>
 8005312:	4602      	mov	r2, r0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800532a:	461a      	mov	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	015b      	lsls	r3, r3, #5
 8005334:	441a      	add	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	bd90      	pop	{r4, r7, pc}

08005346 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005350:	2100      	movs	r1, #0
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff fe6c 	bl	8005030 <dir_sdi>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d131      	bne.n	80053c6 <dir_alloc+0x80>
		n = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005372:	4619      	mov	r1, r3
 8005374:	4610      	mov	r0, r2
 8005376:	f7ff fa6c 	bl	8004852 <move_window>
 800537a:	4603      	mov	r3, r0
 800537c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11f      	bne.n	80053c4 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2be5      	cmp	r3, #229	; 0xe5
 800538e:	d005      	beq.n	800539c <dir_alloc+0x56>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d107      	bne.n	80053ac <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	3301      	adds	r3, #1
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d102      	bne.n	80053b0 <dir_alloc+0x6a>
 80053aa:	e00c      	b.n	80053c6 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80053b0:	2101      	movs	r1, #1
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fed0 	bl	8005158 <dir_next>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0d1      	beq.n	8005366 <dir_alloc+0x20>
 80053c2:	e000      	b.n	80053c6 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80053c4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d101      	bne.n	80053d0 <dir_alloc+0x8a>
 80053cc:	2307      	movs	r3, #7
 80053ce:	73fb      	strb	r3, [r7, #15]
	return res;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	331b      	adds	r3, #27
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	b21a      	sxth	r2, r3
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	331a      	adds	r3, #26
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	b21b      	sxth	r3, r3
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005404:	2b03      	cmp	r3, #3
 8005406:	d10f      	bne.n	8005428 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	3315      	adds	r3, #21
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	b21a      	sxth	r2, r3
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	3314      	adds	r3, #20
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b21b      	sxth	r3, r3
 800541a:	4313      	orrs	r3, r2
 800541c:	b21b      	sxth	r3, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

	return cl;
 8005428:	68fb      	ldr	r3, [r7, #12]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr

08005434 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	331a      	adds	r3, #26
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	0a1b      	lsrs	r3, r3, #8
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	331b      	adds	r3, #27
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	0c1a      	lsrs	r2, r3, #16
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3314      	adds	r3, #20
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	b29b      	uxth	r3, r3
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	b29a      	uxth	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3315      	adds	r3, #21
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005488:	2100      	movs	r1, #0
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fdd0 	bl	8005030 <dir_sdi>
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <dir_find+0x1e>
 800549a:	7dfb      	ldrb	r3, [r7, #23]
 800549c:	e03b      	b.n	8005516 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f7ff f9d0 	bl	8004852 <move_window>
 80054b2:	4603      	mov	r3, r0
 80054b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d128      	bne.n	800550e <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054c2:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <dir_find+0x56>
 80054d0:	2304      	movs	r3, #4
 80054d2:	75fb      	strb	r3, [r7, #23]
 80054d4:	e01e      	b.n	8005514 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	330b      	adds	r3, #11
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <dir_find+0x7a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80054ea:	220b      	movs	r2, #11
 80054ec:	4619      	mov	r1, r3
 80054ee:	6938      	ldr	r0, [r7, #16]
 80054f0:	f7fe ff72 	bl	80043d8 <mem_cmp>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80054fa:	2100      	movs	r1, #0
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff fe2b 	bl	8005158 <dir_next>
 8005502:	4603      	mov	r3, r0
 8005504:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0c8      	beq.n	800549e <dir_find+0x1e>
 800550c:	e002      	b.n	8005514 <dir_find+0x94>
		if (res != FR_OK) break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <dir_find+0x94>
			break;
 8005512:	bf00      	nop

	return res;
 8005514:	7dfb      	ldrb	r3, [r7, #23]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005526:	2101      	movs	r1, #1
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff ff0c 	bl	8005346 <dir_alloc>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d126      	bne.n	8005586 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f7ff f983 	bl	8004852 <move_window>
 800554c:	4603      	mov	r3, r0
 800554e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d117      	bne.n	8005586 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800555c:	2220      	movs	r2, #32
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe ff1f 	bl	80043a4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005572:	220b      	movs	r2, #11
 8005574:	4619      	mov	r1, r3
 8005576:	f7fe fef7 	bl	8004368 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	e002      	b.n	80055a8 <create_name+0x18>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3301      	adds	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b2f      	cmp	r3, #47	; 0x2f
 80055ae:	d0f8      	beq.n	80055a2 <create_name+0x12>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b5c      	cmp	r3, #92	; 0x5c
 80055b6:	d0f4      	beq.n	80055a2 <create_name+0x12>
	sfn = dp->fn;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055be:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80055c0:	220b      	movs	r2, #11
 80055c2:	2120      	movs	r1, #32
 80055c4:	68b8      	ldr	r0, [r7, #8]
 80055c6:	f7fe feed 	bl	80043a4 <mem_set>
	si = i = b = 0; ni = 8;
 80055ca:	2300      	movs	r3, #0
 80055cc:	77fb      	strb	r3, [r7, #31]
 80055ce:	2300      	movs	r3, #0
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	2308      	movs	r3, #8
 80055d8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	617a      	str	r2, [r7, #20]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80055e8:	7fbb      	ldrb	r3, [r7, #30]
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d953      	bls.n	8005696 <create_name+0x106>
 80055ee:	7fbb      	ldrb	r3, [r7, #30]
 80055f0:	2b2f      	cmp	r3, #47	; 0x2f
 80055f2:	d050      	beq.n	8005696 <create_name+0x106>
 80055f4:	7fbb      	ldrb	r3, [r7, #30]
 80055f6:	2b5c      	cmp	r3, #92	; 0x5c
 80055f8:	d04d      	beq.n	8005696 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80055fa:	7fbb      	ldrb	r3, [r7, #30]
 80055fc:	2b2e      	cmp	r3, #46	; 0x2e
 80055fe:	d003      	beq.n	8005608 <create_name+0x78>
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	429a      	cmp	r2, r3
 8005606:	d30f      	bcc.n	8005628 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b08      	cmp	r3, #8
 800560c:	d102      	bne.n	8005614 <create_name+0x84>
 800560e:	7fbb      	ldrb	r3, [r7, #30]
 8005610:	2b2e      	cmp	r3, #46	; 0x2e
 8005612:	d001      	beq.n	8005618 <create_name+0x88>
 8005614:	2306      	movs	r3, #6
 8005616:	e073      	b.n	8005700 <create_name+0x170>
			i = 8; ni = 11;
 8005618:	2308      	movs	r3, #8
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	230b      	movs	r3, #11
 800561e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005620:	7ffb      	ldrb	r3, [r7, #31]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	77fb      	strb	r3, [r7, #31]
 8005626:	e035      	b.n	8005694 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005628:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800562c:	2b00      	cmp	r3, #0
 800562e:	da08      	bge.n	8005642 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8005630:	7ffb      	ldrb	r3, [r7, #31]
 8005632:	f043 0303 	orr.w	r3, r3, #3
 8005636:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005638:	7fbb      	ldrb	r3, [r7, #30]
 800563a:	3b80      	subs	r3, #128	; 0x80
 800563c:	4a32      	ldr	r2, [pc, #200]	; (8005708 <create_name+0x178>)
 800563e:	5cd3      	ldrb	r3, [r2, r3]
 8005640:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005642:	7fbb      	ldrb	r3, [r7, #30]
 8005644:	4619      	mov	r1, r3
 8005646:	4831      	ldr	r0, [pc, #196]	; (800570c <create_name+0x17c>)
 8005648:	f7fe feec 	bl	8004424 <chk_chr>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <create_name+0xc6>
				return FR_INVALID_NAME;
 8005652:	2306      	movs	r3, #6
 8005654:	e054      	b.n	8005700 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005656:	7fbb      	ldrb	r3, [r7, #30]
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	d907      	bls.n	800566c <create_name+0xdc>
 800565c:	7fbb      	ldrb	r3, [r7, #30]
 800565e:	2b5a      	cmp	r3, #90	; 0x5a
 8005660:	d804      	bhi.n	800566c <create_name+0xdc>
				b |= 2;
 8005662:	7ffb      	ldrb	r3, [r7, #31]
 8005664:	f043 0302 	orr.w	r3, r3, #2
 8005668:	77fb      	strb	r3, [r7, #31]
 800566a:	e00c      	b.n	8005686 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800566c:	7fbb      	ldrb	r3, [r7, #30]
 800566e:	2b60      	cmp	r3, #96	; 0x60
 8005670:	d909      	bls.n	8005686 <create_name+0xf6>
 8005672:	7fbb      	ldrb	r3, [r7, #30]
 8005674:	2b7a      	cmp	r3, #122	; 0x7a
 8005676:	d806      	bhi.n	8005686 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8005678:	7ffb      	ldrb	r3, [r7, #31]
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	7fbb      	ldrb	r3, [r7, #30]
 8005682:	3b20      	subs	r3, #32
 8005684:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	613a      	str	r2, [r7, #16]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	4413      	add	r3, r2
 8005690:	7fba      	ldrb	r2, [r7, #30]
 8005692:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005694:	e7a1      	b.n	80055da <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	441a      	add	r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80056a0:	7fbb      	ldrb	r3, [r7, #30]
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d801      	bhi.n	80056aa <create_name+0x11a>
 80056a6:	2304      	movs	r3, #4
 80056a8:	e000      	b.n	80056ac <create_name+0x11c>
 80056aa:	2300      	movs	r3, #0
 80056ac:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <create_name+0x128>
 80056b4:	2306      	movs	r3, #6
 80056b6:	e023      	b.n	8005700 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2be5      	cmp	r3, #229	; 0xe5
 80056be:	d102      	bne.n	80056c6 <create_name+0x136>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2205      	movs	r2, #5
 80056c4:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d102      	bne.n	80056d2 <create_name+0x142>
 80056cc:	7ffb      	ldrb	r3, [r7, #31]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80056d2:	7ffb      	ldrb	r3, [r7, #31]
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d103      	bne.n	80056e4 <create_name+0x154>
 80056dc:	7fbb      	ldrb	r3, [r7, #30]
 80056de:	f043 0310 	orr.w	r3, r3, #16
 80056e2:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80056e4:	7ffb      	ldrb	r3, [r7, #31]
 80056e6:	f003 030c 	and.w	r3, r3, #12
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d103      	bne.n	80056f6 <create_name+0x166>
 80056ee:	7fbb      	ldrb	r3, [r7, #30]
 80056f0:	f043 0308 	orr.w	r3, r3, #8
 80056f4:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	330b      	adds	r3, #11
 80056fa:	7fba      	ldrb	r2, [r7, #30]
 80056fc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80056fe:	2300      	movs	r3, #0
#endif
}
 8005700:	4618      	mov	r0, r3
 8005702:	3720      	adds	r7, #32
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	08006bb8 	.word	0x08006bb8
 800570c:	08006b34 	.word	0x08006b34

08005710 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b2f      	cmp	r3, #47	; 0x2f
 8005720:	d003      	beq.n	800572a <follow_path+0x1a>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b5c      	cmp	r3, #92	; 0x5c
 8005728:	d102      	bne.n	8005730 <follow_path+0x20>
		path++;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b1f      	cmp	r3, #31
 800573e:	d80a      	bhi.n	8005756 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8005740:	2100      	movs	r1, #0
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fc74 	bl	8005030 <dir_sdi>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005754:	e045      	b.n	80057e2 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005756:	463b      	mov	r3, r7
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ff18 	bl	8005590 <create_name>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d136      	bne.n	80057d8 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fe88 	bl	8005480 <dir_find>
 8005770:	4603      	mov	r3, r0
 8005772:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800577a:	7adb      	ldrb	r3, [r3, #11]
 800577c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	2b04      	cmp	r3, #4
 8005788:	d128      	bne.n	80057dc <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d123      	bne.n	80057dc <follow_path+0xcc>
 8005794:	2305      	movs	r3, #5
 8005796:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005798:	e020      	b.n	80057dc <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800579a:	7bbb      	ldrb	r3, [r7, #14]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d11d      	bne.n	80057e0 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057aa:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	330b      	adds	r3, #11
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80057ba:	2305      	movs	r3, #5
 80057bc:	73fb      	strb	r3, [r7, #15]
 80057be:	e010      	b.n	80057e2 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80057c6:	68b9      	ldr	r1, [r7, #8]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fe06 	bl	80053da <ld_clust>
 80057ce:	4602      	mov	r2, r0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80057d6:	e7be      	b.n	8005756 <follow_path+0x46>
			if (res != FR_OK) break;
 80057d8:	bf00      	nop
 80057da:	e002      	b.n	80057e2 <follow_path+0xd2>
				break;
 80057dc:	bf00      	nop
 80057de:	e000      	b.n	80057e2 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057e0:	bf00      	nop
		}
	}

	return res;
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295
 80057f8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d031      	beq.n	8005866 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e002      	b.n	8005810 <get_ldnumber+0x24>
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	3301      	adds	r3, #1
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b20      	cmp	r3, #32
 8005816:	d903      	bls.n	8005820 <get_ldnumber+0x34>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b3a      	cmp	r3, #58	; 0x3a
 800581e:	d1f4      	bne.n	800580a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b3a      	cmp	r3, #58	; 0x3a
 8005826:	d11c      	bne.n	8005862 <get_ldnumber+0x76>
			tp = *path;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	60fa      	str	r2, [r7, #12]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	3b30      	subs	r3, #48	; 0x30
 8005838:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b09      	cmp	r3, #9
 800583e:	d80e      	bhi.n	800585e <get_ldnumber+0x72>
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	429a      	cmp	r2, r3
 8005846:	d10a      	bne.n	800585e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d107      	bne.n	800585e <get_ldnumber+0x72>
					vol = (int)i;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	3301      	adds	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	e002      	b.n	8005868 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005866:	693b      	ldr	r3, [r7, #16]
}
 8005868:	4618      	mov	r0, r3
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr
	...

08005874 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f04f 32ff 	mov.w	r2, #4294967295
 800588c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fe ffdd 	bl	8004852 <move_window>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <check_fs+0x2e>
		return 3;
 800589e:	2303      	movs	r3, #3
 80058a0:	e04a      	b.n	8005938 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80058a8:	3301      	adds	r3, #1
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	b21a      	sxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80058b6:	b21b      	sxth	r3, r3
 80058b8:	4313      	orrs	r3, r2
 80058ba:	b21b      	sxth	r3, r3
 80058bc:	4a20      	ldr	r2, [pc, #128]	; (8005940 <check_fs+0xcc>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d001      	beq.n	80058c6 <check_fs+0x52>
		return 2;
 80058c2:	2302      	movs	r3, #2
 80058c4:	e038      	b.n	8005938 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3336      	adds	r3, #54	; 0x36
 80058ca:	3303      	adds	r3, #3
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	061a      	lsls	r2, r3, #24
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3336      	adds	r3, #54	; 0x36
 80058d4:	3302      	adds	r3, #2
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	041b      	lsls	r3, r3, #16
 80058da:	4313      	orrs	r3, r2
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	3236      	adds	r2, #54	; 0x36
 80058e0:	3201      	adds	r2, #1
 80058e2:	7812      	ldrb	r2, [r2, #0]
 80058e4:	0212      	lsls	r2, r2, #8
 80058e6:	4313      	orrs	r3, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <check_fs+0xd0>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d101      	bne.n	80058fe <check_fs+0x8a>
		return 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e01c      	b.n	8005938 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3352      	adds	r3, #82	; 0x52
 8005902:	3303      	adds	r3, #3
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	061a      	lsls	r2, r3, #24
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3352      	adds	r3, #82	; 0x52
 800590c:	3302      	adds	r3, #2
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	4313      	orrs	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	3252      	adds	r2, #82	; 0x52
 8005918:	3201      	adds	r2, #1
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	0212      	lsls	r2, r2, #8
 800591e:	4313      	orrs	r3, r2
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005926:	4313      	orrs	r3, r2
 8005928:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800592c:	4a05      	ldr	r2, [pc, #20]	; (8005944 <check_fs+0xd0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d101      	bne.n	8005936 <check_fs+0xc2>
		return 0;
 8005932:	2300      	movs	r3, #0
 8005934:	e000      	b.n	8005938 <check_fs+0xc4>

	return 1;
 8005936:	2301      	movs	r3, #1
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	ffffaa55 	.word	0xffffaa55
 8005944:	00544146 	.word	0x00544146

08005948 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b096      	sub	sp, #88	; 0x58
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800595c:	68b8      	ldr	r0, [r7, #8]
 800595e:	f7ff ff45 	bl	80057ec <get_ldnumber>
 8005962:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005966:	2b00      	cmp	r3, #0
 8005968:	da01      	bge.n	800596e <find_volume+0x26>
 800596a:	230b      	movs	r3, #11
 800596c:	e2a8      	b.n	8005ec0 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800596e:	4a9d      	ldr	r2, [pc, #628]	; (8005be4 <find_volume+0x29c>)
 8005970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005976:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <find_volume+0x3a>
 800597e:	230c      	movs	r3, #12
 8005980:	e29e      	b.n	8005ec0 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005986:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01b      	beq.n	80059ca <find_volume+0x82>
		stat = disk_status(fs->drv);
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe fc47 	bl	800422c <disk_status>
 800599e:	4603      	mov	r3, r0
 80059a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80059a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10c      	bne.n	80059ca <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d007      	beq.n	80059c6 <find_volume+0x7e>
 80059b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80059c2:	230a      	movs	r3, #10
 80059c4:	e27c      	b.n	8005ec0 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 80059c6:	2300      	movs	r3, #0
 80059c8:	e27a      	b.n	8005ec0 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80059d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80059dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fc3c 	bl	8004260 <disk_initialize>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80059ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80059fa:	2303      	movs	r3, #3
 80059fc:	e260      	b.n	8005ec0 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d007      	beq.n	8005a14 <find_volume+0xcc>
 8005a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8005a10:	230a      	movs	r3, #10
 8005a12:	e255      	b.n	8005ec0 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005a18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a1c:	f7ff ff2a 	bl	8005874 <check_fs>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005a26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d153      	bne.n	8005ad6 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005a2e:	2300      	movs	r3, #0
 8005a30:	643b      	str	r3, [r7, #64]	; 0x40
 8005a32:	e028      	b.n	8005a86 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005a3e:	4413      	add	r3, r2
 8005a40:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	3304      	adds	r3, #4
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d012      	beq.n	8005a72 <find_volume+0x12a>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	330b      	adds	r3, #11
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	061a      	lsls	r2, r3, #24
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	330a      	adds	r3, #10
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a60:	3209      	adds	r2, #9
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	0212      	lsls	r2, r2, #8
 8005a66:	4313      	orrs	r3, r2
 8005a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6a:	3208      	adds	r2, #8
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	e000      	b.n	8005a74 <find_volume+0x12c>
 8005a72:	2200      	movs	r2, #0
 8005a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	3358      	adds	r3, #88	; 0x58
 8005a7a:	443b      	add	r3, r7
 8005a7c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a82:	3301      	adds	r3, #1
 8005a84:	643b      	str	r3, [r7, #64]	; 0x40
 8005a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d9d3      	bls.n	8005a34 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d002      	beq.n	8005a9c <find_volume+0x154>
 8005a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	3358      	adds	r3, #88	; 0x58
 8005aa2:	443b      	add	r3, r7
 8005aa4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005aa8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <find_volume+0x174>
 8005ab0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ab2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ab4:	f7ff fede 	bl	8005874 <check_fs>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	e000      	b.n	8005abe <find_volume+0x176>
 8005abc:	2302      	movs	r3, #2
 8005abe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <find_volume+0x18e>
 8005aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005acc:	3301      	adds	r3, #1
 8005ace:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad2:	2b03      	cmp	r3, #3
 8005ad4:	d9e2      	bls.n	8005a9c <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d101      	bne.n	8005ae2 <find_volume+0x19a>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e1ee      	b.n	8005ec0 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005ae2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <find_volume+0x1a6>
 8005aea:	230d      	movs	r3, #13
 8005aec:	e1e8      	b.n	8005ec0 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	7b1b      	ldrb	r3, [r3, #12]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	b21a      	sxth	r2, r3
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	7adb      	ldrb	r3, [r3, #11]
 8005afa:	b21b      	sxth	r3, r3
 8005afc:	4313      	orrs	r3, r2
 8005afe:	b21b      	sxth	r3, r3
 8005b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b04:	d001      	beq.n	8005b0a <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8005b06:	230d      	movs	r3, #13
 8005b08:	e1da      	b.n	8005ec0 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	7ddb      	ldrb	r3, [r3, #23]
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	b21a      	sxth	r2, r3
 8005b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b14:	7d9b      	ldrb	r3, [r3, #22]
 8005b16:	b21b      	sxth	r3, r3
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	b21b      	sxth	r3, r3
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d112      	bne.n	8005b4c <find_volume+0x204>
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005b2c:	061a      	lsls	r2, r3, #24
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	4313      	orrs	r3, r2
 8005b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b3a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005b3e:	0212      	lsls	r2, r2, #8
 8005b40:	4313      	orrs	r3, r2
 8005b42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b44:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b50:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	7c1a      	ldrb	r2, [r3, #16]
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d006      	beq.n	8005b76 <find_volume+0x22e>
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d001      	beq.n	8005b76 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8005b72:	230d      	movs	r3, #13
 8005b74:	e1a4      	b.n	8005ec0 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b80:	fb02 f303 	mul.w	r3, r2, r3
 8005b84:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	7b5a      	ldrb	r2, [r3, #13]
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <find_volume+0x268>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8005bb0:	230d      	movs	r3, #13
 8005bb2:	e185      	b.n	8005ec0 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	7c9b      	ldrb	r3, [r3, #18]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	b21a      	sxth	r2, r3
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	7c5b      	ldrb	r3, [r3, #17]
 8005bc0:	b21b      	sxth	r3, r3
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b21b      	sxth	r3, r3
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8005bde:	230d      	movs	r3, #13
 8005be0:	e16e      	b.n	8005ec0 <find_volume+0x578>
 8005be2:	bf00      	nop
 8005be4:	200011d4 	.word	0x200011d4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	7d1b      	ldrb	r3, [r3, #20]
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	b21a      	sxth	r2, r3
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	7cdb      	ldrb	r3, [r3, #19]
 8005bf4:	b21b      	sxth	r3, r3
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	b21b      	sxth	r3, r3
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d112      	bne.n	8005c2a <find_volume+0x2e2>
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005c0a:	061a      	lsls	r2, r3, #24
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005c12:	041b      	lsls	r3, r3, #16
 8005c14:	4313      	orrs	r3, r2
 8005c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c18:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005c1c:	0212      	lsls	r2, r2, #8
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c22:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	7bdb      	ldrb	r3, [r3, #15]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	b21a      	sxth	r2, r3
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	7b9b      	ldrb	r3, [r3, #14]
 8005c36:	b21b      	sxth	r3, r3
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	b21b      	sxth	r3, r3
 8005c3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <find_volume+0x300>
 8005c44:	230d      	movs	r3, #13
 8005c46:	e13b      	b.n	8005ec0 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005c48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4c:	4413      	add	r3, r2
 8005c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c50:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8005c54:	0912      	lsrs	r2, r2, #4
 8005c56:	b292      	uxth	r2, r2
 8005c58:	4413      	add	r3, r2
 8005c5a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d201      	bcs.n	8005c68 <find_volume+0x320>
 8005c64:	230d      	movs	r3, #13
 8005c66:	e12b      	b.n	8005ec0 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c70:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8005c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <find_volume+0x33c>
 8005c80:	230d      	movs	r3, #13
 8005c82:	e11d      	b.n	8005ec0 <find_volume+0x578>
	fmt = FS_FAT12;
 8005c84:	2301      	movs	r3, #1
 8005c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d902      	bls.n	8005c9a <find_volume+0x352>
 8005c94:	2302      	movs	r3, #2
 8005c96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d902      	bls.n	8005caa <find_volume+0x362>
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	1c9a      	adds	r2, r3, #2
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cb8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005cbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc0:	441a      	add	r2, r3
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8005cc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	441a      	add	r2, r3
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8005cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d121      	bne.n	8005d20 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <find_volume+0x3a2>
 8005ce6:	230d      	movs	r3, #13
 8005ce8:	e0ea      	b.n	8005ec0 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005cf0:	061a      	lsls	r2, r3, #24
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005cf8:	041b      	lsls	r3, r3, #16
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cfe:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005d02:	0212      	lsls	r2, r2, #8
 8005d04:	4313      	orrs	r3, r2
 8005d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d08:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d1e:	e025      	b.n	8005d6c <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <find_volume+0x3e6>
 8005d2a:	230d      	movs	r3, #13
 8005d2c:	e0c8      	b.n	8005ec0 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d36:	441a      	add	r2, r3
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005d3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d104      	bne.n	8005d50 <find_volume+0x408>
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	e00c      	b.n	8005d6a <find_volume+0x422>
 8005d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d52:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	085a      	lsrs	r2, r3, #1
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005d6a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8005d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d74:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005d78:	0a5b      	lsrs	r3, r3, #9
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d201      	bcs.n	8005d82 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8005d7e:	230d      	movs	r3, #13
 8005d80:	e09e      	b.n	8005ec0 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d84:	f04f 32ff 	mov.w	r2, #4294967295
 8005d88:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	2280      	movs	r2, #128	; 0x80
 8005d9c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005da0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d177      	bne.n	8005e98 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	b21a      	sxth	r2, r3
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005db8:	b21b      	sxth	r3, r3
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	b21b      	sxth	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d16a      	bne.n	8005e98 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dca:	f7fe fd42 	bl	8004852 <move_window>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d161      	bne.n	8005e98 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	b21a      	sxth	r2, r3
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005dec:	b21b      	sxth	r3, r3
 8005dee:	4313      	orrs	r3, r2
 8005df0:	b21b      	sxth	r3, r3
 8005df2:	4a35      	ldr	r2, [pc, #212]	; (8005ec8 <find_volume+0x580>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d14f      	bne.n	8005e98 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	78db      	ldrb	r3, [r3, #3]
 8005dfc:	061a      	lsls	r2, r3, #24
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	789b      	ldrb	r3, [r3, #2]
 8005e02:	041b      	lsls	r3, r3, #16
 8005e04:	4313      	orrs	r3, r2
 8005e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e08:	7852      	ldrb	r2, [r2, #1]
 8005e0a:	0212      	lsls	r2, r2, #8
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e10:	7812      	ldrb	r2, [r2, #0]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	4a2d      	ldr	r2, [pc, #180]	; (8005ecc <find_volume+0x584>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d13e      	bne.n	8005e98 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005e20:	061a      	lsls	r2, r3, #24
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8005e28:	041b      	lsls	r3, r3, #16
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e2e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005e32:	0212      	lsls	r2, r2, #8
 8005e34:	4313      	orrs	r3, r2
 8005e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e38:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	4a24      	ldr	r2, [pc, #144]	; (8005ed0 <find_volume+0x588>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d129      	bne.n	8005e98 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e46:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005e4a:	061a      	lsls	r2, r3, #24
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005e52:	041b      	lsls	r3, r3, #16
 8005e54:	4313      	orrs	r3, r2
 8005e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e58:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005e5c:	0212      	lsls	r2, r2, #8
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e62:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8005e66:	431a      	orrs	r2, r3
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8005e74:	061a      	lsls	r2, r3, #24
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e82:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8005e86:	0212      	lsls	r2, r2, #8
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e8c:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8005e90:	431a      	orrs	r2, r3
 8005e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <find_volume+0x58c>)
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <find_volume+0x58c>)
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <find_volume+0x58c>)
 8005eb0:	881a      	ldrh	r2, [r3, #0]
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005eb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eba:	f7fe fc57 	bl	800476c <clear_lock>
#endif

	return FR_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3758      	adds	r7, #88	; 0x58
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	ffffaa55 	.word	0xffffaa55
 8005ecc:	41615252 	.word	0x41615252
 8005ed0:	61417272 	.word	0x61417272
 8005ed4:	200011d8 	.word	0x200011d8

08005ed8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d022      	beq.n	8005f30 <validate+0x58>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01d      	beq.n	8005f30 <validate+0x58>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005efa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d016      	beq.n	8005f30 <validate+0x58>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f08:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d10c      	bne.n	8005f30 <validate+0x58>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005f1c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe f983 	bl	800422c <disk_status>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005f30:	2309      	movs	r3, #9
 8005f32:	e000      	b.n	8005f36 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005f52:	f107 0310 	add.w	r3, r7, #16
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fc48 	bl	80057ec <get_ldnumber>
 8005f5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	da01      	bge.n	8005f68 <f_mount+0x28>
 8005f64:	230b      	movs	r3, #11
 8005f66:	e02d      	b.n	8005fc4 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005f68:	4a18      	ldr	r2, [pc, #96]	; (8005fcc <f_mount+0x8c>)
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d006      	beq.n	8005f86 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8005f78:	69b8      	ldr	r0, [r7, #24]
 8005f7a:	f7fe fbf7 	bl	800476c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	490d      	ldr	r1, [pc, #52]	; (8005fcc <f_mount+0x8c>)
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <f_mount+0x6a>
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d001      	beq.n	8005fae <f_mount+0x6e>
 8005faa:	2300      	movs	r3, #0
 8005fac:	e00a      	b.n	8005fc4 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005fae:	f107 0108 	add.w	r1, r7, #8
 8005fb2:	f107 030c 	add.w	r3, r7, #12
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff fcc5 	bl	8005948 <find_volume>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	200011d4 	.word	0x200011d4

08005fd0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005fdc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005fe0:	6018      	str	r0, [r3, #0]
 8005fe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005fe6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8005fea:	6019      	str	r1, [r3, #0]
 8005fec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ff0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8005ff4:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005ffa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <f_open+0x38>
 8006004:	2309      	movs	r3, #9
 8006006:	e257      	b.n	80064b8 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8006008:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800600c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006018:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800601c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006020:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006024:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006028:	7812      	ldrb	r2, [r2, #0]
 800602a:	f002 021f 	and.w	r2, r2, #31
 800602e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006030:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006034:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	f107 0108 	add.w	r1, r7, #8
 8006044:	f107 0320 	add.w	r3, r7, #32
 8006048:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff fc7b 	bl	8005948 <find_volume>
 8006052:	4603      	mov	r3, r0
 8006054:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006058:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800605c:	2b00      	cmp	r3, #0
 800605e:	f040 8229 	bne.w	80064b4 <f_open+0x4e4>
		INIT_BUF(dj);
 8006062:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006066:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800606a:	f107 0214 	add.w	r2, r7, #20
 800606e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8006072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006076:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	f107 0320 	add.w	r3, r7, #32
 8006080:	4611      	mov	r1, r2
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fb44 	bl	8005710 <follow_path>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800608e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006092:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006096:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800609a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800609e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d11d      	bne.n	80060e2 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 80060a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <f_open+0xe6>
				res = FR_INVALID_NAME;
 80060ae:	2306      	movs	r3, #6
 80060b0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80060b4:	e015      	b.n	80060e2 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80060b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060ba:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bf14      	ite	ne
 80060c8:	2301      	movne	r3, #1
 80060ca:	2300      	moveq	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	461a      	mov	r2, r3
 80060d0:	f107 0320 	add.w	r3, r7, #32
 80060d4:	4611      	mov	r1, r2
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fe f9be 	bl	8004458 <chk_lock>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80060e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80060e6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f003 031c 	and.w	r3, r3, #28
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 80e6 	beq.w	80062c2 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 80060f6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d027      	beq.n	800614e <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80060fe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006102:	2b04      	cmp	r3, #4
 8006104:	d10e      	bne.n	8006124 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006106:	f7fe fa13 	bl	8004530 <enq_lock>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d006      	beq.n	800611e <f_open+0x14e>
 8006110:	f107 0320 	add.w	r3, r7, #32
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff fa02 	bl	800551e <dir_register>
 800611a:	4603      	mov	r3, r0
 800611c:	e000      	b.n	8006120 <f_open+0x150>
 800611e:	2312      	movs	r3, #18
 8006120:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006124:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006128:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800612c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006130:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006134:	7812      	ldrb	r2, [r2, #0]
 8006136:	f042 0208 	orr.w	r2, r2, #8
 800613a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800613c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006140:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006144:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006148:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800614c:	e017      	b.n	800617e <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800614e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006152:	330b      	adds	r3, #11
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	f003 0311 	and.w	r3, r3, #17
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <f_open+0x196>
					res = FR_DENIED;
 800615e:	2307      	movs	r3, #7
 8006160:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8006164:	e00b      	b.n	800617e <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006166:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800616a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <f_open+0x1ae>
						res = FR_EXIST;
 8006178:	2308      	movs	r3, #8
 800617a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800617e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8006182:	2b00      	cmp	r3, #0
 8006184:	f040 80c1 	bne.w	800630a <f_open+0x33a>
 8006188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800618c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80b7 	beq.w	800630a <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 800619c:	f7fd fb08 	bl	80037b0 <get_fattime>
 80061a0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80061a4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061a8:	330e      	adds	r3, #14
 80061aa:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	0a1b      	lsrs	r3, r3, #8
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061c0:	330f      	adds	r3, #15
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80061ca:	0c1a      	lsrs	r2, r3, #16
 80061cc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061d0:	3310      	adds	r3, #16
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80061da:	0e1a      	lsrs	r2, r3, #24
 80061dc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061e0:	3311      	adds	r3, #17
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80061e6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061ea:	330b      	adds	r3, #11
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80061f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061f4:	331c      	adds	r3, #28
 80061f6:	2200      	movs	r2, #0
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80061fe:	331d      	adds	r3, #29
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006208:	331e      	adds	r3, #30
 800620a:	2200      	movs	r2, #0
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006212:	331f      	adds	r3, #31
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006218:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800621c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006220:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006224:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff f8d6 	bl	80053da <ld_clust>
 800622e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8006232:	2100      	movs	r1, #0
 8006234:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8006238:	f7ff f8fc 	bl	8005434 <st_clust>
				dj.fs->wflag = 1;
 800623c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006240:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006244:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800624e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8006252:	2b00      	cmp	r3, #0
 8006254:	d059      	beq.n	800630a <f_open+0x33a>
					dw = dj.fs->winsect;
 8006256:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800625a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800625e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006262:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8006266:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800626a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800626e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006272:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006276:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800627a:	4618      	mov	r0, r3
 800627c:	f7fe fdad 	bl	8004dda <remove_chain>
 8006280:	4603      	mov	r3, r0
 8006282:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8006286:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800628a:	2b00      	cmp	r3, #0
 800628c:	d13d      	bne.n	800630a <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800628e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006292:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006296:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800629a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800629e:	3a01      	subs	r2, #1
 80062a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80062a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062a8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80062ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062b0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fe facc 	bl	8004852 <move_window>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80062c0:	e023      	b.n	800630a <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80062c2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d11f      	bne.n	800630a <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80062ca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80062ce:	330b      	adds	r3, #11
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <f_open+0x312>
					res = FR_NO_FILE;
 80062da:	2304      	movs	r3, #4
 80062dc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80062e0:	e013      	b.n	800630a <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80062e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80062e6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <f_open+0x33a>
 80062f4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80062f8:	330b      	adds	r3, #11
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <f_open+0x33a>
						res = FR_DENIED;
 8006304:	2307      	movs	r3, #7
 8006306:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800630a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800630e:	2b00      	cmp	r3, #0
 8006310:	d153      	bne.n	80063ba <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006312:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006316:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <f_open+0x36c>
				mode |= FA__WRITTEN;
 8006324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006328:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800632c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006330:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8006334:	7812      	ldrb	r2, [r2, #0]
 8006336:	f042 0220 	orr.w	r2, r2, #32
 800633a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800633c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006340:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006344:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006348:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800634c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006350:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800635a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800635e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006368:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800636c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006370:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	f023 0301 	bic.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	f107 0320 	add.w	r3, r7, #32
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe f8f3 	bl	8004578 <inc_lock>
 8006392:	4602      	mov	r2, r0
 8006394:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006398:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80063a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063a6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <f_open+0x3ea>
 80063b4:	2302      	movs	r3, #2
 80063b6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80063ba:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d178      	bne.n	80064b4 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80063c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063c6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80063d0:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80063d4:	7812      	ldrb	r2, [r2, #0]
 80063d6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80063da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063de:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80063ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063ee:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80063f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063f6:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe ffed 	bl	80053da <ld_clust>
 8006400:	4602      	mov	r2, r0
 8006402:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006406:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006410:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8006414:	331f      	adds	r3, #31
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	061a      	lsls	r2, r3, #24
 800641a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800641e:	331e      	adds	r3, #30
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	041b      	lsls	r3, r3, #16
 8006424:	4313      	orrs	r3, r2
 8006426:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800642a:	321d      	adds	r2, #29
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	0212      	lsls	r2, r2, #8
 8006430:	4313      	orrs	r3, r2
 8006432:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8006436:	321c      	adds	r2, #28
 8006438:	7812      	ldrb	r2, [r2, #0]
 800643a:	431a      	orrs	r2, r3
 800643c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006440:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800644a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800644e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2200      	movs	r2, #0
 8006456:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800645a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800645e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2200      	movs	r2, #0
 8006466:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800646a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800646e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2200      	movs	r2, #0
 8006476:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800647a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800647e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8006482:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006486:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800648a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8006494:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006498:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064a2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80064a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064aa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80064b4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b08a      	sub	sp, #40	; 0x28
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7ff fcfc 	bl	8005ed8 <validate>
 80064e0:	4603      	mov	r3, r0
 80064e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <f_write+0x2c>
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	e192      	b.n	8006814 <f_write+0x352>
	if (fp->err)							/* Check error */
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80064fe:	e189      	b.n	8006814 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800650e:	2307      	movs	r3, #7
 8006510:	e180      	b.n	8006814 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	441a      	add	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006522:	429a      	cmp	r2, r3
 8006524:	f080 8158 	bcs.w	80067d8 <f_write+0x316>
 8006528:	2300      	movs	r3, #0
 800652a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800652c:	e154      	b.n	80067d8 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006538:	2b00      	cmp	r3, #0
 800653a:	f040 8114 	bne.w	8006766 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006544:	0a5b      	lsrs	r3, r3, #9
 8006546:	b2da      	uxtb	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800654e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006552:	3b01      	subs	r3, #1
 8006554:	b2db      	uxtb	r3, r3
 8006556:	4013      	ands	r3, r2
 8006558:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800655a:	7dbb      	ldrb	r3, [r7, #22]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d151      	bne.n	8006604 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10f      	bne.n	800658a <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	d121      	bne.n	80065bc <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800657e:	2100      	movs	r1, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fc84 	bl	8004e8e <create_chain>
 8006586:	6278      	str	r0, [r7, #36]	; 0x24
 8006588:	e018      	b.n	80065bc <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800659a:	4619      	mov	r1, r3
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7fe fd13 	bl	8004fc8 <clmt_clust>
 80065a2:	6278      	str	r0, [r7, #36]	; 0x24
 80065a4:	e00a      	b.n	80065bc <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065b2:	4619      	mov	r1, r3
 80065b4:	4610      	mov	r0, r2
 80065b6:	f7fe fc6a 	bl	8004e8e <create_chain>
 80065ba:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80065bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 810f 	beq.w	80067e2 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d105      	bne.n	80065d6 <f_write+0x114>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80065d2:	2302      	movs	r3, #2
 80065d4:	e11e      	b.n	8006814 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d105      	bne.n	80065ea <f_write+0x128>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80065e6:	2301      	movs	r3, #1
 80065e8:	e114      	b.n	8006814 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d103      	bne.n	8006604 <f_write+0x142>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006600:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01d      	beq.n	800664e <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006618:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800661c:	68f9      	ldr	r1, [r7, #12]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006624:	2301      	movs	r3, #1
 8006626:	f7fd fe61 	bl	80042ec <disk_write>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006638:	2301      	movs	r3, #1
 800663a:	e0eb      	b.n	8006814 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006646:	b2da      	uxtb	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800665a:	4619      	mov	r1, r3
 800665c:	4610      	mov	r0, r2
 800665e:	f7fe f9d3 	bl	8004a08 <clust2sect>
 8006662:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d105      	bne.n	8006676 <f_write+0x1b4>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2202      	movs	r2, #2
 800666e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8006672:	2302      	movs	r3, #2
 8006674:	e0ce      	b.n	8006814 <f_write+0x352>
			sect += csect;
 8006676:	7dbb      	ldrb	r3, [r7, #22]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	0a5b      	lsrs	r3, r3, #9
 8006682:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d048      	beq.n	800671c <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800668a:	7dba      	ldrb	r2, [r7, #22]
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8006696:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800669a:	4293      	cmp	r3, r2
 800669c:	d908      	bls.n	80066b0 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066a4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80066a8:	461a      	mov	r2, r3
 80066aa:	7dbb      	ldrb	r3, [r7, #22]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066b6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	69b9      	ldr	r1, [r7, #24]
 80066c0:	f7fd fe14 	bl	80042ec <disk_write>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80066d2:	2301      	movs	r3, #1
 80066d4:	e09e      	b.n	8006814 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d916      	bls.n	8006714 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	025b      	lsls	r3, r3, #9
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4413      	add	r3, r2
 80066f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066fc:	4619      	mov	r1, r3
 80066fe:	f7fd fe33 	bl	8004368 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	025b      	lsls	r3, r3, #9
 8006718:	623b      	str	r3, [r7, #32]
				continue;
 800671a:	e047      	b.n	80067ac <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	429a      	cmp	r2, r3
 8006726:	d01a      	beq.n	800675e <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006734:	429a      	cmp	r2, r3
 8006736:	d212      	bcs.n	800675e <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800673e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8006742:	68f9      	ldr	r1, [r7, #12]
 8006744:	2301      	movs	r3, #1
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	f7fd fdb0 	bl	80042ac <disk_read>
 800674c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800675a:	2301      	movs	r3, #1
 800675c:	e05a      	b.n	8006814 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800676c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006770:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006774:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006776:	6a3a      	ldr	r2, [r7, #32]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	429a      	cmp	r2, r3
 800677c:	d901      	bls.n	8006782 <f_write+0x2c0>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	6a3a      	ldr	r2, [r7, #32]
 8006792:	69b9      	ldr	r1, [r7, #24]
 8006794:	4618      	mov	r0, r3
 8006796:	f7fd fde7 	bl	8004368 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80067a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	4413      	add	r3, r2
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	441a      	add	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	441a      	add	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f47f aea7 	bne.w	800652e <f_write+0x6c>
 80067e0:	e000      	b.n	80067e4 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80067e2:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d905      	bls.n	8006800 <f_write+0x33e>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8006806:	f043 0320 	orr.w	r3, r3, #32
 800680a:	b2da      	uxtb	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3728      	adds	r7, #40	; 0x28
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff fb57 	bl	8005ed8 <validate>
 800682a:	4603      	mov	r3, r0
 800682c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	2b00      	cmp	r3, #0
 8006832:	f040 80a8 	bne.w	8006986 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80a0 	beq.w	8006986 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800684c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d019      	beq.n	8006888 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800685a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006866:	2301      	movs	r3, #1
 8006868:	f7fd fd40 	bl	80042ec <disk_write>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006872:	2301      	movs	r3, #1
 8006874:	e088      	b.n	8006988 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800687c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006880:	b2da      	uxtb	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f7fd ffdb 	bl	8004852 <move_window>
 800689c:	4603      	mov	r3, r0
 800689e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d16f      	bne.n	8006986 <f_sync+0x16a>
				dir = fp->dir_ptr;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80068ac:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	330b      	adds	r3, #11
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	330b      	adds	r3, #11
 80068b8:	f042 0220 	orr.w	r2, r2, #32
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	331c      	adds	r3, #28
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	0a1b      	lsrs	r3, r3, #8
 80068d8:	b29a      	uxth	r2, r3
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	331d      	adds	r3, #29
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80068e8:	0c1a      	lsrs	r2, r3, #16
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	331e      	adds	r3, #30
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80068f8:	0e1a      	lsrs	r2, r3, #24
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	331f      	adds	r3, #31
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006908:	4619      	mov	r1, r3
 800690a:	6938      	ldr	r0, [r7, #16]
 800690c:	f7fe fd92 	bl	8005434 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006910:	f7fc ff4e 	bl	80037b0 <get_fattime>
 8006914:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3316      	adds	r3, #22
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	b29b      	uxth	r3, r3
 8006924:	0a1b      	lsrs	r3, r3, #8
 8006926:	b29a      	uxth	r2, r3
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	3317      	adds	r3, #23
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	0c1a      	lsrs	r2, r3, #16
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	3318      	adds	r3, #24
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	0e1a      	lsrs	r2, r3, #24
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	3319      	adds	r3, #25
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	3312      	adds	r3, #18
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	3313      	adds	r3, #19
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800695e:	f023 0320 	bic.w	r3, r3, #32
 8006962:	b2da      	uxtb	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800697c:	4618      	mov	r0, r3
 800697e:	f7fd ff96 	bl	80048ae <sync_fs>
 8006982:	4603      	mov	r3, r0
 8006984:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006986:	7dfb      	ldrb	r3, [r7, #23]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff ff3f 	bl	800681c <f_sync>
 800699e:	4603      	mov	r3, r0
 80069a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d116      	bne.n	80069d6 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff fa95 	bl	8005ed8 <validate>
 80069ae:	4603      	mov	r3, r0
 80069b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10e      	bne.n	80069d6 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fd fe90 	bl	80046e4 <dec_lock>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d103      	bne.n	80069d6 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80069ee:	2301      	movs	r3, #1
 80069f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80069f6:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <FATFS_LinkDriverEx+0x90>)
 80069f8:	7a5b      	ldrb	r3, [r3, #9]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d831      	bhi.n	8006a64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a00:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <FATFS_LinkDriverEx+0x90>)
 8006a02:	7a5b      	ldrb	r3, [r3, #9]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	4b19      	ldr	r3, [pc, #100]	; (8006a70 <FATFS_LinkDriverEx+0x90>)
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006a0e:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <FATFS_LinkDriverEx+0x90>)
 8006a10:	7a5b      	ldrb	r3, [r3, #9]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	4a16      	ldr	r2, [pc, #88]	; (8006a70 <FATFS_LinkDriverEx+0x90>)
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006a1e:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <FATFS_LinkDriverEx+0x90>)
 8006a20:	7a5b      	ldrb	r3, [r3, #9]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <FATFS_LinkDriverEx+0x90>)
 8006a28:	4413      	add	r3, r2
 8006a2a:	79fa      	ldrb	r2, [r7, #7]
 8006a2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a2e:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <FATFS_LinkDriverEx+0x90>)
 8006a30:	7a5b      	ldrb	r3, [r3, #9]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	b2d1      	uxtb	r1, r2
 8006a38:	4a0d      	ldr	r2, [pc, #52]	; (8006a70 <FATFS_LinkDriverEx+0x90>)
 8006a3a:	7251      	strb	r1, [r2, #9]
 8006a3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006a3e:	7dbb      	ldrb	r3, [r7, #22]
 8006a40:	3330      	adds	r3, #48	; 0x30
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	223a      	movs	r2, #58	; 0x3a
 8006a4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	3302      	adds	r3, #2
 8006a54:	222f      	movs	r2, #47	; 0x2f
 8006a56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	3303      	adds	r3, #3
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr
 8006a70:	200011f4 	.word	0x200011f4

08006a74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006a7e:	2200      	movs	r2, #0
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7ff ffac 	bl	80069e0 <FATFS_LinkDriverEx>
 8006a88:	4603      	mov	r3, r0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <memset>:
 8006a92:	4603      	mov	r3, r0
 8006a94:	4402      	add	r2, r0
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d100      	bne.n	8006a9c <memset+0xa>
 8006a9a:	4770      	bx	lr
 8006a9c:	f803 1b01 	strb.w	r1, [r3], #1
 8006aa0:	e7f9      	b.n	8006a96 <memset+0x4>
	...

08006aa4 <__libc_init_array>:
 8006aa4:	b570      	push	{r4, r5, r6, lr}
 8006aa6:	2600      	movs	r6, #0
 8006aa8:	4d0c      	ldr	r5, [pc, #48]	; (8006adc <__libc_init_array+0x38>)
 8006aaa:	4c0d      	ldr	r4, [pc, #52]	; (8006ae0 <__libc_init_array+0x3c>)
 8006aac:	1b64      	subs	r4, r4, r5
 8006aae:	10a4      	asrs	r4, r4, #2
 8006ab0:	42a6      	cmp	r6, r4
 8006ab2:	d109      	bne.n	8006ac8 <__libc_init_array+0x24>
 8006ab4:	f000 f828 	bl	8006b08 <_init>
 8006ab8:	2600      	movs	r6, #0
 8006aba:	4d0a      	ldr	r5, [pc, #40]	; (8006ae4 <__libc_init_array+0x40>)
 8006abc:	4c0a      	ldr	r4, [pc, #40]	; (8006ae8 <__libc_init_array+0x44>)
 8006abe:	1b64      	subs	r4, r4, r5
 8006ac0:	10a4      	asrs	r4, r4, #2
 8006ac2:	42a6      	cmp	r6, r4
 8006ac4:	d105      	bne.n	8006ad2 <__libc_init_array+0x2e>
 8006ac6:	bd70      	pop	{r4, r5, r6, pc}
 8006ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006acc:	4798      	blx	r3
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7ee      	b.n	8006ab0 <__libc_init_array+0xc>
 8006ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad6:	4798      	blx	r3
 8006ad8:	3601      	adds	r6, #1
 8006ada:	e7f2      	b.n	8006ac2 <__libc_init_array+0x1e>
 8006adc:	08006c38 	.word	0x08006c38
 8006ae0:	08006c38 	.word	0x08006c38
 8006ae4:	08006c38 	.word	0x08006c38
 8006ae8:	08006c3c 	.word	0x08006c3c

08006aec <memcpy>:
 8006aec:	440a      	add	r2, r1
 8006aee:	4291      	cmp	r1, r2
 8006af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006af4:	d100      	bne.n	8006af8 <memcpy+0xc>
 8006af6:	4770      	bx	lr
 8006af8:	b510      	push	{r4, lr}
 8006afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006afe:	4291      	cmp	r1, r2
 8006b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b04:	d1f9      	bne.n	8006afa <memcpy+0xe>
 8006b06:	bd10      	pop	{r4, pc}

08006b08 <_init>:
 8006b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0a:	bf00      	nop
 8006b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0e:	bc08      	pop	{r3}
 8006b10:	469e      	mov	lr, r3
 8006b12:	4770      	bx	lr

08006b14 <_fini>:
 8006b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b16:	bf00      	nop
 8006b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1a:	bc08      	pop	{r3}
 8006b1c:	469e      	mov	lr, r3
 8006b1e:	4770      	bx	lr
